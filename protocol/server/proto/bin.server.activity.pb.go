// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: bin.server.activity.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Activity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActivityLogin map[uint32]uint32      `protobuf:"bytes,2,rep,name=activity_login,json=activityLogin,proto3" json:"activity_login,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 登录活动
	TrialActivity *TrialActivity         `protobuf:"bytes,4,opt,name=trial_activity,json=trialActivity,proto3" json:"trial_activity,omitempty"`                                                                             // 角色试用活动
	AetherDivide  *AetherDivide          `protobuf:"bytes,5,opt,name=aether_divide,json=aetherDivide,proto3" json:"aether_divide,omitempty"`                                                                                // 以太战线
	MatchThree    *MatchThree            `protobuf:"bytes,6,opt,name=match_three,json=matchThree,proto3" json:"match_three,omitempty"`                                                                                      // 折纸小鸟
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_bin_server_activity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{0}
}

func (x *Activity) GetActivityLogin() map[uint32]uint32 {
	if x != nil {
		return x.ActivityLogin
	}
	return nil
}

func (x *Activity) GetTrialActivity() *TrialActivity {
	if x != nil {
		return x.TrialActivity
	}
	return nil
}

func (x *Activity) GetAetherDivide() *AetherDivide {
	if x != nil {
		return x.AetherDivide
	}
	return nil
}

func (x *Activity) GetMatchThree() *MatchThree {
	if x != nil {
		return x.MatchThree
	}
	return nil
}

type TrialActivity struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	CurTrial      *CurTrialActivity             `protobuf:"bytes,1,opt,name=cur_trial,json=curTrial,proto3" json:"cur_trial,omitempty"`                                                                                          // 当前角色试用
	TrialInfoMap  map[uint32]*TrialActivityInfo `protobuf:"bytes,2,rep,name=trial_info_map,json=trialInfoMap,proto3" json:"trial_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 历史角色试用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrialActivity) Reset() {
	*x = TrialActivity{}
	mi := &file_bin_server_activity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialActivity) ProtoMessage() {}

func (x *TrialActivity) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialActivity.ProtoReflect.Descriptor instead.
func (*TrialActivity) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{1}
}

func (x *TrialActivity) GetCurTrial() *CurTrialActivity {
	if x != nil {
		return x.CurTrial
	}
	return nil
}

func (x *TrialActivity) GetTrialInfoMap() map[uint32]*TrialActivityInfo {
	if x != nil {
		return x.TrialInfoMap
	}
	return nil
}

type CurTrialActivity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StageId       uint32                 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"` // 试用关卡id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurTrialActivity) Reset() {
	*x = CurTrialActivity{}
	mi := &file_bin_server_activity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurTrialActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurTrialActivity) ProtoMessage() {}

func (x *CurTrialActivity) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurTrialActivity.ProtoReflect.Descriptor instead.
func (*CurTrialActivity) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{2}
}

func (x *CurTrialActivity) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

type TrialActivityInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StageId       uint32                 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	TakenReward   bool                   `protobuf:"varint,2,opt,name=taken_reward,json=takenReward,proto3" json:"taken_reward,omitempty"`
	Finish        bool                   `protobuf:"varint,3,opt,name=finish,proto3" json:"finish,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrialActivityInfo) Reset() {
	*x = TrialActivityInfo{}
	mi := &file_bin_server_activity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialActivityInfo) ProtoMessage() {}

func (x *TrialActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialActivityInfo.ProtoReflect.Descriptor instead.
func (*TrialActivityInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{3}
}

func (x *TrialActivityInfo) GetStageId() uint32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *TrialActivityInfo) GetTakenReward() bool {
	if x != nil {
		return x.TakenReward
	}
	return false
}

func (x *TrialActivityInfo) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

type AetherDivide struct {
	state           protoimpl.MessageState             `protogen:"open.v1"`
	AvatarList      map[uint32]*AetherDivideAvatarInfo `protobuf:"bytes,1,rep,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                  // 角色信息
	Lineup          map[uint32]*AetherDivideLineup     `protobuf:"bytes,2,rep,name=lineup,proto3" json:"lineup,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                                            // 队伍信息
	AetherSkillList map[uint32]*AetherSkill            `protobuf:"bytes,3,rep,name=aether_skill_list,json=aetherSkillList,proto3" json:"aether_skill_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 道具列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AetherDivide) Reset() {
	*x = AetherDivide{}
	mi := &file_bin_server_activity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AetherDivide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AetherDivide) ProtoMessage() {}

func (x *AetherDivide) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AetherDivide.ProtoReflect.Descriptor instead.
func (*AetherDivide) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{4}
}

func (x *AetherDivide) GetAvatarList() map[uint32]*AetherDivideAvatarInfo {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *AetherDivide) GetLineup() map[uint32]*AetherDivideLineup {
	if x != nil {
		return x.Lineup
	}
	return nil
}

func (x *AetherDivide) GetAetherSkillList() map[uint32]*AetherSkill {
	if x != nil {
		return x.AetherSkillList
	}
	return nil
}

type AetherDivideAvatarInfo struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	AvatarId     uint32                 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Promotion    uint32                 `protobuf:"varint,2,opt,name=promotion,proto3" json:"promotion,omitempty"`                                                                                                      // 突破等级
	PassiveSkill map[uint32]uint32      `protobuf:"bytes,3,rep,name=passive_skill,json=passiveSkill,proto3" json:"passive_skill,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 装备道具
	// uint32 exp = 4;
	CurSp         uint32 `protobuf:"varint,5,opt,name=cur_sp,json=curSp,proto3" json:"cur_sp,omitempty"`
	MaxSp         uint32 `protobuf:"varint,6,opt,name=max_sp,json=maxSp,proto3" json:"max_sp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AetherDivideAvatarInfo) Reset() {
	*x = AetherDivideAvatarInfo{}
	mi := &file_bin_server_activity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AetherDivideAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AetherDivideAvatarInfo) ProtoMessage() {}

func (x *AetherDivideAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AetherDivideAvatarInfo.ProtoReflect.Descriptor instead.
func (*AetherDivideAvatarInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{5}
}

func (x *AetherDivideAvatarInfo) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AetherDivideAvatarInfo) GetPromotion() uint32 {
	if x != nil {
		return x.Promotion
	}
	return 0
}

func (x *AetherDivideAvatarInfo) GetPassiveSkill() map[uint32]uint32 {
	if x != nil {
		return x.PassiveSkill
	}
	return nil
}

func (x *AetherDivideAvatarInfo) GetCurSp() uint32 {
	if x != nil {
		return x.CurSp
	}
	return 0
}

func (x *AetherDivideAvatarInfo) GetMaxSp() uint32 {
	if x != nil {
		return x.MaxSp
	}
	return 0
}

type AetherDivideLineup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                    //序号
	AvatarList    []uint32               `protobuf:"varint,2,rep,packed,name=avatar_list,json=avatarList,proto3" json:"avatar_list,omitempty"` // 角色列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AetherDivideLineup) Reset() {
	*x = AetherDivideLineup{}
	mi := &file_bin_server_activity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AetherDivideLineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AetherDivideLineup) ProtoMessage() {}

func (x *AetherDivideLineup) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AetherDivideLineup.ProtoReflect.Descriptor instead.
func (*AetherDivideLineup) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{6}
}

func (x *AetherDivideLineup) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AetherDivideLineup) GetAvatarList() []uint32 {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

type AetherSkill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        uint32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                        // id
	Num           uint32                 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                                            // 数量
	DressAvatarId uint32                 `protobuf:"varint,3,opt,name=dress_avatar_id,json=dressAvatarId,proto3" json:"dress_avatar_id,omitempty"` // 装备角色
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AetherSkill) Reset() {
	*x = AetherSkill{}
	mi := &file_bin_server_activity_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AetherSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AetherSkill) ProtoMessage() {}

func (x *AetherSkill) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AetherSkill.ProtoReflect.Descriptor instead.
func (*AetherSkill) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{7}
}

func (x *AetherSkill) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AetherSkill) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AetherSkill) GetDressAvatarId() uint32 {
	if x != nil {
		return x.DressAvatarId
	}
	return 0
}

type MatchThree struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	LevelList     map[uint32]*MatchThreeLevelMap `protobuf:"bytes,1,rep,name=level_list,json=levelList,proto3" json:"level_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 关卡信息 level_id
	BirdInfoMap   map[uint32]*MatchThreeBirdInfo `protobuf:"bytes,2,rep,name=bird_info_map,json=birdInfoMap,proto3" json:"bird_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchThree) Reset() {
	*x = MatchThree{}
	mi := &file_bin_server_activity_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchThree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchThree) ProtoMessage() {}

func (x *MatchThree) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchThree.ProtoReflect.Descriptor instead.
func (*MatchThree) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{8}
}

func (x *MatchThree) GetLevelList() map[uint32]*MatchThreeLevelMap {
	if x != nil {
		return x.LevelList
	}
	return nil
}

func (x *MatchThree) GetBirdInfoMap() map[uint32]*MatchThreeBirdInfo {
	if x != nil {
		return x.BirdInfoMap
	}
	return nil
}

type MatchThreeLevelMap struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Level         map[uint32]*MatchThreeLevel `protobuf:"bytes,1,rep,name=level,proto3" json:"level,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // mode
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchThreeLevelMap) Reset() {
	*x = MatchThreeLevelMap{}
	mi := &file_bin_server_activity_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchThreeLevelMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchThreeLevelMap) ProtoMessage() {}

func (x *MatchThreeLevelMap) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchThreeLevelMap.ProtoReflect.Descriptor instead.
func (*MatchThreeLevelMap) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{9}
}

func (x *MatchThreeLevelMap) GetLevel() map[uint32]*MatchThreeLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

type MatchThreeLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LevelId       uint32                 `protobuf:"varint,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"` //关卡
	Mode          uint32                 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`                      //模式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchThreeLevel) Reset() {
	*x = MatchThreeLevel{}
	mi := &file_bin_server_activity_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchThreeLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchThreeLevel) ProtoMessage() {}

func (x *MatchThreeLevel) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchThreeLevel.ProtoReflect.Descriptor instead.
func (*MatchThreeLevel) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{10}
}

func (x *MatchThreeLevel) GetLevelId() uint32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MatchThreeLevel) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type MatchThreeBirdInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BirdId        uint32                 `protobuf:"varint,1,opt,name=bird_id,json=birdId,proto3" json:"bird_id,omitempty"`
	BirdTopScore  uint32                 `protobuf:"varint,2,opt,name=bird_top_score,json=birdTopScore,proto3" json:"bird_top_score,omitempty"`
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Pos           uint32                 `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchThreeBirdInfo) Reset() {
	*x = MatchThreeBirdInfo{}
	mi := &file_bin_server_activity_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchThreeBirdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchThreeBirdInfo) ProtoMessage() {}

func (x *MatchThreeBirdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_activity_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchThreeBirdInfo.ProtoReflect.Descriptor instead.
func (*MatchThreeBirdInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_activity_proto_rawDescGZIP(), []int{11}
}

func (x *MatchThreeBirdInfo) GetBirdId() uint32 {
	if x != nil {
		return x.BirdId
	}
	return 0
}

func (x *MatchThreeBirdInfo) GetBirdTopScore() uint32 {
	if x != nil {
		return x.BirdTopScore
	}
	return 0
}

func (x *MatchThreeBirdInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MatchThreeBirdInfo) GetPos() uint32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

var File_bin_server_activity_proto protoreflect.FileDescriptor

var file_bin_server_activity_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x49, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0xee, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0e, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x59, 0x0a, 0x11, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xef,
	0x03, 0x0a, 0x0c, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x54,
	0x0a, 0x11, 0x61, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x41,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x65, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5c, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x14, 0x41, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x98, 0x02, 0x0a, 0x16, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x5f, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x75,
	0x72, 0x53, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x12, 0x41,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x0b, 0x41, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x0a, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x69,
	0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x2e, 0x42, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x1a, 0x57, 0x0a, 0x0e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x42,
	0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x42, 0x69, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x50, 0x0a, 0x0a, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a,
	0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x65, 0x42, 0x69, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x69, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x69, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x69, 0x72, 0x64, 0x54, 0x6f, 0x70, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_activity_proto_rawDescOnce sync.Once
	file_bin_server_activity_proto_rawDescData = file_bin_server_activity_proto_rawDesc
)

func file_bin_server_activity_proto_rawDescGZIP() []byte {
	file_bin_server_activity_proto_rawDescOnce.Do(func() {
		file_bin_server_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_activity_proto_rawDescData)
	})
	return file_bin_server_activity_proto_rawDescData
}

var file_bin_server_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bin_server_activity_proto_goTypes = []any{
	(*Activity)(nil),               // 0: proto.Activity
	(*TrialActivity)(nil),          // 1: proto.TrialActivity
	(*CurTrialActivity)(nil),       // 2: proto.CurTrialActivity
	(*TrialActivityInfo)(nil),      // 3: proto.TrialActivityInfo
	(*AetherDivide)(nil),           // 4: proto.AetherDivide
	(*AetherDivideAvatarInfo)(nil), // 5: proto.AetherDivideAvatarInfo
	(*AetherDivideLineup)(nil),     // 6: proto.AetherDivideLineup
	(*AetherSkill)(nil),            // 7: proto.AetherSkill
	(*MatchThree)(nil),             // 8: proto.MatchThree
	(*MatchThreeLevelMap)(nil),     // 9: proto.MatchThreeLevelMap
	(*MatchThreeLevel)(nil),        // 10: proto.MatchThreeLevel
	(*MatchThreeBirdInfo)(nil),     // 11: proto.MatchThreeBirdInfo
	nil,                            // 12: proto.Activity.ActivityLoginEntry
	nil,                            // 13: proto.TrialActivity.TrialInfoMapEntry
	nil,                            // 14: proto.AetherDivide.AvatarListEntry
	nil,                            // 15: proto.AetherDivide.LineupEntry
	nil,                            // 16: proto.AetherDivide.AetherSkillListEntry
	nil,                            // 17: proto.AetherDivideAvatarInfo.PassiveSkillEntry
	nil,                            // 18: proto.MatchThree.LevelListEntry
	nil,                            // 19: proto.MatchThree.BirdInfoMapEntry
	nil,                            // 20: proto.MatchThreeLevelMap.LevelEntry
}
var file_bin_server_activity_proto_depIdxs = []int32{
	12, // 0: proto.Activity.activity_login:type_name -> proto.Activity.ActivityLoginEntry
	1,  // 1: proto.Activity.trial_activity:type_name -> proto.TrialActivity
	4,  // 2: proto.Activity.aether_divide:type_name -> proto.AetherDivide
	8,  // 3: proto.Activity.match_three:type_name -> proto.MatchThree
	2,  // 4: proto.TrialActivity.cur_trial:type_name -> proto.CurTrialActivity
	13, // 5: proto.TrialActivity.trial_info_map:type_name -> proto.TrialActivity.TrialInfoMapEntry
	14, // 6: proto.AetherDivide.avatar_list:type_name -> proto.AetherDivide.AvatarListEntry
	15, // 7: proto.AetherDivide.lineup:type_name -> proto.AetherDivide.LineupEntry
	16, // 8: proto.AetherDivide.aether_skill_list:type_name -> proto.AetherDivide.AetherSkillListEntry
	17, // 9: proto.AetherDivideAvatarInfo.passive_skill:type_name -> proto.AetherDivideAvatarInfo.PassiveSkillEntry
	18, // 10: proto.MatchThree.level_list:type_name -> proto.MatchThree.LevelListEntry
	19, // 11: proto.MatchThree.bird_info_map:type_name -> proto.MatchThree.BirdInfoMapEntry
	20, // 12: proto.MatchThreeLevelMap.level:type_name -> proto.MatchThreeLevelMap.LevelEntry
	3,  // 13: proto.TrialActivity.TrialInfoMapEntry.value:type_name -> proto.TrialActivityInfo
	5,  // 14: proto.AetherDivide.AvatarListEntry.value:type_name -> proto.AetherDivideAvatarInfo
	6,  // 15: proto.AetherDivide.LineupEntry.value:type_name -> proto.AetherDivideLineup
	7,  // 16: proto.AetherDivide.AetherSkillListEntry.value:type_name -> proto.AetherSkill
	9,  // 17: proto.MatchThree.LevelListEntry.value:type_name -> proto.MatchThreeLevelMap
	11, // 18: proto.MatchThree.BirdInfoMapEntry.value:type_name -> proto.MatchThreeBirdInfo
	10, // 19: proto.MatchThreeLevelMap.LevelEntry.value:type_name -> proto.MatchThreeLevel
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_bin_server_activity_proto_init() }
func file_bin_server_activity_proto_init() {
	if File_bin_server_activity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_activity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_activity_proto_goTypes,
		DependencyIndexes: file_bin_server_activity_proto_depIdxs,
		MessageInfos:      file_bin_server_activity_proto_msgTypes,
	}.Build()
	File_bin_server_activity_proto = out.File
	file_bin_server_activity_proto_rawDesc = nil
	file_bin_server_activity_proto_goTypes = nil
	file_bin_server_activity_proto_depIdxs = nil
}
