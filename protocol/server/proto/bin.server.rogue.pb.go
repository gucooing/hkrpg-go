// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: bin.server.rogue.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestRogue struct {
	state     protoimpl.MessageState     `protogen:"open.v1"`
	RogueArea map[uint32]*QuestRogueArea `protobuf:"bytes,1,rep,name=rogue_area,json=rogueArea,proto3" json:"rogue_area,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 关卡状态
	// CurRogue cur_rogue = 2; // 当前正在进行的
	QuestRogueHistoryList map[uint32]*QuestRogueHistory `protobuf:"bytes,3,rep,name=quest_rogue_history_list,json=questRogueHistoryList,proto3" json:"quest_rogue_history_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 历史领取信息/[年+周次]:2401
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QuestRogue) Reset() {
	*x = QuestRogue{}
	mi := &file_bin_server_rogue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestRogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestRogue) ProtoMessage() {}

func (x *QuestRogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestRogue.ProtoReflect.Descriptor instead.
func (*QuestRogue) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{0}
}

func (x *QuestRogue) GetRogueArea() map[uint32]*QuestRogueArea {
	if x != nil {
		return x.RogueArea
	}
	return nil
}

func (x *QuestRogue) GetQuestRogueHistoryList() map[uint32]*QuestRogueHistory {
	if x != nil {
		return x.QuestRogueHistoryList
	}
	return nil
}

type QuestRogueArea struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AreaId          uint32                 `protobuf:"varint,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	RogueAreaStatus RogueAreaStatus        `protobuf:"varint,2,opt,name=rogue_area_status,json=rogueAreaStatus,proto3,enum=proto.RogueAreaStatus" json:"rogue_area_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QuestRogueArea) Reset() {
	*x = QuestRogueArea{}
	mi := &file_bin_server_rogue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestRogueArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestRogueArea) ProtoMessage() {}

func (x *QuestRogueArea) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestRogueArea.ProtoReflect.Descriptor instead.
func (*QuestRogueArea) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{1}
}

func (x *QuestRogueArea) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *QuestRogueArea) GetRogueAreaStatus() RogueAreaStatus {
	if x != nil {
		return x.RogueAreaStatus
	}
	return RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_LOCK
}

type QuestRogueHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WeekId        uint32                 `protobuf:"varint,1,opt,name=week_id,json=weekId,proto3" json:"week_id,omitempty"`                                                                               // 周次
	Score         uint32                 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`                                                                                               // 分数
	RowInfo       map[uint32]bool        `protobuf:"bytes,3,rep,name=row_info,json=rowInfo,proto3" json:"row_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //领取奖励
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestRogueHistory) Reset() {
	*x = QuestRogueHistory{}
	mi := &file_bin_server_rogue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestRogueHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestRogueHistory) ProtoMessage() {}

func (x *QuestRogueHistory) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestRogueHistory.ProtoReflect.Descriptor instead.
func (*QuestRogueHistory) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{2}
}

func (x *QuestRogueHistory) GetWeekId() uint32 {
	if x != nil {
		return x.WeekId
	}
	return 0
}

func (x *QuestRogueHistory) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuestRogueHistory) GetRowInfo() map[uint32]bool {
	if x != nil {
		return x.RowInfo
	}
	return nil
}

type TournRogue struct {
	state                  protoimpl.MessageState             `protogen:"open.v1"`
	Exp                    uint32                             `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                                                 // 经验
	TakenLevelRewards      []uint32                           `protobuf:"varint,2,rep,packed,name=taken_level_rewards,json=takenLevelRewards,proto3" json:"taken_level_rewards,omitempty"`                                                                                   // 已领取的等级奖励
	InspirationCircuitInfo map[uint32]*InspirationCircuitInfo `protobuf:"bytes,3,rep,name=inspiration_circuit_info,json=inspirationCircuitInfo,proto3" json:"inspiration_circuit_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 灵感回路信息
	UnlockDifficultyInfo   []uint32                           `protobuf:"varint,4,rep,packed,name=unlock_difficulty_info,json=unlockDifficultyInfo,proto3" json:"unlock_difficulty_info,omitempty"`                                                                          // 已解锁难度
	CurRogueTourn          *CurRogueTourn                     `protobuf:"bytes,5,opt,name=cur_rogue_tourn,json=curRogueTourn,proto3" json:"cur_rogue_tourn,omitempty"`                                                                                                       // 当前差分宇宙
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TournRogue) Reset() {
	*x = TournRogue{}
	mi := &file_bin_server_rogue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournRogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournRogue) ProtoMessage() {}

func (x *TournRogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournRogue.ProtoReflect.Descriptor instead.
func (*TournRogue) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{3}
}

func (x *TournRogue) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *TournRogue) GetTakenLevelRewards() []uint32 {
	if x != nil {
		return x.TakenLevelRewards
	}
	return nil
}

func (x *TournRogue) GetInspirationCircuitInfo() map[uint32]*InspirationCircuitInfo {
	if x != nil {
		return x.InspirationCircuitInfo
	}
	return nil
}

func (x *TournRogue) GetUnlockDifficultyInfo() []uint32 {
	if x != nil {
		return x.UnlockDifficultyInfo
	}
	return nil
}

func (x *TournRogue) GetCurRogueTourn() *CurRogueTourn {
	if x != nil {
		return x.CurRogueTourn
	}
	return nil
}

type InspirationCircuitInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	InspirationCircuitId uint32                 `protobuf:"varint,1,opt,name=inspiration_circuit_id,json=inspirationCircuitId,proto3" json:"inspiration_circuit_id,omitempty"`
	Status               RogueTalentStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=proto.RogueTalentStatus" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InspirationCircuitInfo) Reset() {
	*x = InspirationCircuitInfo{}
	mi := &file_bin_server_rogue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspirationCircuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspirationCircuitInfo) ProtoMessage() {}

func (x *InspirationCircuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspirationCircuitInfo.ProtoReflect.Descriptor instead.
func (*InspirationCircuitInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{4}
}

func (x *InspirationCircuitInfo) GetInspirationCircuitId() uint32 {
	if x != nil {
		return x.InspirationCircuitId
	}
	return 0
}

func (x *InspirationCircuitInfo) GetStatus() RogueTalentStatus {
	if x != nil {
		return x.Status
	}
	return RogueTalentStatus_ROGUE_TALENT_STATUS_LOCK
}

type CurRogueTourn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AreaId        uint32                 `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`                                                                                               // 关卡
	FormulaList   []uint32               `protobuf:"varint,2,rep,packed,name=formula_list,json=formulaList,proto3" json:"formula_list,omitempty"`                                                                         //方程列表
	CurLayerList  map[uint32]*LayerInfo  `protobuf:"bytes,3,rep,name=cur_layer_list,json=curLayerList,proto3" json:"cur_layer_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 关卡列表
	CurLayerIndex uint32                 `protobuf:"varint,4,opt,name=cur_layer_index,json=curLayerIndex,proto3" json:"cur_layer_index,omitempty"`                                                                        //第几关当前
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurRogueTourn) Reset() {
	*x = CurRogueTourn{}
	mi := &file_bin_server_rogue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurRogueTourn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurRogueTourn) ProtoMessage() {}

func (x *CurRogueTourn) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurRogueTourn.ProtoReflect.Descriptor instead.
func (*CurRogueTourn) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{5}
}

func (x *CurRogueTourn) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *CurRogueTourn) GetFormulaList() []uint32 {
	if x != nil {
		return x.FormulaList
	}
	return nil
}

func (x *CurRogueTourn) GetCurLayerList() map[uint32]*LayerInfo {
	if x != nil {
		return x.CurLayerList
	}
	return nil
}

func (x *CurRogueTourn) GetCurLayerIndex() uint32 {
	if x != nil {
		return x.CurLayerIndex
	}
	return 0
}

type LayerInfo struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	LayerId            uint32                         `protobuf:"varint,1,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`                                                                                                                //小关卡id
	Status             RogueTournLayerStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=proto.RogueTournLayerStatus" json:"status,omitempty"`                                                                                                // 状态
	LayerIndex         uint32                         `protobuf:"varint,3,opt,name=layer_index,json=layerIndex,proto3" json:"layer_index,omitempty"`                                                                                                       //第几个小房间
	RogueTournRoomList map[uint32]*RogueTournRoomInfo `protobuf:"bytes,4,rep,name=rogue_tourn_room_list,json=rogueTournRoomList,proto3" json:"rogue_tourn_room_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 小关卡下属房间
	CurRoomIndex       uint32                         `protobuf:"varint,5,opt,name=cur_room_index,json=curRoomIndex,proto3" json:"cur_room_index,omitempty"`                                                                                               // 第几个房间当前
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LayerInfo) Reset() {
	*x = LayerInfo{}
	mi := &file_bin_server_rogue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerInfo) ProtoMessage() {}

func (x *LayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerInfo.ProtoReflect.Descriptor instead.
func (*LayerInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{6}
}

func (x *LayerInfo) GetLayerId() uint32 {
	if x != nil {
		return x.LayerId
	}
	return 0
}

func (x *LayerInfo) GetStatus() RogueTournLayerStatus {
	if x != nil {
		return x.Status
	}
	return RogueTournLayerStatus_ROGUE_TOURN_LAYER_STATUS_NONE
}

func (x *LayerInfo) GetLayerIndex() uint32 {
	if x != nil {
		return x.LayerIndex
	}
	return 0
}

func (x *LayerInfo) GetRogueTournRoomList() map[uint32]*RogueTournRoomInfo {
	if x != nil {
		return x.RogueTournRoomList
	}
	return nil
}

func (x *LayerInfo) GetCurRoomIndex() uint32 {
	if x != nil {
		return x.CurRoomIndex
	}
	return 0
}

type RogueTournRoomInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint32                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                   //id
	RoomIndex     uint32                 `protobuf:"varint,2,opt,name=room_index,json=roomIndex,proto3" json:"room_index,omitempty"`          //第几个房间
	Status        RogueTournRoomStatus   `protobuf:"varint,3,opt,name=status,proto3,enum=proto.RogueTournRoomStatus" json:"status,omitempty"` // 状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RogueTournRoomInfo) Reset() {
	*x = RogueTournRoomInfo{}
	mi := &file_bin_server_rogue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RogueTournRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueTournRoomInfo) ProtoMessage() {}

func (x *RogueTournRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueTournRoomInfo.ProtoReflect.Descriptor instead.
func (*RogueTournRoomInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{7}
}

func (x *RogueTournRoomInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RogueTournRoomInfo) GetRoomIndex() uint32 {
	if x != nil {
		return x.RoomIndex
	}
	return 0
}

func (x *RogueTournRoomInfo) GetStatus() RogueTournRoomStatus {
	if x != nil {
		return x.Status
	}
	return RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_NONE
}

type CurRogue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurAreaId     uint32                 `protobuf:"varint,1,opt,name=cur_area_id,json=curAreaId,proto3" json:"cur_area_id,omitempty"`           // 当前关卡
	AeonId        uint32                 `protobuf:"varint,2,opt,name=aeon_id,json=aeonId,proto3" json:"aeon_id,omitempty"`                      // 命途
	QueuePosition uint32                 `protobuf:"varint,3,opt,name=queue_position,json=queuePosition,proto3" json:"queue_position,omitempty"` // 计数器
	// int32 re_buff_num = 4; // 剩余未兑换数量
	BuffList map[uint32]*RogueBuff `protobuf:"bytes,7,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 模拟宇宙已获得祝福列表
	Status   RogueStatus           `protobuf:"varint,10,opt,name=status,proto3,enum=proto.RogueStatus" json:"status,omitempty"`                                                                       // 状态
	// Types that are valid to be assigned to RogueInfo:
	//
	//	*CurRogue_QuestRogue
	RogueInfo     isCurRogue_RogueInfo    `protobuf_oneof:"rogue_info"`
	Action        map[uint32]*RogueAction `protobuf:"bytes,30,rep,name=action,proto3" json:"action,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 模拟宇宙选择
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurRogue) Reset() {
	*x = CurRogue{}
	mi := &file_bin_server_rogue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurRogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurRogue) ProtoMessage() {}

func (x *CurRogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurRogue.ProtoReflect.Descriptor instead.
func (*CurRogue) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{8}
}

func (x *CurRogue) GetCurAreaId() uint32 {
	if x != nil {
		return x.CurAreaId
	}
	return 0
}

func (x *CurRogue) GetAeonId() uint32 {
	if x != nil {
		return x.AeonId
	}
	return 0
}

func (x *CurRogue) GetQueuePosition() uint32 {
	if x != nil {
		return x.QueuePosition
	}
	return 0
}

func (x *CurRogue) GetBuffList() map[uint32]*RogueBuff {
	if x != nil {
		return x.BuffList
	}
	return nil
}

func (x *CurRogue) GetStatus() RogueStatus {
	if x != nil {
		return x.Status
	}
	return RogueStatus_ROGUE_STATUS_NONE
}

func (x *CurRogue) GetRogueInfo() isCurRogue_RogueInfo {
	if x != nil {
		return x.RogueInfo
	}
	return nil
}

func (x *CurRogue) GetQuestRogue() *CurQuestRogue {
	if x != nil {
		if x, ok := x.RogueInfo.(*CurRogue_QuestRogue); ok {
			return x.QuestRogue
		}
	}
	return nil
}

func (x *CurRogue) GetAction() map[uint32]*RogueAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type isCurRogue_RogueInfo interface {
	isCurRogue_RogueInfo()
}

type CurRogue_QuestRogue struct {
	QuestRogue *CurQuestRogue `protobuf:"bytes,20,opt,name=quest_rogue,json=questRogue,proto3,oneof"` // 模拟宇宙
}

func (*CurRogue_QuestRogue) isCurRogue_RogueInfo() {}

type RogueAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Action:
	//
	//	*RogueAction_BonusSelect
	//	*RogueAction_BuffSelect
	Action        isRogueAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RogueAction) Reset() {
	*x = RogueAction{}
	mi := &file_bin_server_rogue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RogueAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueAction) ProtoMessage() {}

func (x *RogueAction) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueAction.ProtoReflect.Descriptor instead.
func (*RogueAction) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{9}
}

func (x *RogueAction) GetAction() isRogueAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RogueAction) GetBonusSelect() *BonusSelect {
	if x != nil {
		if x, ok := x.Action.(*RogueAction_BonusSelect); ok {
			return x.BonusSelect
		}
	}
	return nil
}

func (x *RogueAction) GetBuffSelect() *BuffSelect {
	if x != nil {
		if x, ok := x.Action.(*RogueAction_BuffSelect); ok {
			return x.BuffSelect
		}
	}
	return nil
}

type isRogueAction_Action interface {
	isRogueAction_Action()
}

type RogueAction_BonusSelect struct {
	BonusSelect *BonusSelect `protobuf:"bytes,101,opt,name=bonus_select,json=bonusSelect,proto3,oneof"` // 开拓祝福
}

type RogueAction_BuffSelect struct {
	BuffSelect *BuffSelect `protobuf:"bytes,102,opt,name=buff_select,json=buffSelect,proto3,oneof"` // buff
}

func (*RogueAction_BonusSelect) isRogueAction_Action() {}

func (*RogueAction_BuffSelect) isRogueAction_Action() {}

type RogueBuff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BuffId        uint32                 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	BuffLevel     uint32                 `protobuf:"varint,2,opt,name=buff_level,json=buffLevel,proto3" json:"buff_level,omitempty"`
	AddTime       uint64                 `protobuf:"varint,3,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RogueBuff) Reset() {
	*x = RogueBuff{}
	mi := &file_bin_server_rogue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RogueBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueBuff) ProtoMessage() {}

func (x *RogueBuff) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueBuff.ProtoReflect.Descriptor instead.
func (*RogueBuff) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{10}
}

func (x *RogueBuff) GetBuffId() uint32 {
	if x != nil {
		return x.BuffId
	}
	return 0
}

func (x *RogueBuff) GetBuffLevel() uint32 {
	if x != nil {
		return x.BuffLevel
	}
	return 0
}

func (x *RogueBuff) GetAddTime() uint64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

type CurQuestRogue struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	RogueMapId    uint32                    `protobuf:"varint,1,opt,name=rogue_map_id,json=rogueMapId,proto3" json:"rogue_map_id,omitempty"`                                                                                 // mapid
	CurSiteId     uint32                    `protobuf:"varint,2,opt,name=cur_siteId,json=curSiteId,proto3" json:"cur_siteId,omitempty"`                                                                                      // 当前房间
	RogueRoomMap  map[uint32]*RogueRoomInfo `protobuf:"bytes,3,rep,name=rogue_room_map,json=rogueRoomMap,proto3" json:"rogue_room_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 房间列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurQuestRogue) Reset() {
	*x = CurQuestRogue{}
	mi := &file_bin_server_rogue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurQuestRogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurQuestRogue) ProtoMessage() {}

func (x *CurQuestRogue) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurQuestRogue.ProtoReflect.Descriptor instead.
func (*CurQuestRogue) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{11}
}

func (x *CurQuestRogue) GetRogueMapId() uint32 {
	if x != nil {
		return x.RogueMapId
	}
	return 0
}

func (x *CurQuestRogue) GetCurSiteId() uint32 {
	if x != nil {
		return x.CurSiteId
	}
	return 0
}

func (x *CurQuestRogue) GetRogueRoomMap() map[uint32]*RogueRoomInfo {
	if x != nil {
		return x.RogueRoomMap
	}
	return nil
}

type RogueRoomInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RoomId         uint32                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomStatus     RoomStatus             `protobuf:"varint,2,opt,name=room_status,json=roomStatus,proto3,enum=proto.RoomStatus" json:"room_status,omitempty"`
	NextSiteIdList []uint32               `protobuf:"varint,3,rep,packed,name=next_site_id_list,json=nextSiteIdList,proto3" json:"next_site_id_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RogueRoomInfo) Reset() {
	*x = RogueRoomInfo{}
	mi := &file_bin_server_rogue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RogueRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueRoomInfo) ProtoMessage() {}

func (x *RogueRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueRoomInfo.ProtoReflect.Descriptor instead.
func (*RogueRoomInfo) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{12}
}

func (x *RogueRoomInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RogueRoomInfo) GetRoomStatus() RoomStatus {
	if x != nil {
		return x.RoomStatus
	}
	return RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_NONE
}

func (x *RogueRoomInfo) GetNextSiteIdList() []uint32 {
	if x != nil {
		return x.NextSiteIdList
	}
	return nil
}

type BonusSelect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BonusIdMap    map[uint32]bool        `protobuf:"bytes,1,rep,name=bonus_id_map,json=bonusIdMap,proto3" json:"bonus_id_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BonusSelect) Reset() {
	*x = BonusSelect{}
	mi := &file_bin_server_rogue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BonusSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusSelect) ProtoMessage() {}

func (x *BonusSelect) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusSelect.ProtoReflect.Descriptor instead.
func (*BonusSelect) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{13}
}

func (x *BonusSelect) GetBonusIdMap() map[uint32]bool {
	if x != nil {
		return x.BonusIdMap
	}
	return nil
}

type BuffSelect struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SourceHintId     uint32                 `protobuf:"varint,1,opt,name=source_hint_id,json=sourceHintId,proto3" json:"source_hint_id,omitempty"`                                                                            //提示文本/横幅
	RollBuffCost     map[uint32]uint32      `protobuf:"bytes,2,rep,name=roll_buff_cost,json=rollBuffCost,proto3" json:"roll_buff_cost,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 刷新费用
	CanRoll          bool                   `protobuf:"varint,3,opt,name=can_roll,json=canRoll,proto3" json:"can_roll,omitempty"`                                                                                             // 是否允许刷新
	RollBuffCount    uint32                 `protobuf:"varint,4,opt,name=roll_buff_count,json=rollBuffCount,proto3" json:"roll_buff_count,omitempty"`                                                                         // 已刷新次数
	RollBuffMaxCount uint32                 `protobuf:"varint,5,opt,name=roll_buff_max_count,json=rollBuffMaxCount,proto3" json:"roll_buff_max_count,omitempty"`                                                              // 最大刷新次数
	SourceCurCount   uint32                 `protobuf:"varint,6,opt,name=source_cur_count,json=sourceCurCount,proto3" json:"source_cur_count,omitempty"`                                                                      // 提示
	BuffMap          map[uint32]*RogueBuff  `protobuf:"bytes,7,rep,name=buff_map,json=buffMap,proto3" json:"buff_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                   // buff列表
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BuffSelect) Reset() {
	*x = BuffSelect{}
	mi := &file_bin_server_rogue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffSelect) ProtoMessage() {}

func (x *BuffSelect) ProtoReflect() protoreflect.Message {
	mi := &file_bin_server_rogue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffSelect.ProtoReflect.Descriptor instead.
func (*BuffSelect) Descriptor() ([]byte, []int) {
	return file_bin_server_rogue_proto_rawDescGZIP(), []int{14}
}

func (x *BuffSelect) GetSourceHintId() uint32 {
	if x != nil {
		return x.SourceHintId
	}
	return 0
}

func (x *BuffSelect) GetRollBuffCost() map[uint32]uint32 {
	if x != nil {
		return x.RollBuffCost
	}
	return nil
}

func (x *BuffSelect) GetCanRoll() bool {
	if x != nil {
		return x.CanRoll
	}
	return false
}

func (x *BuffSelect) GetRollBuffCount() uint32 {
	if x != nil {
		return x.RollBuffCount
	}
	return 0
}

func (x *BuffSelect) GetRollBuffMaxCount() uint32 {
	if x != nil {
		return x.RollBuffMaxCount
	}
	return 0
}

func (x *BuffSelect) GetSourceCurCount() uint32 {
	if x != nil {
		return x.SourceCurCount
	}
	return 0
}

func (x *BuffSelect) GetBuffMap() map[uint32]*RogueBuff {
	if x != nil {
		return x.BuffMap
	}
	return nil
}

var File_bin_server_rogue_proto protoreflect.FileDescriptor

var file_bin_server_rogue_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x65, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x53, 0x0a, 0x0e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62,
	0x0a, 0x1a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6c, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x11,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc0, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x95, 0x03, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x1a, 0x68, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x16,
	0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94,
	0x02, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0x51, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x02, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x15, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x60, 0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec,
	0x03, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x75, 0x72, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x65, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x65,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62,
	0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x4d, 0x0a, 0x0d, 0x42, 0x75, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4d, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x01,
	0x0a, 0x0b, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x09, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x75, 0x72, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x55, 0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x3d,
	0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x03,
	0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x61, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x75, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x66, 0x66,
	0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bin_server_rogue_proto_rawDescOnce sync.Once
	file_bin_server_rogue_proto_rawDescData = file_bin_server_rogue_proto_rawDesc
)

func file_bin_server_rogue_proto_rawDescGZIP() []byte {
	file_bin_server_rogue_proto_rawDescOnce.Do(func() {
		file_bin_server_rogue_proto_rawDescData = protoimpl.X.CompressGZIP(file_bin_server_rogue_proto_rawDescData)
	})
	return file_bin_server_rogue_proto_rawDescData
}

var file_bin_server_rogue_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_bin_server_rogue_proto_goTypes = []any{
	(*QuestRogue)(nil),             // 0: proto.QuestRogue
	(*QuestRogueArea)(nil),         // 1: proto.QuestRogueArea
	(*QuestRogueHistory)(nil),      // 2: proto.QuestRogueHistory
	(*TournRogue)(nil),             // 3: proto.TournRogue
	(*InspirationCircuitInfo)(nil), // 4: proto.InspirationCircuitInfo
	(*CurRogueTourn)(nil),          // 5: proto.CurRogueTourn
	(*LayerInfo)(nil),              // 6: proto.LayerInfo
	(*RogueTournRoomInfo)(nil),     // 7: proto.RogueTournRoomInfo
	(*CurRogue)(nil),               // 8: proto.CurRogue
	(*RogueAction)(nil),            // 9: proto.RogueAction
	(*RogueBuff)(nil),              // 10: proto.RogueBuff
	(*CurQuestRogue)(nil),          // 11: proto.CurQuestRogue
	(*RogueRoomInfo)(nil),          // 12: proto.RogueRoomInfo
	(*BonusSelect)(nil),            // 13: proto.BonusSelect
	(*BuffSelect)(nil),             // 14: proto.BuffSelect
	nil,                            // 15: proto.QuestRogue.RogueAreaEntry
	nil,                            // 16: proto.QuestRogue.QuestRogueHistoryListEntry
	nil,                            // 17: proto.QuestRogueHistory.RowInfoEntry
	nil,                            // 18: proto.TournRogue.InspirationCircuitInfoEntry
	nil,                            // 19: proto.CurRogueTourn.CurLayerListEntry
	nil,                            // 20: proto.LayerInfo.RogueTournRoomListEntry
	nil,                            // 21: proto.CurRogue.BuffListEntry
	nil,                            // 22: proto.CurRogue.ActionEntry
	nil,                            // 23: proto.CurQuestRogue.RogueRoomMapEntry
	nil,                            // 24: proto.BonusSelect.BonusIdMapEntry
	nil,                            // 25: proto.BuffSelect.RollBuffCostEntry
	nil,                            // 26: proto.BuffSelect.BuffMapEntry
	(RogueAreaStatus)(0),           // 27: proto.RogueAreaStatus
	(RogueTalentStatus)(0),         // 28: proto.RogueTalentStatus
	(RogueTournLayerStatus)(0),     // 29: proto.RogueTournLayerStatus
	(RogueTournRoomStatus)(0),      // 30: proto.RogueTournRoomStatus
	(RogueStatus)(0),               // 31: proto.RogueStatus
	(RoomStatus)(0),                // 32: proto.RoomStatus
}
var file_bin_server_rogue_proto_depIdxs = []int32{
	15, // 0: proto.QuestRogue.rogue_area:type_name -> proto.QuestRogue.RogueAreaEntry
	16, // 1: proto.QuestRogue.quest_rogue_history_list:type_name -> proto.QuestRogue.QuestRogueHistoryListEntry
	27, // 2: proto.QuestRogueArea.rogue_area_status:type_name -> proto.RogueAreaStatus
	17, // 3: proto.QuestRogueHistory.row_info:type_name -> proto.QuestRogueHistory.RowInfoEntry
	18, // 4: proto.TournRogue.inspiration_circuit_info:type_name -> proto.TournRogue.InspirationCircuitInfoEntry
	5,  // 5: proto.TournRogue.cur_rogue_tourn:type_name -> proto.CurRogueTourn
	28, // 6: proto.InspirationCircuitInfo.status:type_name -> proto.RogueTalentStatus
	19, // 7: proto.CurRogueTourn.cur_layer_list:type_name -> proto.CurRogueTourn.CurLayerListEntry
	29, // 8: proto.LayerInfo.status:type_name -> proto.RogueTournLayerStatus
	20, // 9: proto.LayerInfo.rogue_tourn_room_list:type_name -> proto.LayerInfo.RogueTournRoomListEntry
	30, // 10: proto.RogueTournRoomInfo.status:type_name -> proto.RogueTournRoomStatus
	21, // 11: proto.CurRogue.buff_list:type_name -> proto.CurRogue.BuffListEntry
	31, // 12: proto.CurRogue.status:type_name -> proto.RogueStatus
	11, // 13: proto.CurRogue.quest_rogue:type_name -> proto.CurQuestRogue
	22, // 14: proto.CurRogue.action:type_name -> proto.CurRogue.ActionEntry
	13, // 15: proto.RogueAction.bonus_select:type_name -> proto.BonusSelect
	14, // 16: proto.RogueAction.buff_select:type_name -> proto.BuffSelect
	23, // 17: proto.CurQuestRogue.rogue_room_map:type_name -> proto.CurQuestRogue.RogueRoomMapEntry
	32, // 18: proto.RogueRoomInfo.room_status:type_name -> proto.RoomStatus
	24, // 19: proto.BonusSelect.bonus_id_map:type_name -> proto.BonusSelect.BonusIdMapEntry
	25, // 20: proto.BuffSelect.roll_buff_cost:type_name -> proto.BuffSelect.RollBuffCostEntry
	26, // 21: proto.BuffSelect.buff_map:type_name -> proto.BuffSelect.BuffMapEntry
	1,  // 22: proto.QuestRogue.RogueAreaEntry.value:type_name -> proto.QuestRogueArea
	2,  // 23: proto.QuestRogue.QuestRogueHistoryListEntry.value:type_name -> proto.QuestRogueHistory
	4,  // 24: proto.TournRogue.InspirationCircuitInfoEntry.value:type_name -> proto.InspirationCircuitInfo
	6,  // 25: proto.CurRogueTourn.CurLayerListEntry.value:type_name -> proto.LayerInfo
	7,  // 26: proto.LayerInfo.RogueTournRoomListEntry.value:type_name -> proto.RogueTournRoomInfo
	10, // 27: proto.CurRogue.BuffListEntry.value:type_name -> proto.RogueBuff
	9,  // 28: proto.CurRogue.ActionEntry.value:type_name -> proto.RogueAction
	12, // 29: proto.CurQuestRogue.RogueRoomMapEntry.value:type_name -> proto.RogueRoomInfo
	10, // 30: proto.BuffSelect.BuffMapEntry.value:type_name -> proto.RogueBuff
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_bin_server_rogue_proto_init() }
func file_bin_server_rogue_proto_init() {
	if File_bin_server_rogue_proto != nil {
		return
	}
	file_enum_server_proto_init()
	file_bin_server_rogue_proto_msgTypes[8].OneofWrappers = []any{
		(*CurRogue_QuestRogue)(nil),
	}
	file_bin_server_rogue_proto_msgTypes[9].OneofWrappers = []any{
		(*RogueAction_BonusSelect)(nil),
		(*RogueAction_BuffSelect)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bin_server_rogue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bin_server_rogue_proto_goTypes,
		DependencyIndexes: file_bin_server_rogue_proto_depIdxs,
		MessageInfos:      file_bin_server_rogue_proto_msgTypes,
	}.Build()
	File_bin_server_rogue_proto = out.File
	file_bin_server_rogue_proto_rawDesc = nil
	file_bin_server_rogue_proto_goTypes = nil
	file_bin_server_rogue_proto_depIdxs = nil
}
