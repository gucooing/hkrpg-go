// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: enum.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gender int32

const (
	Gender_GenderNone  Gender = 0
	Gender_GenderMan   Gender = 1
	Gender_GenderWoman Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GenderNone",
		1: "GenderMan",
		2: "GenderWoman",
	}
	Gender_value = map[string]int32{
		"GenderNone":  0,
		"GenderMan":   1,
		"GenderWoman": 2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{0}
}

type HeroBasicType int32

const (
	HeroBasicType_None        HeroBasicType = 0
	HeroBasicType_BoyWarrior  HeroBasicType = 8001
	HeroBasicType_GirlWarrior HeroBasicType = 8002
	HeroBasicType_BoyKnight   HeroBasicType = 8003
	HeroBasicType_GirlKnight  HeroBasicType = 8004
	HeroBasicType_BoyRogue    HeroBasicType = 8005
	HeroBasicType_GirlRogue   HeroBasicType = 8006
	HeroBasicType_BoyMage     HeroBasicType = 8007
	HeroBasicType_GirlMage    HeroBasicType = 8008
	HeroBasicType_BoyShaman   HeroBasicType = 8009
	HeroBasicType_GirlShaman  HeroBasicType = 8010
	HeroBasicType_BoyWarlock  HeroBasicType = 8011
	HeroBasicType_GirlWarlock HeroBasicType = 8012
	HeroBasicType_BoyPriest   HeroBasicType = 8013
	HeroBasicType_GirlPriest  HeroBasicType = 8014
)

// Enum value maps for HeroBasicType.
var (
	HeroBasicType_name = map[int32]string{
		0:    "None",
		8001: "BoyWarrior",
		8002: "GirlWarrior",
		8003: "BoyKnight",
		8004: "GirlKnight",
		8005: "BoyRogue",
		8006: "GirlRogue",
		8007: "BoyMage",
		8008: "GirlMage",
		8009: "BoyShaman",
		8010: "GirlShaman",
		8011: "BoyWarlock",
		8012: "GirlWarlock",
		8013: "BoyPriest",
		8014: "GirlPriest",
	}
	HeroBasicType_value = map[string]int32{
		"None":        0,
		"BoyWarrior":  8001,
		"GirlWarrior": 8002,
		"BoyKnight":   8003,
		"GirlKnight":  8004,
		"BoyRogue":    8005,
		"GirlRogue":   8006,
		"BoyMage":     8007,
		"GirlMage":    8008,
		"BoyShaman":   8009,
		"GirlShaman":  8010,
		"BoyWarlock":  8011,
		"GirlWarlock": 8012,
		"BoyPriest":   8013,
		"GirlPriest":  8014,
	}
)

func (x HeroBasicType) Enum() *HeroBasicType {
	p := new(HeroBasicType)
	*p = x
	return p
}

func (x HeroBasicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeroBasicType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[1].Descriptor()
}

func (HeroBasicType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[1]
}

func (x HeroBasicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeroBasicType.Descriptor instead.
func (HeroBasicType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{1}
}

type AvatarType int32

const (
	AvatarType_AVATAR_TYPE_NONE              AvatarType = 0
	AvatarType_AVATAR_TRIAL_TYPE             AvatarType = 1 // 试用
	AvatarType_AVATAR_LIMIT_TYPE             AvatarType = 2 // 死亡
	AvatarType_AVATAR_FORMAL_TYPE            AvatarType = 3 // 正常
	AvatarType_AVATAR_ASSIST_TYPE            AvatarType = 4 // 援助
	AvatarType_AVATAR_AETHER_DIVIDE_TYPE     AvatarType = 5
	AvatarType_AVATAR_UPGRADE_AVAILABLE_TYPE AvatarType = 6
)

// Enum value maps for AvatarType.
var (
	AvatarType_name = map[int32]string{
		0: "AVATAR_TYPE_NONE",
		1: "AVATAR_TRIAL_TYPE",
		2: "AVATAR_LIMIT_TYPE",
		3: "AVATAR_FORMAL_TYPE",
		4: "AVATAR_ASSIST_TYPE",
		5: "AVATAR_AETHER_DIVIDE_TYPE",
		6: "AVATAR_UPGRADE_AVAILABLE_TYPE",
	}
	AvatarType_value = map[string]int32{
		"AVATAR_TYPE_NONE":              0,
		"AVATAR_TRIAL_TYPE":             1,
		"AVATAR_LIMIT_TYPE":             2,
		"AVATAR_FORMAL_TYPE":            3,
		"AVATAR_ASSIST_TYPE":            4,
		"AVATAR_AETHER_DIVIDE_TYPE":     5,
		"AVATAR_UPGRADE_AVAILABLE_TYPE": 6,
	}
)

func (x AvatarType) Enum() *AvatarType {
	p := new(AvatarType)
	*p = x
	return p
}

func (x AvatarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[2].Descriptor()
}

func (AvatarType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[2]
}

func (x AvatarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarType.Descriptor instead.
func (AvatarType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{2}
}

type ExtraLineupType int32

const (
	ExtraLineupType_LINEUP_NONE             ExtraLineupType = 0
	ExtraLineupType_LINEUP_CHALLENGE        ExtraLineupType = 1
	ExtraLineupType_LINEUP_ROGUE            ExtraLineupType = 2
	ExtraLineupType_LINEUP_CHALLENGE_2      ExtraLineupType = 3
	ExtraLineupType_LINEUP_CHALLENGE_3      ExtraLineupType = 4
	ExtraLineupType_LINEUP_ROGUE_CHALLENGE  ExtraLineupType = 5
	ExtraLineupType_LINEUP_STAGE_TRIAL      ExtraLineupType = 6
	ExtraLineupType_LINEUP_ROGUE_TRIAL      ExtraLineupType = 7
	ExtraLineupType_LINEUP_ACTIVITY         ExtraLineupType = 8
	ExtraLineupType_LINEUP_BOXING_CLUB      ExtraLineupType = 9
	ExtraLineupType_LINEUP_TREASURE_DUNGEON ExtraLineupType = 11
	ExtraLineupType_LINEUP_CHESS_ROGUE      ExtraLineupType = 12
	ExtraLineupType_LINEUP_HELIOBUS         ExtraLineupType = 13
	ExtraLineupType_LINEUP_TOURN_ROGUE      ExtraLineupType = 14
	ExtraLineupType_LINEUP_RELIC_ROGUE      ExtraLineupType = 15
)

// Enum value maps for ExtraLineupType.
var (
	ExtraLineupType_name = map[int32]string{
		0:  "LINEUP_NONE",
		1:  "LINEUP_CHALLENGE",
		2:  "LINEUP_ROGUE",
		3:  "LINEUP_CHALLENGE_2",
		4:  "LINEUP_CHALLENGE_3",
		5:  "LINEUP_ROGUE_CHALLENGE",
		6:  "LINEUP_STAGE_TRIAL",
		7:  "LINEUP_ROGUE_TRIAL",
		8:  "LINEUP_ACTIVITY",
		9:  "LINEUP_BOXING_CLUB",
		11: "LINEUP_TREASURE_DUNGEON",
		12: "LINEUP_CHESS_ROGUE",
		13: "LINEUP_HELIOBUS",
		14: "LINEUP_TOURN_ROGUE",
		15: "LINEUP_RELIC_ROGUE",
	}
	ExtraLineupType_value = map[string]int32{
		"LINEUP_NONE":             0,
		"LINEUP_CHALLENGE":        1,
		"LINEUP_ROGUE":            2,
		"LINEUP_CHALLENGE_2":      3,
		"LINEUP_CHALLENGE_3":      4,
		"LINEUP_ROGUE_CHALLENGE":  5,
		"LINEUP_STAGE_TRIAL":      6,
		"LINEUP_ROGUE_TRIAL":      7,
		"LINEUP_ACTIVITY":         8,
		"LINEUP_BOXING_CLUB":      9,
		"LINEUP_TREASURE_DUNGEON": 11,
		"LINEUP_CHESS_ROGUE":      12,
		"LINEUP_HELIOBUS":         13,
		"LINEUP_TOURN_ROGUE":      14,
		"LINEUP_RELIC_ROGUE":      15,
	}
)

func (x ExtraLineupType) Enum() *ExtraLineupType {
	p := new(ExtraLineupType)
	*p = x
	return p
}

func (x ExtraLineupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtraLineupType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[3].Descriptor()
}

func (ExtraLineupType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[3]
}

func (x ExtraLineupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtraLineupType.Descriptor instead.
func (ExtraLineupType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{3}
}

type BattleType int32

const (
	BattleType_Battle_NONE              BattleType = 0 // 普通状态
	BattleType_Battle_CHALLENGE         BattleType = 1 // 忘却之庭
	BattleType_Battle_CHALLENGE_Story   BattleType = 2 // 忘却之庭活动
	BattleType_Battle_CHALLENGE_Story_2 BattleType = 3 // 末日之影
	BattleType_Battle_QUSET_ROGUE       BattleType = 4 // 模拟宇宙
	BattleType_Battle_TrialActivity     BattleType = 5 // 角色试用
	BattleType_Battle_ROGUE_TOURN       BattleType = 6 // 差分宇宙
	BattleType_Battle_RAID              BattleType = 7 // 副本
)

// Enum value maps for BattleType.
var (
	BattleType_name = map[int32]string{
		0: "Battle_NONE",
		1: "Battle_CHALLENGE",
		2: "Battle_CHALLENGE_Story",
		3: "Battle_CHALLENGE_Story_2",
		4: "Battle_QUSET_ROGUE",
		5: "Battle_TrialActivity",
		6: "Battle_ROGUE_TOURN",
		7: "Battle_RAID",
	}
	BattleType_value = map[string]int32{
		"Battle_NONE":              0,
		"Battle_CHALLENGE":         1,
		"Battle_CHALLENGE_Story":   2,
		"Battle_CHALLENGE_Story_2": 3,
		"Battle_QUSET_ROGUE":       4,
		"Battle_TrialActivity":     5,
		"Battle_ROGUE_TOURN":       6,
		"Battle_RAID":              7,
	}
)

func (x BattleType) Enum() *BattleType {
	p := new(BattleType)
	*p = x
	return p
}

func (x BattleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[4].Descriptor()
}

func (BattleType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[4]
}

func (x BattleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattleType.Descriptor instead.
func (BattleType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{4}
}

type LanguageType int32

const (
	LanguageType_LANGUAGE_NONE LanguageType = 0
	LanguageType_LANGUAGE_SC   LanguageType = 1
	LanguageType_LANGUAGE_TC   LanguageType = 2
	LanguageType_LANGUAGE_EN   LanguageType = 3
	LanguageType_LANGUAGE_KR   LanguageType = 4
	LanguageType_LANGUAGE_JP   LanguageType = 5
	LanguageType_LANGUAGE_FR   LanguageType = 6
	LanguageType_LANGUAGE_DE   LanguageType = 7
	LanguageType_LANGUAGE_ES   LanguageType = 8
	LanguageType_LANGUAGE_PT   LanguageType = 9
	LanguageType_LANGUAGE_RU   LanguageType = 10
	LanguageType_LANGUAGE_TH   LanguageType = 11
	LanguageType_LANGUAGE_VI   LanguageType = 12
	LanguageType_LANGUAGE_ID   LanguageType = 13
)

// Enum value maps for LanguageType.
var (
	LanguageType_name = map[int32]string{
		0:  "LANGUAGE_NONE",
		1:  "LANGUAGE_SC",
		2:  "LANGUAGE_TC",
		3:  "LANGUAGE_EN",
		4:  "LANGUAGE_KR",
		5:  "LANGUAGE_JP",
		6:  "LANGUAGE_FR",
		7:  "LANGUAGE_DE",
		8:  "LANGUAGE_ES",
		9:  "LANGUAGE_PT",
		10: "LANGUAGE_RU",
		11: "LANGUAGE_TH",
		12: "LANGUAGE_VI",
		13: "LANGUAGE_ID",
	}
	LanguageType_value = map[string]int32{
		"LANGUAGE_NONE": 0,
		"LANGUAGE_SC":   1,
		"LANGUAGE_TC":   2,
		"LANGUAGE_EN":   3,
		"LANGUAGE_KR":   4,
		"LANGUAGE_JP":   5,
		"LANGUAGE_FR":   6,
		"LANGUAGE_DE":   7,
		"LANGUAGE_ES":   8,
		"LANGUAGE_PT":   9,
		"LANGUAGE_RU":   10,
		"LANGUAGE_TH":   11,
		"LANGUAGE_VI":   12,
		"LANGUAGE_ID":   13,
	}
)

func (x LanguageType) Enum() *LanguageType {
	p := new(LanguageType)
	*p = x
	return p
}

func (x LanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[5].Descriptor()
}

func (LanguageType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[5]
}

func (x LanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageType.Descriptor instead.
func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{5}
}

type PlatformType int32

const (
	PlatformType_EDITOR             PlatformType = 0
	PlatformType_IOS                PlatformType = 1
	PlatformType_ANDROID            PlatformType = 2
	PlatformType_PC                 PlatformType = 3
	PlatformType_WEB                PlatformType = 4
	PlatformType_WAP                PlatformType = 5
	PlatformType_PS4                PlatformType = 6
	PlatformType_NINTENDO           PlatformType = 7
	PlatformType_CLOUD_ANDROID      PlatformType = 8
	PlatformType_CLOUD_PC           PlatformType = 9
	PlatformType_CLOUD_IOS          PlatformType = 10
	PlatformType_PS5                PlatformType = 11
	PlatformType_MAC                PlatformType = 12
	PlatformType_CLOUD_MAC          PlatformType = 13
	PlatformType_CLOUD_WEB_ANDROID  PlatformType = 20
	PlatformType_CLOUD_WEB_IOS      PlatformType = 21
	PlatformType_CLOUD_WEB_PC       PlatformType = 22
	PlatformType_CLOUD_WEB_MAC      PlatformType = 23
	PlatformType_CLOUD_WEB_TOUCH    PlatformType = 24
	PlatformType_CLOUD_WEB_KEYBOARD PlatformType = 25
)

// Enum value maps for PlatformType.
var (
	PlatformType_name = map[int32]string{
		0:  "EDITOR",
		1:  "IOS",
		2:  "ANDROID",
		3:  "PC",
		4:  "WEB",
		5:  "WAP",
		6:  "PS4",
		7:  "NINTENDO",
		8:  "CLOUD_ANDROID",
		9:  "CLOUD_PC",
		10: "CLOUD_IOS",
		11: "PS5",
		12: "MAC",
		13: "CLOUD_MAC",
		20: "CLOUD_WEB_ANDROID",
		21: "CLOUD_WEB_IOS",
		22: "CLOUD_WEB_PC",
		23: "CLOUD_WEB_MAC",
		24: "CLOUD_WEB_TOUCH",
		25: "CLOUD_WEB_KEYBOARD",
	}
	PlatformType_value = map[string]int32{
		"EDITOR":             0,
		"IOS":                1,
		"ANDROID":            2,
		"PC":                 3,
		"WEB":                4,
		"WAP":                5,
		"PS4":                6,
		"NINTENDO":           7,
		"CLOUD_ANDROID":      8,
		"CLOUD_PC":           9,
		"CLOUD_IOS":          10,
		"PS5":                11,
		"MAC":                12,
		"CLOUD_MAC":          13,
		"CLOUD_WEB_ANDROID":  20,
		"CLOUD_WEB_IOS":      21,
		"CLOUD_WEB_PC":       22,
		"CLOUD_WEB_MAC":      23,
		"CLOUD_WEB_TOUCH":    24,
		"CLOUD_WEB_KEYBOARD": 25,
	}
)

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}

func (x PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[6].Descriptor()
}

func (PlatformType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[6]
}

func (x PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformType.Descriptor instead.
func (PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{6}
}

type ServerType int32

const (
	ServerType_SERVICE_NONE     ServerType = 0
	ServerType_SERVICE_NODE     ServerType = 1
	ServerType_SERVICE_GAME     ServerType = 2
	ServerType_SERVICE_GATE     ServerType = 3
	ServerType_SERVICE_DISPATCH ServerType = 4
	ServerType_SERVICE_MULTI    ServerType = 5
	ServerType_SERVICE_MUIP     ServerType = 6
)

// Enum value maps for ServerType.
var (
	ServerType_name = map[int32]string{
		0: "SERVICE_NONE",
		1: "SERVICE_NODE",
		2: "SERVICE_GAME",
		3: "SERVICE_GATE",
		4: "SERVICE_DISPATCH",
		5: "SERVICE_MULTI",
		6: "SERVICE_MUIP",
	}
	ServerType_value = map[string]int32{
		"SERVICE_NONE":     0,
		"SERVICE_NODE":     1,
		"SERVICE_GAME":     2,
		"SERVICE_GATE":     3,
		"SERVICE_DISPATCH": 4,
		"SERVICE_MULTI":    5,
		"SERVICE_MUIP":     6,
	}
)

func (x ServerType) Enum() *ServerType {
	p := new(ServerType)
	*p = x
	return p
}

func (x ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[7].Descriptor()
}

func (ServerType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[7]
}

func (x ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerType.Descriptor instead.
func (ServerType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{7}
}

type PlayerStatus int32

const (
	PlayerStatus_PlayerStatus_PreLogin    PlayerStatus = 0 // 登录前
	PlayerStatus_PlayerStatus_LoggingIn   PlayerStatus = 1 // 登录中
	PlayerStatus_PlayerStatus_PostLogin   PlayerStatus = 2 // 登录完成
	PlayerStatus_PlayerStatus_Logout_Wait PlayerStatus = 3 //离线等待中
	PlayerStatus_PlayerStatus_Logout      PlayerStatus = 4 //离线等待中
)

// Enum value maps for PlayerStatus.
var (
	PlayerStatus_name = map[int32]string{
		0: "PlayerStatus_PreLogin",
		1: "PlayerStatus_LoggingIn",
		2: "PlayerStatus_PostLogin",
		3: "PlayerStatus_Logout_Wait",
		4: "PlayerStatus_Logout",
	}
	PlayerStatus_value = map[string]int32{
		"PlayerStatus_PreLogin":    0,
		"PlayerStatus_LoggingIn":   1,
		"PlayerStatus_PostLogin":   2,
		"PlayerStatus_Logout_Wait": 3,
		"PlayerStatus_Logout":      4,
	}
)

func (x PlayerStatus) Enum() *PlayerStatus {
	p := new(PlayerStatus)
	*p = x
	return p
}

func (x PlayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[8].Descriptor()
}

func (PlayerStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[8]
}

func (x PlayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatus.Descriptor instead.
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{8}
}

type LOGOUTSTATUS int32

const (
	LOGOUTSTATUS_OFFLINE_NONE         LOGOUTSTATUS = 0 // 正常离线
	LOGOUTSTATUS_OFFLINE_GAME_ERROR   LOGOUTSTATUS = 1 // gs异常
	LOGOUTSTATUS_OFFLINE_REPEAT_LOGIN LOGOUTSTATUS = 2 // 重复登录
	LOGOUTSTATUS_OFFLINE_GM           LOGOUTSTATUS = 3 // GM 离线
)

// Enum value maps for LOGOUTSTATUS.
var (
	LOGOUTSTATUS_name = map[int32]string{
		0: "OFFLINE_NONE",
		1: "OFFLINE_GAME_ERROR",
		2: "OFFLINE_REPEAT_LOGIN",
		3: "OFFLINE_GM",
	}
	LOGOUTSTATUS_value = map[string]int32{
		"OFFLINE_NONE":         0,
		"OFFLINE_GAME_ERROR":   1,
		"OFFLINE_REPEAT_LOGIN": 2,
		"OFFLINE_GM":           3,
	}
)

func (x LOGOUTSTATUS) Enum() *LOGOUTSTATUS {
	p := new(LOGOUTSTATUS)
	*p = x
	return p
}

func (x LOGOUTSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LOGOUTSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[9].Descriptor()
}

func (LOGOUTSTATUS) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[9]
}

func (x LOGOUTSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LOGOUTSTATUS.Descriptor instead.
func (LOGOUTSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{9}
}

type ChallengeStatus int32

const (
	ChallengeStatus_CHALLENGE_UNKNOWN ChallengeStatus = 0
	ChallengeStatus_CHALLENGE_DOING   ChallengeStatus = 1
	ChallengeStatus_CHALLENGE_FINISH  ChallengeStatus = 2
	ChallengeStatus_CHALLENGE_FAILED  ChallengeStatus = 3
)

// Enum value maps for ChallengeStatus.
var (
	ChallengeStatus_name = map[int32]string{
		0: "CHALLENGE_UNKNOWN",
		1: "CHALLENGE_DOING",
		2: "CHALLENGE_FINISH",
		3: "CHALLENGE_FAILED",
	}
	ChallengeStatus_value = map[string]int32{
		"CHALLENGE_UNKNOWN": 0,
		"CHALLENGE_DOING":   1,
		"CHALLENGE_FINISH":  2,
		"CHALLENGE_FAILED":  3,
	}
)

func (x ChallengeStatus) Enum() *ChallengeStatus {
	p := new(ChallengeStatus)
	*p = x
	return p
}

func (x ChallengeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[10].Descriptor()
}

func (ChallengeStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[10]
}

func (x ChallengeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeStatus.Descriptor instead.
func (ChallengeStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{10}
}

type MsgType int32

const (
	MsgType_MSG_TYPE_NONE        MsgType = 0 // 空
	MsgType_MSG_TYPE_CUSTOM_TEXT MsgType = 1 // 文本
	MsgType_MSG_TYPE_EMOJI       MsgType = 2 // 表情
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "MSG_TYPE_NONE",
		1: "MSG_TYPE_CUSTOM_TEXT",
		2: "MSG_TYPE_EMOJI",
	}
	MsgType_value = map[string]int32{
		"MSG_TYPE_NONE":        0,
		"MSG_TYPE_CUSTOM_TEXT": 1,
		"MSG_TYPE_EMOJI":       2,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[11].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[11]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{11}
}

type PlayerMsgType int32

const (
	PlayerMsgType_PMT_NONE         PlayerMsgType = 0 //无
	PlayerMsgType_PMT_APPLYFRIEND  PlayerMsgType = 1 //申请好友
	PlayerMsgType_PMT_CHAT         PlayerMsgType = 2 // 聊天消息
	PlayerMsgType_PMT_ACCEPTFRIEND PlayerMsgType = 3 // 同意/拒绝好友申请
)

// Enum value maps for PlayerMsgType.
var (
	PlayerMsgType_name = map[int32]string{
		0: "PMT_NONE",
		1: "PMT_APPLYFRIEND",
		2: "PMT_CHAT",
		3: "PMT_ACCEPTFRIEND",
	}
	PlayerMsgType_value = map[string]int32{
		"PMT_NONE":         0,
		"PMT_APPLYFRIEND":  1,
		"PMT_CHAT":         2,
		"PMT_ACCEPTFRIEND": 3,
	}
)

func (x PlayerMsgType) Enum() *PlayerMsgType {
	p := new(PlayerMsgType)
	*p = x
	return p
}

func (x PlayerMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[12].Descriptor()
}

func (PlayerMsgType) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[12]
}

func (x PlayerMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerMsgType.Descriptor instead.
func (PlayerMsgType) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{12}
}

type MissionStatus int32

const (
	MissionStatus_MISSION_NONE     MissionStatus = 0
	MissionStatus_MISSION_DOING    MissionStatus = 1
	MissionStatus_MISSION_FINISH   MissionStatus = 2
	MissionStatus_MISSION_PREPARED MissionStatus = 3
)

// Enum value maps for MissionStatus.
var (
	MissionStatus_name = map[int32]string{
		0: "MISSION_NONE",
		1: "MISSION_DOING",
		2: "MISSION_FINISH",
		3: "MISSION_PREPARED",
	}
	MissionStatus_value = map[string]int32{
		"MISSION_NONE":     0,
		"MISSION_DOING":    1,
		"MISSION_FINISH":   2,
		"MISSION_PREPARED": 3,
	}
)

func (x MissionStatus) Enum() *MissionStatus {
	p := new(MissionStatus)
	*p = x
	return p
}

func (x MissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[13].Descriptor()
}

func (MissionStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[13]
}

func (x MissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionStatus.Descriptor instead.
func (MissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{13}
}

type TutorialStatus int32

const (
	TutorialStatus_TUTORIAL_NONE   TutorialStatus = 0
	TutorialStatus_TUTORIAL_UNLOCK TutorialStatus = 1
	TutorialStatus_TUTORIAL_FINISH TutorialStatus = 2
)

// Enum value maps for TutorialStatus.
var (
	TutorialStatus_name = map[int32]string{
		0: "TUTORIAL_NONE",
		1: "TUTORIAL_UNLOCK",
		2: "TUTORIAL_FINISH",
	}
	TutorialStatus_value = map[string]int32{
		"TUTORIAL_NONE":   0,
		"TUTORIAL_UNLOCK": 1,
		"TUTORIAL_FINISH": 2,
	}
)

func (x TutorialStatus) Enum() *TutorialStatus {
	p := new(TutorialStatus)
	*p = x
	return p
}

func (x TutorialStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TutorialStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[14].Descriptor()
}

func (TutorialStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[14]
}

func (x TutorialStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TutorialStatus.Descriptor instead.
func (TutorialStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{14}
}

type MessageGroupStatus int32

const (
	MessageGroupStatus_MESSAGE_GROUP_NONE   MessageGroupStatus = 0
	MessageGroupStatus_MESSAGE_GROUP_DOING  MessageGroupStatus = 1
	MessageGroupStatus_MESSAGE_GROUP_FINISH MessageGroupStatus = 2
	MessageGroupStatus_MESSAGE_GROUP_FROZEN MessageGroupStatus = 3
)

// Enum value maps for MessageGroupStatus.
var (
	MessageGroupStatus_name = map[int32]string{
		0: "MESSAGE_GROUP_NONE",
		1: "MESSAGE_GROUP_DOING",
		2: "MESSAGE_GROUP_FINISH",
		3: "MESSAGE_GROUP_FROZEN",
	}
	MessageGroupStatus_value = map[string]int32{
		"MESSAGE_GROUP_NONE":   0,
		"MESSAGE_GROUP_DOING":  1,
		"MESSAGE_GROUP_FINISH": 2,
		"MESSAGE_GROUP_FROZEN": 3,
	}
)

func (x MessageGroupStatus) Enum() *MessageGroupStatus {
	p := new(MessageGroupStatus)
	*p = x
	return p
}

func (x MessageGroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageGroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[15].Descriptor()
}

func (MessageGroupStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[15]
}

func (x MessageGroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageGroupStatus.Descriptor instead.
func (MessageGroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{15}
}

type MessageSectionStatus int32

const (
	MessageSectionStatus_MESSAGE_SECTION_NONE   MessageSectionStatus = 0
	MessageSectionStatus_MESSAGE_SECTION_DOING  MessageSectionStatus = 1
	MessageSectionStatus_MESSAGE_SECTION_FINISH MessageSectionStatus = 2
	MessageSectionStatus_MESSAGE_SECTION_FROZEN MessageSectionStatus = 3
)

// Enum value maps for MessageSectionStatus.
var (
	MessageSectionStatus_name = map[int32]string{
		0: "MESSAGE_SECTION_NONE",
		1: "MESSAGE_SECTION_DOING",
		2: "MESSAGE_SECTION_FINISH",
		3: "MESSAGE_SECTION_FROZEN",
	}
	MessageSectionStatus_value = map[string]int32{
		"MESSAGE_SECTION_NONE":   0,
		"MESSAGE_SECTION_DOING":  1,
		"MESSAGE_SECTION_FINISH": 2,
		"MESSAGE_SECTION_FROZEN": 3,
	}
)

func (x MessageSectionStatus) Enum() *MessageSectionStatus {
	p := new(MessageSectionStatus)
	*p = x
	return p
}

func (x MessageSectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[16].Descriptor()
}

func (MessageSectionStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[16]
}

func (x MessageSectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSectionStatus.Descriptor instead.
func (MessageSectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{16}
}

type RogueTalentStatus int32

const (
	RogueTalentStatus_ROGUE_TALENT_STATUS_LOCK   RogueTalentStatus = 0
	RogueTalentStatus_ROGUE_TALENT_STATUS_UNLOCK RogueTalentStatus = 1
	RogueTalentStatus_ROGUE_TALENT_STATUS_ENABLE RogueTalentStatus = 2
)

// Enum value maps for RogueTalentStatus.
var (
	RogueTalentStatus_name = map[int32]string{
		0: "ROGUE_TALENT_STATUS_LOCK",
		1: "ROGUE_TALENT_STATUS_UNLOCK",
		2: "ROGUE_TALENT_STATUS_ENABLE",
	}
	RogueTalentStatus_value = map[string]int32{
		"ROGUE_TALENT_STATUS_LOCK":   0,
		"ROGUE_TALENT_STATUS_UNLOCK": 1,
		"ROGUE_TALENT_STATUS_ENABLE": 2,
	}
)

func (x RogueTalentStatus) Enum() *RogueTalentStatus {
	p := new(RogueTalentStatus)
	*p = x
	return p
}

func (x RogueTalentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueTalentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[17].Descriptor()
}

func (RogueTalentStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[17]
}

func (x RogueTalentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueTalentStatus.Descriptor instead.
func (RogueTalentStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{17}
}

type RogueStatus int32

const (
	RogueStatus_ROGUE_STATUS_NONE    RogueStatus = 0
	RogueStatus_ROGUE_STATUS_DOING   RogueStatus = 1
	RogueStatus_ROGUE_STATUS_PENDING RogueStatus = 2
	RogueStatus_ROGUE_STATUS_ENDLESS RogueStatus = 3
	RogueStatus_ROGUE_STATUS_FINISH  RogueStatus = 4
)

// Enum value maps for RogueStatus.
var (
	RogueStatus_name = map[int32]string{
		0: "ROGUE_STATUS_NONE",
		1: "ROGUE_STATUS_DOING",
		2: "ROGUE_STATUS_PENDING",
		3: "ROGUE_STATUS_ENDLESS",
		4: "ROGUE_STATUS_FINISH",
	}
	RogueStatus_value = map[string]int32{
		"ROGUE_STATUS_NONE":    0,
		"ROGUE_STATUS_DOING":   1,
		"ROGUE_STATUS_PENDING": 2,
		"ROGUE_STATUS_ENDLESS": 3,
		"ROGUE_STATUS_FINISH":  4,
	}
)

func (x RogueStatus) Enum() *RogueStatus {
	p := new(RogueStatus)
	*p = x
	return p
}

func (x RogueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[18].Descriptor()
}

func (RogueStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[18]
}

func (x RogueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueStatus.Descriptor instead.
func (RogueStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{18}
}

type RogueTournLayerStatus int32

const (
	RogueTournLayerStatus_ROGUE_TOURN_LAYER_STATUS_NONE       RogueTournLayerStatus = 0
	RogueTournLayerStatus_ROGUE_TOURN_LAYER_STATUS_PROCESSING RogueTournLayerStatus = 1
	RogueTournLayerStatus_ROGUE_TOURN_LAYER_STATUS_FINISH     RogueTournLayerStatus = 2
)

// Enum value maps for RogueTournLayerStatus.
var (
	RogueTournLayerStatus_name = map[int32]string{
		0: "ROGUE_TOURN_LAYER_STATUS_NONE",
		1: "ROGUE_TOURN_LAYER_STATUS_PROCESSING",
		2: "ROGUE_TOURN_LAYER_STATUS_FINISH",
	}
	RogueTournLayerStatus_value = map[string]int32{
		"ROGUE_TOURN_LAYER_STATUS_NONE":       0,
		"ROGUE_TOURN_LAYER_STATUS_PROCESSING": 1,
		"ROGUE_TOURN_LAYER_STATUS_FINISH":     2,
	}
)

func (x RogueTournLayerStatus) Enum() *RogueTournLayerStatus {
	p := new(RogueTournLayerStatus)
	*p = x
	return p
}

func (x RogueTournLayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueTournLayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[19].Descriptor()
}

func (RogueTournLayerStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[19]
}

func (x RogueTournLayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueTournLayerStatus.Descriptor instead.
func (RogueTournLayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{19}
}

type RogueTournRoomStatus int32

const (
	RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_NONE       RogueTournRoomStatus = 0
	RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_INITED     RogueTournRoomStatus = 1
	RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_PROCESSING RogueTournRoomStatus = 2
	RogueTournRoomStatus_ROGUE_TOURN_ROOM_STATUS_FINISH     RogueTournRoomStatus = 3
)

// Enum value maps for RogueTournRoomStatus.
var (
	RogueTournRoomStatus_name = map[int32]string{
		0: "ROGUE_TOURN_ROOM_STATUS_NONE",
		1: "ROGUE_TOURN_ROOM_STATUS_INITED",
		2: "ROGUE_TOURN_ROOM_STATUS_PROCESSING",
		3: "ROGUE_TOURN_ROOM_STATUS_FINISH",
	}
	RogueTournRoomStatus_value = map[string]int32{
		"ROGUE_TOURN_ROOM_STATUS_NONE":       0,
		"ROGUE_TOURN_ROOM_STATUS_INITED":     1,
		"ROGUE_TOURN_ROOM_STATUS_PROCESSING": 2,
		"ROGUE_TOURN_ROOM_STATUS_FINISH":     3,
	}
)

func (x RogueTournRoomStatus) Enum() *RogueTournRoomStatus {
	p := new(RogueTournRoomStatus)
	*p = x
	return p
}

func (x RogueTournRoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueTournRoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[20].Descriptor()
}

func (RogueTournRoomStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[20]
}

func (x RogueTournRoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueTournRoomStatus.Descriptor instead.
func (RogueTournRoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{20}
}

type RogueAreaStatus int32

const (
	RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_LOCK       RogueAreaStatus = 0
	RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_UNLOCK     RogueAreaStatus = 1
	RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_FIRST_PASS RogueAreaStatus = 2
	RogueAreaStatus_RogueAreaStatus_ROGUE_AREA_STATUS_CLOSE      RogueAreaStatus = 3
)

// Enum value maps for RogueAreaStatus.
var (
	RogueAreaStatus_name = map[int32]string{
		0: "RogueAreaStatus_ROGUE_AREA_STATUS_LOCK",
		1: "RogueAreaStatus_ROGUE_AREA_STATUS_UNLOCK",
		2: "RogueAreaStatus_ROGUE_AREA_STATUS_FIRST_PASS",
		3: "RogueAreaStatus_ROGUE_AREA_STATUS_CLOSE",
	}
	RogueAreaStatus_value = map[string]int32{
		"RogueAreaStatus_ROGUE_AREA_STATUS_LOCK":       0,
		"RogueAreaStatus_ROGUE_AREA_STATUS_UNLOCK":     1,
		"RogueAreaStatus_ROGUE_AREA_STATUS_FIRST_PASS": 2,
		"RogueAreaStatus_ROGUE_AREA_STATUS_CLOSE":      3,
	}
)

func (x RogueAreaStatus) Enum() *RogueAreaStatus {
	p := new(RogueAreaStatus)
	*p = x
	return p
}

func (x RogueAreaStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RogueAreaStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[21].Descriptor()
}

func (RogueAreaStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[21]
}

func (x RogueAreaStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RogueAreaStatus.Descriptor instead.
func (RogueAreaStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{21}
}

type RoomStatus int32

const (
	RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_NONE   RoomStatus = 0
	RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_LOCK   RoomStatus = 1
	RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_UNLOCK RoomStatus = 2
	RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_PLAY   RoomStatus = 3
	RoomStatus_RogueRoomStatus_ROGUE_ROOM_STATUS_FINISH RoomStatus = 4
)

// Enum value maps for RoomStatus.
var (
	RoomStatus_name = map[int32]string{
		0: "RogueRoomStatus_ROGUE_ROOM_STATUS_NONE",
		1: "RogueRoomStatus_ROGUE_ROOM_STATUS_LOCK",
		2: "RogueRoomStatus_ROGUE_ROOM_STATUS_UNLOCK",
		3: "RogueRoomStatus_ROGUE_ROOM_STATUS_PLAY",
		4: "RogueRoomStatus_ROGUE_ROOM_STATUS_FINISH",
	}
	RoomStatus_value = map[string]int32{
		"RogueRoomStatus_ROGUE_ROOM_STATUS_NONE":   0,
		"RogueRoomStatus_ROGUE_ROOM_STATUS_LOCK":   1,
		"RogueRoomStatus_ROGUE_ROOM_STATUS_UNLOCK": 2,
		"RogueRoomStatus_ROGUE_ROOM_STATUS_PLAY":   3,
		"RogueRoomStatus_ROGUE_ROOM_STATUS_FINISH": 4,
	}
)

func (x RoomStatus) Enum() *RoomStatus {
	p := new(RoomStatus)
	*p = x
	return p
}

func (x RoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[22].Descriptor()
}

func (RoomStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[22]
}

func (x RoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStatus.Descriptor instead.
func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{22}
}

type RaidStatus int32

const (
	RaidStatus_RAID_STATUS_NONE   RaidStatus = 0
	RaidStatus_RAID_STATUS_DOING  RaidStatus = 1
	RaidStatus_RAID_STATUS_FINISH RaidStatus = 2
	RaidStatus_RAID_STATUS_FAILED RaidStatus = 3
)

// Enum value maps for RaidStatus.
var (
	RaidStatus_name = map[int32]string{
		0: "RAID_STATUS_NONE",
		1: "RAID_STATUS_DOING",
		2: "RAID_STATUS_FINISH",
		3: "RAID_STATUS_FAILED",
	}
	RaidStatus_value = map[string]int32{
		"RAID_STATUS_NONE":   0,
		"RAID_STATUS_DOING":  1,
		"RAID_STATUS_FINISH": 2,
		"RAID_STATUS_FAILED": 3,
	}
)

func (x RaidStatus) Enum() *RaidStatus {
	p := new(RaidStatus)
	*p = x
	return p
}

func (x RaidStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaidStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[23].Descriptor()
}

func (RaidStatus) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[23]
}

func (x RaidStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaidStatus.Descriptor instead.
func (RaidStatus) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{23}
}

type Retcode int32

const (
	Retcode_RET_SUCC                     Retcode = 0  // 成功
	Retcode_RET_FAIL                     Retcode = 1  // 失败
	Retcode_RET_PLAYER_DATA_ERROR        Retcode = 2  // 玩家数据损坏
	Retcode_RET_NODE_ERR                 Retcode = 3  // node意外离线
	Retcode_RET_PLAYER_ID_ERR            Retcode = 4  // 玩家id缺失
	Retcode_RET_PLAYER_TIMEOUT           Retcode = 5  //玩家超时
	Retcode_RET_PLAYER_LOGOUT            Retcode = 6  // 玩家离线
	Retcode_RET_PLAYER_REPEAT_LOGIN      Retcode = 7  //重复登录
	Retcode_RET_PLAYER_GATE_REPEAT_LOGIN Retcode = 8  //同网关重复登录
	Retcode_RET_PLAYER_GAME_LOGIN        Retcode = 9  //game告知需要离线
	Retcode_RET_PLAYER_SYSTEM_ERROR      Retcode = 10 //内部服务异常离线（不就是gate或者game玩家线程崩坏了
)

// Enum value maps for Retcode.
var (
	Retcode_name = map[int32]string{
		0:  "RET_SUCC",
		1:  "RET_FAIL",
		2:  "RET_PLAYER_DATA_ERROR",
		3:  "RET_NODE_ERR",
		4:  "RET_PLAYER_ID_ERR",
		5:  "RET_PLAYER_TIMEOUT",
		6:  "RET_PLAYER_LOGOUT",
		7:  "RET_PLAYER_REPEAT_LOGIN",
		8:  "RET_PLAYER_GATE_REPEAT_LOGIN",
		9:  "RET_PLAYER_GAME_LOGIN",
		10: "RET_PLAYER_SYSTEM_ERROR",
	}
	Retcode_value = map[string]int32{
		"RET_SUCC":                     0,
		"RET_FAIL":                     1,
		"RET_PLAYER_DATA_ERROR":        2,
		"RET_NODE_ERR":                 3,
		"RET_PLAYER_ID_ERR":            4,
		"RET_PLAYER_TIMEOUT":           5,
		"RET_PLAYER_LOGOUT":            6,
		"RET_PLAYER_REPEAT_LOGIN":      7,
		"RET_PLAYER_GATE_REPEAT_LOGIN": 8,
		"RET_PLAYER_GAME_LOGIN":        9,
		"RET_PLAYER_SYSTEM_ERROR":      10,
	}
)

func (x Retcode) Enum() *Retcode {
	p := new(Retcode)
	*p = x
	return p
}

func (x Retcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Retcode) Descriptor() protoreflect.EnumDescriptor {
	return file_enum_server_proto_enumTypes[24].Descriptor()
}

func (Retcode) Type() protoreflect.EnumType {
	return &file_enum_server_proto_enumTypes[24]
}

func (x Retcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Retcode.Descriptor instead.
func (Retcode) EnumDescriptor() ([]byte, []int) {
	return file_enum_server_proto_rawDescGZIP(), []int{24}
}

var File_enum_server_proto protoreflect.FileDescriptor

var file_enum_server_proto_rawDesc = []byte{
	0x0a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x38, 0x0a, 0x06, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x6f, 0x6d,
	0x61, 0x6e, 0x10, 0x02, 0x2a, 0xfe, 0x01, 0x0a, 0x0d, 0x48, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x6f, 0x79, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0xc1,
	0x3e, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x69, 0x72, 0x6c, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72,
	0x10, 0xc2, 0x3e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x6f, 0x79, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x10, 0xc3, 0x3e, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x69, 0x72, 0x6c, 0x4b, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x10, 0xc4, 0x3e, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x6f, 0x79, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x10, 0xc5, 0x3e, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x69, 0x72, 0x6c, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x10, 0xc6, 0x3e, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x6f, 0x79, 0x4d, 0x61, 0x67, 0x65, 0x10, 0xc7,
	0x3e, 0x12, 0x0d, 0x0a, 0x08, 0x47, 0x69, 0x72, 0x6c, 0x4d, 0x61, 0x67, 0x65, 0x10, 0xc8, 0x3e,
	0x12, 0x0e, 0x0a, 0x09, 0x42, 0x6f, 0x79, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x10, 0xc9, 0x3e,
	0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x69, 0x72, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x10, 0xca,
	0x3e, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x6f, 0x79, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x10,
	0xcb, 0x3e, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x69, 0x72, 0x6c, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0xcc, 0x3e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x6f, 0x79, 0x50, 0x72, 0x69, 0x65, 0x73,
	0x74, 0x10, 0xcd, 0x3e, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x69, 0x72, 0x6c, 0x50, 0x72, 0x69, 0x65,
	0x73, 0x74, 0x10, 0xce, 0x3e, 0x2a, 0xc2, 0x01, 0x0a, 0x0a, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x56,
	0x41, 0x54, 0x41, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x56, 0x41, 0x54,
	0x41, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x56, 0x41, 0x54,
	0x41, 0x52, 0x5f, 0x41, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x56, 0x41, 0x54, 0x41,
	0x52, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x2a, 0xed, 0x02, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x55,
	0x50, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x32, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x33, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x4e, 0x45, 0x55,
	0x50, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45,
	0x55, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x44, 0x55, 0x4e, 0x47, 0x45, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f,
	0x48, 0x45, 0x4c, 0x49, 0x4f, 0x42, 0x55, 0x53, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49,
	0x4e, 0x45, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x4c,
	0x49, 0x43, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x10, 0x0f, 0x2a, 0xc8, 0x01, 0x0a, 0x0a, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x51, 0x55, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55,
	0x52, 0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x10, 0x07, 0x2a, 0xfe, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x54,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x55, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x48, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x56, 0x49, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x2a, 0xae, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41,
	0x50, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x34, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x4f, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x43, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53,
	0x35, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x49, 0x4f, 0x53, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x50, 0x43, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x10, 0x18, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4b, 0x45, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x19, 0x2a, 0x8f, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x55, 0x49, 0x50, 0x10, 0x06, 0x2a, 0x98, 0x01, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x72, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x10, 0x04, 0x2a, 0x62, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x47, 0x4d, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x02, 0x2a,
	0x56, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4d, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x4d, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4d, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4d, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x5e, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4d, 0x0a, 0x0e, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x79, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10,
	0x03, 0x2a, 0x83, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x89, 0x01, 0x0a, 0x0b, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x47,
	0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x2a, 0x88, 0x01, 0x0a, 0x15, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55,
	0x52, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10,
	0x02, 0x2a, 0xa8, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a,
	0x0f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xec, 0x01, 0x0a, 0x0a, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x2a, 0x69, 0x0a, 0x0a, 0x52, 0x61, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x8f, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x54, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x54, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0a, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enum_server_proto_rawDescOnce sync.Once
	file_enum_server_proto_rawDescData = file_enum_server_proto_rawDesc
)

func file_enum_server_proto_rawDescGZIP() []byte {
	file_enum_server_proto_rawDescOnce.Do(func() {
		file_enum_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_enum_server_proto_rawDescData)
	})
	return file_enum_server_proto_rawDescData
}

var file_enum_server_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_enum_server_proto_goTypes = []any{
	(Gender)(0),                // 0: proto.Gender
	(HeroBasicType)(0),         // 1: proto.HeroBasicType
	(AvatarType)(0),            // 2: proto.AvatarType
	(ExtraLineupType)(0),       // 3: proto.ExtraLineupType
	(BattleType)(0),            // 4: proto.BattleType
	(LanguageType)(0),          // 5: proto.LanguageType
	(PlatformType)(0),          // 6: proto.PlatformType
	(ServerType)(0),            // 7: proto.ServerType
	(PlayerStatus)(0),          // 8: proto.PlayerStatus
	(LOGOUTSTATUS)(0),          // 9: proto.LOGOUTSTATUS
	(ChallengeStatus)(0),       // 10: proto.ChallengeStatus
	(MsgType)(0),               // 11: proto.MsgType
	(PlayerMsgType)(0),         // 12: proto.PlayerMsgType
	(MissionStatus)(0),         // 13: proto.MissionStatus
	(TutorialStatus)(0),        // 14: proto.TutorialStatus
	(MessageGroupStatus)(0),    // 15: proto.MessageGroupStatus
	(MessageSectionStatus)(0),  // 16: proto.MessageSectionStatus
	(RogueTalentStatus)(0),     // 17: proto.RogueTalentStatus
	(RogueStatus)(0),           // 18: proto.RogueStatus
	(RogueTournLayerStatus)(0), // 19: proto.RogueTournLayerStatus
	(RogueTournRoomStatus)(0),  // 20: proto.RogueTournRoomStatus
	(RogueAreaStatus)(0),       // 21: proto.RogueAreaStatus
	(RoomStatus)(0),            // 22: proto.RoomStatus
	(RaidStatus)(0),            // 23: proto.RaidStatus
	(Retcode)(0),               // 24: proto.Retcode
}
var file_enum_server_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enum_server_proto_init() }
func file_enum_server_proto_init() {
	if File_enum_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enum_server_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enum_server_proto_goTypes,
		DependencyIndexes: file_enum_server_proto_depIdxs,
		EnumInfos:         file_enum_server_proto_enumTypes,
	}.Build()
	File_enum_server_proto = out.File
	file_enum_server_proto_rawDesc = nil
	file_enum_server_proto_goTypes = nil
	file_enum_server_proto_depIdxs = nil
}
