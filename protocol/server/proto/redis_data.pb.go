// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: redis_data.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerStatusType int32

const (
	PlayerStatusType_PLAYER_STATUS_OFFLINE PlayerStatusType = 0
	PlayerStatusType_PLAYER_STATUS_ONLINE  PlayerStatusType = 1
)

// Enum value maps for PlayerStatusType.
var (
	PlayerStatusType_name = map[int32]string{
		0: "PLAYER_STATUS_OFFLINE",
		1: "PLAYER_STATUS_ONLINE",
	}
	PlayerStatusType_value = map[string]int32{
		"PLAYER_STATUS_OFFLINE": 0,
		"PLAYER_STATUS_ONLINE":  1,
	}
)

func (x PlayerStatusType) Enum() *PlayerStatusType {
	p := new(PlayerStatusType)
	*p = x
	return p
}

func (x PlayerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_redis_data_proto_enumTypes[0].Descriptor()
}

func (PlayerStatusType) Type() protoreflect.EnumType {
	return &file_redis_data_proto_enumTypes[0]
}

func (x PlayerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatusType.Descriptor instead.
func (PlayerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{0}
}

type MailRedisData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MailBin         *MailBin               `protobuf:"bytes,1,opt,name=mail_bin,json=mailBin,proto3" json:"mail_bin,omitempty"`                            // 邮件内容
	Id              uint32                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                                    // id
	IsRead          bool                   `protobuf:"varint,3,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`                              // 已读
	IsAttachmentGot bool                   `protobuf:"varint,4,opt,name=is_attachment_got,json=isAttachmentGot,proto3" json:"is_attachment_got,omitempty"` // 附件
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MailRedisData) Reset() {
	*x = MailRedisData{}
	mi := &file_redis_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailRedisData) ProtoMessage() {}

func (x *MailRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailRedisData.ProtoReflect.Descriptor instead.
func (*MailRedisData) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{0}
}

func (x *MailRedisData) GetMailBin() *MailBin {
	if x != nil {
		return x.MailBin
	}
	return nil
}

func (x *MailRedisData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MailRedisData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *MailRedisData) GetIsAttachmentGot() bool {
	if x != nil {
		return x.IsAttachmentGot
	}
	return false
}

type MailBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                          // 标题
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                      // 内容
	Sender        string                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`                                        // 发件人
	ItemParamList []*ItemParamBin        `protobuf:"bytes,4,rep,name=item_param_list,json=itemParamList,proto3" json:"item_param_list,omitempty"`   // 物品列表
	SendTime      uint32                 `protobuf:"fixed32,5,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`                  // 发送时间
	ExpireTime    uint32                 `protobuf:"fixed32,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`            // 过期时间
	Importance    uint32                 `protobuf:"varint,7,opt,name=importance,proto3" json:"importance,omitempty"`                               // 重要性
	ConfigId      uint32                 `protobuf:"varint,8,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`                   // 配置id
	ArgumentList  []string               `protobuf:"bytes,9,rep,name=argument_list,json=argumentList,proto3" json:"argument_list,omitempty"`        // 参数列表
	ItemLimitType uint32                 `protobuf:"varint,10,opt,name=item_limit_type,json=itemLimitType,proto3" json:"item_limit_type,omitempty"` // 限制类型
	SourceType    uint32                 `protobuf:"varint,11,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`            // 源类型
	Tag           string                 `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`                                             // 标签
	ReasonType    uint32                 `protobuf:"varint,13,opt,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"`            // 原因类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MailBin) Reset() {
	*x = MailBin{}
	mi := &file_redis_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailBin) ProtoMessage() {}

func (x *MailBin) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailBin.ProtoReflect.Descriptor instead.
func (*MailBin) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{1}
}

func (x *MailBin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailBin) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailBin) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MailBin) GetItemParamList() []*ItemParamBin {
	if x != nil {
		return x.ItemParamList
	}
	return nil
}

func (x *MailBin) GetSendTime() uint32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MailBin) GetExpireTime() uint32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MailBin) GetImportance() uint32 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *MailBin) GetConfigId() uint32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *MailBin) GetArgumentList() []string {
	if x != nil {
		return x.ArgumentList
	}
	return nil
}

func (x *MailBin) GetItemLimitType() uint32 {
	if x != nil {
		return x.ItemLimitType
	}
	return 0
}

func (x *MailBin) GetSourceType() uint32 {
	if x != nil {
		return x.SourceType
	}
	return 0
}

func (x *MailBin) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *MailBin) GetReasonType() uint32 {
	if x != nil {
		return x.ReasonType
	}
	return 0
}

type ItemParamBin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        uint32                 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                   // 物品id
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                                   // 数量
	Level         uint32                 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`                                   // 等级
	PromoteLevel  uint32                 `protobuf:"varint,4,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"` // 突破等级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemParamBin) Reset() {
	*x = ItemParamBin{}
	mi := &file_redis_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemParamBin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemParamBin) ProtoMessage() {}

func (x *ItemParamBin) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemParamBin.ProtoReflect.Descriptor instead.
func (*ItemParamBin) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{2}
}

func (x *ItemParamBin) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemParamBin) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ItemParamBin) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ItemParamBin) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

type PlayerStatusRedisData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        PlayerStatusType       `protobuf:"varint,1,opt,name=status,proto3,enum=proto.PlayerStatusType" json:"status,omitempty"` // 玩家状态
	GateAppId     uint32                 `protobuf:"varint,2,opt,name=gate_app_id,json=gateAppId,proto3" json:"gate_app_id,omitempty"`
	GameAppId     uint32                 `protobuf:"varint,3,opt,name=game_app_id,json=gameAppId,proto3" json:"game_app_id,omitempty"`
	LoginRand     uint64                 `protobuf:"varint,4,opt,name=login_rand,json=loginRand,proto3" json:"login_rand,omitempty"`       // 随机种子
	LoginTime     int64                  `protobuf:"varint,5,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`       // 登录时间
	Uid           uint32                 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`                                    // uid
	DataVersion   uint32                 `protobuf:"varint,7,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` // 数据版本
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusRedisData) Reset() {
	*x = PlayerStatusRedisData{}
	mi := &file_redis_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRedisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRedisData) ProtoMessage() {}

func (x *PlayerStatusRedisData) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRedisData.ProtoReflect.Descriptor instead.
func (*PlayerStatusRedisData) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusRedisData) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PLAYER_STATUS_OFFLINE
}

func (x *PlayerStatusRedisData) GetGateAppId() uint32 {
	if x != nil {
		return x.GateAppId
	}
	return 0
}

func (x *PlayerStatusRedisData) GetGameAppId() uint32 {
	if x != nil {
		return x.GameAppId
	}
	return 0
}

func (x *PlayerStatusRedisData) GetLoginRand() uint64 {
	if x != nil {
		return x.LoginRand
	}
	return 0
}

func (x *PlayerStatusRedisData) GetLoginTime() int64 {
	if x != nil {
		return x.LoginTime
	}
	return 0
}

func (x *PlayerStatusRedisData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerStatusRedisData) GetDataVersion() uint32 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

type RedisMessageData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatRoomId    uint64                 `protobuf:"varint,1,opt,name=chat_room_id,json=chatRoomId,proto3" json:"chat_room_id,omitempty"` // 房间号
	ChatList      []*Message             `protobuf:"bytes,2,rep,name=chat_list,json=chatList,proto3" json:"chat_list,omitempty"`          // 消息队列
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisMessageData) Reset() {
	*x = RedisMessageData{}
	mi := &file_redis_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisMessageData) ProtoMessage() {}

func (x *RedisMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisMessageData.ProtoReflect.Descriptor instead.
func (*RedisMessageData) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{4}
}

func (x *RedisMessageData) GetChatRoomId() uint64 {
	if x != nil {
		return x.ChatRoomId
	}
	return 0
}

func (x *RedisMessageData) GetChatList() []*Message {
	if x != nil {
		return x.ChatList
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SendTime      uint64                 `protobuf:"varint,1,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`                 // 发送时间
	ToUid         uint32                 `protobuf:"varint,2,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`                          // 目标uid
	FromUid       uint32                 `protobuf:"varint,3,opt,name=from_uid,json=fromUid,proto3" json:"from_uid,omitempty"`                    // 发送者uid
	MsgType       MsgType                `protobuf:"varint,4,opt,name=msg_type,json=msgType,proto3,enum=proto.MsgType" json:"msg_type,omitempty"` // 消息类型
	Text          string                 `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                          // 文本消息内容
	Emote         uint32                 `protobuf:"varint,6,opt,name=emote,proto3" json:"emote,omitempty"`                                       // 表情消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_redis_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{5}
}

func (x *Message) GetSendTime() uint64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *Message) GetToUid() uint32 {
	if x != nil {
		return x.ToUid
	}
	return 0
}

func (x *Message) GetFromUid() uint32 {
	if x != nil {
		return x.FromUid
	}
	return 0
}

func (x *Message) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_MSG_TYPE_NONE
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetEmote() uint32 {
	if x != nil {
		return x.Emote
	}
	return 0
}

type PlayerBasicBriefData struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	Nickname          string                   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                                                                                          // 昵称
	Level             uint32                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                                                                                               // 等级
	WorldLevel        uint32                   `protobuf:"varint,3,opt,name=world_level,json=worldLevel,proto3" json:"world_level,omitempty"`                                                                                                   // 世界等级
	LastLoginTime     int64                    `protobuf:"varint,4,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                                                                                        // 上一次登录时间
	HeadImageAvatarId uint32                   `protobuf:"varint,5,opt,name=head_image_avatar_id,json=headImageAvatarId,proto3" json:"head_image_avatar_id,omitempty"`                                                                          // 头像id
	Exp               uint32                   `protobuf:"varint,6,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                                                                   // 经验
	PlatformType      PlatformType             `protobuf:"varint,7,opt,name=platform_type,json=platformType,proto3,enum=proto.PlatformType" json:"platform_type,omitempty"`                                                                     // 登录设备
	Uid               uint32                   `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                                   // 游戏uid
	Status            PlayerStatusType         `protobuf:"varint,9,opt,name=status,proto3,enum=proto.PlayerStatusType" json:"status,omitempty"`                                                                                                 // 玩家状态
	Signature         string                   `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`                                                                                                                       // 签名
	AssistAvatarList  map[uint32]*AssistAvatar `protobuf:"bytes,11,rep,name=assist_avatar_list,json=assistAvatarList,proto3" json:"assist_avatar_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`    // 展示角色
	DisplayAvatarList map[uint32]*AssistAvatar `protobuf:"bytes,12,rep,name=display_avatar_list,json=displayAvatarList,proto3" json:"display_avatar_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 支援角色
	ChatBubbleId      uint32                   `protobuf:"varint,13,opt,name=chat_bubble_id,json=chatBubbleId,proto3" json:"chat_bubble_id,omitempty"`                                                                                          //聊天主题
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PlayerBasicBriefData) Reset() {
	*x = PlayerBasicBriefData{}
	mi := &file_redis_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBasicBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBasicBriefData) ProtoMessage() {}

func (x *PlayerBasicBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBasicBriefData.ProtoReflect.Descriptor instead.
func (*PlayerBasicBriefData) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerBasicBriefData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBasicBriefData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerBasicBriefData) GetWorldLevel() uint32 {
	if x != nil {
		return x.WorldLevel
	}
	return 0
}

func (x *PlayerBasicBriefData) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerBasicBriefData) GetHeadImageAvatarId() uint32 {
	if x != nil {
		return x.HeadImageAvatarId
	}
	return 0
}

func (x *PlayerBasicBriefData) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerBasicBriefData) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_EDITOR
}

func (x *PlayerBasicBriefData) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerBasicBriefData) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PLAYER_STATUS_OFFLINE
}

func (x *PlayerBasicBriefData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PlayerBasicBriefData) GetAssistAvatarList() map[uint32]*AssistAvatar {
	if x != nil {
		return x.AssistAvatarList
	}
	return nil
}

func (x *PlayerBasicBriefData) GetDisplayAvatarList() map[uint32]*AssistAvatar {
	if x != nil {
		return x.DisplayAvatarList
	}
	return nil
}

func (x *PlayerBasicBriefData) GetChatBubbleId() uint32 {
	if x != nil {
		return x.ChatBubbleId
	}
	return 0
}

type AssistAvatar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AvatarId      uint32                 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"` // ID
	Rank          uint32                 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Level         uint32                 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"` // 等级
	Exp           uint32                 `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	PromoteLevel  uint32                 `protobuf:"varint,5,opt,name=promote_level,json=promoteLevel,proto3" json:"promote_level,omitempty"`                                                                     // 突破等级
	Equipment     *Equipment             `protobuf:"bytes,6,opt,name=equipment,proto3" json:"equipment,omitempty"`                                                                                                // 装备光锥
	EquipRelic    map[uint32]*Relic      `protobuf:"bytes,7,rep,name=equip_relic,json=equipRelic,proto3" json:"equip_relic,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 装备圣遗物
	SkilltreeList []*AvatarSkillBin      `protobuf:"bytes,8,rep,name=skilltree_list,json=skilltreeList,proto3" json:"skilltree_list,omitempty"`                                                                   // 技能库
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssistAvatar) Reset() {
	*x = AssistAvatar{}
	mi := &file_redis_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssistAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistAvatar) ProtoMessage() {}

func (x *AssistAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistAvatar.ProtoReflect.Descriptor instead.
func (*AssistAvatar) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{7}
}

func (x *AssistAvatar) GetAvatarId() uint32 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *AssistAvatar) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AssistAvatar) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AssistAvatar) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AssistAvatar) GetPromoteLevel() uint32 {
	if x != nil {
		return x.PromoteLevel
	}
	return 0
}

func (x *AssistAvatar) GetEquipment() *Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *AssistAvatar) GetEquipRelic() map[uint32]*Relic {
	if x != nil {
		return x.EquipRelic
	}
	return nil
}

func (x *AssistAvatar) GetSkilltreeList() []*AvatarSkillBin {
	if x != nil {
		return x.SkilltreeList
	}
	return nil
}

type ApplyFriend struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	Uid             uint32                   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                            // 玩家
	RecvApplyFriend map[uint32]*ReceiveApply `protobuf:"bytes,3,rep,name=recv_apply_friend,json=recvApplyFriend,proto3" json:"recv_apply_friend,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 接收到的好友申请
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ApplyFriend) Reset() {
	*x = ApplyFriend{}
	mi := &file_redis_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFriend) ProtoMessage() {}

func (x *ApplyFriend) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFriend.ProtoReflect.Descriptor instead.
func (*ApplyFriend) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{8}
}

func (x *ApplyFriend) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ApplyFriend) GetRecvApplyFriend() map[uint32]*ReceiveApply {
	if x != nil {
		return x.RecvApplyFriend
	}
	return nil
}

type ReceiveApply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApplyUid      uint32                 `protobuf:"varint,1,opt,name=apply_uid,json=applyUid,proto3" json:"apply_uid,omitempty"`    // 申请uid
	ApplyTime     int64                  `protobuf:"varint,2,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"` // 申请时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiveApply) Reset() {
	*x = ReceiveApply{}
	mi := &file_redis_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveApply) ProtoMessage() {}

func (x *ReceiveApply) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveApply.ProtoReflect.Descriptor instead.
func (*ReceiveApply) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{9}
}

func (x *ReceiveApply) GetApplyUid() uint32 {
	if x != nil {
		return x.ApplyUid
	}
	return 0
}

func (x *ReceiveApply) GetApplyTime() int64 {
	if x != nil {
		return x.ApplyTime
	}
	return 0
}

type AcceptApplyFriend struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	Uid             uint32                   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                                                                            // 玩家
	RecvApplyFriend map[uint32]*ReceiveApply `protobuf:"bytes,3,rep,name=recv_apply_friend,json=recvApplyFriend,proto3" json:"recv_apply_friend,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 被同意的好友申请
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AcceptApplyFriend) Reset() {
	*x = AcceptApplyFriend{}
	mi := &file_redis_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptApplyFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptApplyFriend) ProtoMessage() {}

func (x *AcceptApplyFriend) ProtoReflect() protoreflect.Message {
	mi := &file_redis_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptApplyFriend.ProtoReflect.Descriptor instead.
func (*AcceptApplyFriend) Descriptor() ([]byte, []int) {
	return file_redis_data_proto_rawDescGZIP(), []int{10}
}

func (x *AcceptApplyFriend) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AcceptApplyFriend) GetRecvApplyFriend() map[uint32]*ReceiveApply {
	if x != nil {
		return x.RecvApplyFriend
	}
	return nil
}

var File_redis_data_proto protoreflect.FileDescriptor

var file_redis_data_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x62, 0x69,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f,
	0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x42,
	0x69, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x74,
	0x22, 0xaa, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x69, 0x6e, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x8f, 0x06, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x38, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x58, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x59, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x52, 0x0d,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x4b, 0x0a,
	0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x11,
	0x72, 0x65, 0x63, 0x76, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x76,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x1a, 0x57, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x76, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x59,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x76, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x1a, 0x57, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x76, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x47, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redis_data_proto_rawDescOnce sync.Once
	file_redis_data_proto_rawDescData = file_redis_data_proto_rawDesc
)

func file_redis_data_proto_rawDescGZIP() []byte {
	file_redis_data_proto_rawDescOnce.Do(func() {
		file_redis_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_redis_data_proto_rawDescData)
	})
	return file_redis_data_proto_rawDescData
}

var file_redis_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redis_data_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_redis_data_proto_goTypes = []any{
	(PlayerStatusType)(0),         // 0: proto.PlayerStatusType
	(*MailRedisData)(nil),         // 1: proto.MailRedisData
	(*MailBin)(nil),               // 2: proto.MailBin
	(*ItemParamBin)(nil),          // 3: proto.ItemParamBin
	(*PlayerStatusRedisData)(nil), // 4: proto.PlayerStatusRedisData
	(*RedisMessageData)(nil),      // 5: proto.RedisMessageData
	(*Message)(nil),               // 6: proto.Message
	(*PlayerBasicBriefData)(nil),  // 7: proto.PlayerBasicBriefData
	(*AssistAvatar)(nil),          // 8: proto.AssistAvatar
	(*ApplyFriend)(nil),           // 9: proto.ApplyFriend
	(*ReceiveApply)(nil),          // 10: proto.ReceiveApply
	(*AcceptApplyFriend)(nil),     // 11: proto.AcceptApplyFriend
	nil,                           // 12: proto.PlayerBasicBriefData.AssistAvatarListEntry
	nil,                           // 13: proto.PlayerBasicBriefData.DisplayAvatarListEntry
	nil,                           // 14: proto.AssistAvatar.EquipRelicEntry
	nil,                           // 15: proto.ApplyFriend.RecvApplyFriendEntry
	nil,                           // 16: proto.AcceptApplyFriend.RecvApplyFriendEntry
	(MsgType)(0),                  // 17: proto.MsgType
	(PlatformType)(0),             // 18: proto.PlatformType
	(*Equipment)(nil),             // 19: proto.Equipment
	(*AvatarSkillBin)(nil),        // 20: proto.AvatarSkillBin
	(*Relic)(nil),                 // 21: proto.Relic
}
var file_redis_data_proto_depIdxs = []int32{
	2,  // 0: proto.MailRedisData.mail_bin:type_name -> proto.MailBin
	3,  // 1: proto.MailBin.item_param_list:type_name -> proto.ItemParamBin
	0,  // 2: proto.PlayerStatusRedisData.status:type_name -> proto.PlayerStatusType
	6,  // 3: proto.RedisMessageData.chat_list:type_name -> proto.Message
	17, // 4: proto.Message.msg_type:type_name -> proto.MsgType
	18, // 5: proto.PlayerBasicBriefData.platform_type:type_name -> proto.PlatformType
	0,  // 6: proto.PlayerBasicBriefData.status:type_name -> proto.PlayerStatusType
	12, // 7: proto.PlayerBasicBriefData.assist_avatar_list:type_name -> proto.PlayerBasicBriefData.AssistAvatarListEntry
	13, // 8: proto.PlayerBasicBriefData.display_avatar_list:type_name -> proto.PlayerBasicBriefData.DisplayAvatarListEntry
	19, // 9: proto.AssistAvatar.equipment:type_name -> proto.Equipment
	14, // 10: proto.AssistAvatar.equip_relic:type_name -> proto.AssistAvatar.EquipRelicEntry
	20, // 11: proto.AssistAvatar.skilltree_list:type_name -> proto.AvatarSkillBin
	15, // 12: proto.ApplyFriend.recv_apply_friend:type_name -> proto.ApplyFriend.RecvApplyFriendEntry
	16, // 13: proto.AcceptApplyFriend.recv_apply_friend:type_name -> proto.AcceptApplyFriend.RecvApplyFriendEntry
	8,  // 14: proto.PlayerBasicBriefData.AssistAvatarListEntry.value:type_name -> proto.AssistAvatar
	8,  // 15: proto.PlayerBasicBriefData.DisplayAvatarListEntry.value:type_name -> proto.AssistAvatar
	21, // 16: proto.AssistAvatar.EquipRelicEntry.value:type_name -> proto.Relic
	10, // 17: proto.ApplyFriend.RecvApplyFriendEntry.value:type_name -> proto.ReceiveApply
	10, // 18: proto.AcceptApplyFriend.RecvApplyFriendEntry.value:type_name -> proto.ReceiveApply
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_redis_data_proto_init() }
func file_redis_data_proto_init() {
	if File_redis_data_proto != nil {
		return
	}
	file_enum_server_proto_init()
	file_bin_server_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redis_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redis_data_proto_goTypes,
		DependencyIndexes: file_redis_data_proto_depIdxs,
		EnumInfos:         file_redis_data_proto_enumTypes,
		MessageInfos:      file_redis_data_proto_msgTypes,
	}.Build()
	File_redis_data_proto = out.File
	file_redis_data_proto_rawDesc = nil
	file_redis_data_proto_goTypes = nil
	file_redis_data_proto_depIdxs = nil
}
