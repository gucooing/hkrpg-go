// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueCell.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsUnlocked  bool                      `protobuf:"varint,8,opt,name=is_unlocked,json=isUnlocked,proto3" json:"is_unlocked,omitempty"`
	MarkType    uint32                    `protobuf:"varint,13,opt,name=mark_type,json=markType,proto3" json:"mark_type,omitempty"`
	SpecialType ChessRogueCellSpecialType `protobuf:"varint,12,opt,name=special_type,json=specialType,proto3,enum=ChessRogueCellSpecialType" json:"special_type,omitempty"`
	IFEHGGKMHCA []uint32                  `protobuf:"varint,4,rep,packed,name=IFEHGGKMHCA,proto3" json:"IFEHGGKMHCA,omitempty"`
	PosY        uint32                    `protobuf:"varint,14,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	PosX        uint32                    `protobuf:"varint,15,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	StageInfo   *CellAdvanceInfo          `protobuf:"bytes,2,opt,name=stage_info,json=stageInfo,proto3" json:"stage_info,omitempty"`
	BlockType   uint32                    `protobuf:"varint,7,opt,name=block_type,json=blockType,proto3" json:"block_type,omitempty"`
	Id          uint32                    `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	RoomId      uint32                    `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	CellStatus  ChessRogueBoardCellStatus `protobuf:"varint,1,opt,name=cell_status,json=cellStatus,proto3,enum=ChessRogueBoardCellStatus" json:"cell_status,omitempty"`
	IsUnlock    bool                      `protobuf:"varint,10,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (x *ChessRogueCell) Reset() {
	*x = ChessRogueCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueCell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueCell) ProtoMessage() {}

func (x *ChessRogueCell) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueCell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueCell.ProtoReflect.Descriptor instead.
func (*ChessRogueCell) Descriptor() ([]byte, []int) {
	return file_ChessRogueCell_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueCell) GetIsUnlocked() bool {
	if x != nil {
		return x.IsUnlocked
	}
	return false
}

func (x *ChessRogueCell) GetMarkType() uint32 {
	if x != nil {
		return x.MarkType
	}
	return 0
}

func (x *ChessRogueCell) GetSpecialType() ChessRogueCellSpecialType {
	if x != nil {
		return x.SpecialType
	}
	return ChessRogueCellSpecialType_CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE
}

func (x *ChessRogueCell) GetIFEHGGKMHCA() []uint32 {
	if x != nil {
		return x.IFEHGGKMHCA
	}
	return nil
}

func (x *ChessRogueCell) GetPosY() uint32 {
	if x != nil {
		return x.PosY
	}
	return 0
}

func (x *ChessRogueCell) GetPosX() uint32 {
	if x != nil {
		return x.PosX
	}
	return 0
}

func (x *ChessRogueCell) GetStageInfo() *CellAdvanceInfo {
	if x != nil {
		return x.StageInfo
	}
	return nil
}

func (x *ChessRogueCell) GetBlockType() uint32 {
	if x != nil {
		return x.BlockType
	}
	return 0
}

func (x *ChessRogueCell) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChessRogueCell) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *ChessRogueCell) GetCellStatus() ChessRogueBoardCellStatus {
	if x != nil {
		return x.CellStatus
	}
	return ChessRogueBoardCellStatus_IDLE
}

func (x *ChessRogueCell) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

var File_ChessRogueCell_proto protoreflect.FileDescriptor

var file_ChessRogueCell_proto_rawDesc = []byte{
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x46, 0x45, 0x48, 0x47, 0x47, 0x4b, 0x4d, 0x48, 0x43, 0x41, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x46, 0x45, 0x48, 0x47, 0x47, 0x4b, 0x4d, 0x48, 0x43,
	0x41, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x73, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x2f, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x2e,
	0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueCell_proto_rawDescOnce sync.Once
	file_ChessRogueCell_proto_rawDescData = file_ChessRogueCell_proto_rawDesc
)

func file_ChessRogueCell_proto_rawDescGZIP() []byte {
	file_ChessRogueCell_proto_rawDescOnce.Do(func() {
		file_ChessRogueCell_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueCell_proto_rawDescData)
	})
	return file_ChessRogueCell_proto_rawDescData
}

var file_ChessRogueCell_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueCell_proto_goTypes = []interface{}{
	(*ChessRogueCell)(nil),         // 0: ChessRogueCell
	(ChessRogueCellSpecialType)(0), // 1: ChessRogueCellSpecialType
	(*CellAdvanceInfo)(nil),        // 2: CellAdvanceInfo
	(ChessRogueBoardCellStatus)(0), // 3: ChessRogueBoardCellStatus
}
var file_ChessRogueCell_proto_depIdxs = []int32{
	1, // 0: ChessRogueCell.special_type:type_name -> ChessRogueCellSpecialType
	2, // 1: ChessRogueCell.stage_info:type_name -> CellAdvanceInfo
	3, // 2: ChessRogueCell.cell_status:type_name -> ChessRogueBoardCellStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ChessRogueCell_proto_init() }
func file_ChessRogueCell_proto_init() {
	if File_ChessRogueCell_proto != nil {
		return
	}
	file_ChessRogueBoardCellStatus_proto_init()
	file_CellAdvanceInfo_proto_init()
	file_ChessRogueCellSpecialType_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueCell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueCell_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueCell_proto_goTypes,
		DependencyIndexes: file_ChessRogueCell_proto_depIdxs,
		MessageInfos:      file_ChessRogueCell_proto_msgTypes,
	}.Build()
	File_ChessRogueCell_proto = out.File
	file_ChessRogueCell_proto_rawDesc = nil
	file_ChessRogueCell_proto_goTypes = nil
	file_ChessRogueCell_proto_depIdxs = nil
}
