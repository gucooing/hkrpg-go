// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: RogueMagicCurInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RogueMagicCurInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lineup             *RogueTournLineupInfo         `protobuf:"bytes,14,opt,name=lineup,proto3" json:"lineup,omitempty"`
	IGGNGJGPCLK        *CJOIECNKEGD                  `protobuf:"bytes,4,opt,name=IGGNGJGPCLK,proto3" json:"IGGNGJGPCLK,omitempty"`
	Level              *RogueMagicGameLevelInfo      `protobuf:"bytes,11,opt,name=level,proto3" json:"level,omitempty"`
	ItemValue          *RogueGameItemValue           `protobuf:"bytes,6,opt,name=item_value,json=itemValue,proto3" json:"item_value,omitempty"`
	BasicInfo          *RogueTournCurAreaInfo        `protobuf:"bytes,10,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	MagicItem          *RogueMagicGameItemInfo       `protobuf:"bytes,8,opt,name=magic_item,json=magicItem,proto3" json:"magic_item,omitempty"`
	MiracleInfo        *ChessRogueMiracleInfo        `protobuf:"bytes,15,opt,name=miracle_info,json=miracleInfo,proto3" json:"miracle_info,omitempty"`
	GameDifficultyInfo *RogueMagicGameDifficultyInfo `protobuf:"bytes,12,opt,name=game_difficulty_info,json=gameDifficultyInfo,proto3" json:"game_difficulty_info,omitempty"`
}

func (x *RogueMagicCurInfo) Reset() {
	*x = RogueMagicCurInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RogueMagicCurInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueMagicCurInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueMagicCurInfo) ProtoMessage() {}

func (x *RogueMagicCurInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RogueMagicCurInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueMagicCurInfo.ProtoReflect.Descriptor instead.
func (*RogueMagicCurInfo) Descriptor() ([]byte, []int) {
	return file_RogueMagicCurInfo_proto_rawDescGZIP(), []int{0}
}

func (x *RogueMagicCurInfo) GetLineup() *RogueTournLineupInfo {
	if x != nil {
		return x.Lineup
	}
	return nil
}

func (x *RogueMagicCurInfo) GetIGGNGJGPCLK() *CJOIECNKEGD {
	if x != nil {
		return x.IGGNGJGPCLK
	}
	return nil
}

func (x *RogueMagicCurInfo) GetLevel() *RogueMagicGameLevelInfo {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *RogueMagicCurInfo) GetItemValue() *RogueGameItemValue {
	if x != nil {
		return x.ItemValue
	}
	return nil
}

func (x *RogueMagicCurInfo) GetBasicInfo() *RogueTournCurAreaInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *RogueMagicCurInfo) GetMagicItem() *RogueMagicGameItemInfo {
	if x != nil {
		return x.MagicItem
	}
	return nil
}

func (x *RogueMagicCurInfo) GetMiracleInfo() *ChessRogueMiracleInfo {
	if x != nil {
		return x.MiracleInfo
	}
	return nil
}

func (x *RogueMagicCurInfo) GetGameDifficultyInfo() *RogueMagicGameDifficultyInfo {
	if x != nil {
		return x.GameDifficultyInfo
	}
	return nil
}

var File_RogueMagicCurInfo_proto protoreflect.FileDescriptor

var file_RogueMagicCurInfo_proto_rawDesc = []byte{
	0x0a, 0x17, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43, 0x4a, 0x4f, 0x49, 0x45,
	0x43, 0x4e, 0x4b, 0x45, 0x47, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x43, 0x75, 0x72, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x03,
	0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x75, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x49, 0x47, 0x47, 0x4e, 0x47, 0x4a, 0x47, 0x50, 0x43, 0x4c,
	0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x4a, 0x4f, 0x49, 0x45, 0x43,
	0x4e, 0x4b, 0x45, 0x47, 0x44, 0x52, 0x0b, 0x49, 0x47, 0x47, 0x4e, 0x47, 0x4a, 0x47, 0x50, 0x43,
	0x4c, 0x4b, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x43, 0x75, 0x72, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a,
	0x0a, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61,
	0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RogueMagicCurInfo_proto_rawDescOnce sync.Once
	file_RogueMagicCurInfo_proto_rawDescData = file_RogueMagicCurInfo_proto_rawDesc
)

func file_RogueMagicCurInfo_proto_rawDescGZIP() []byte {
	file_RogueMagicCurInfo_proto_rawDescOnce.Do(func() {
		file_RogueMagicCurInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_RogueMagicCurInfo_proto_rawDescData)
	})
	return file_RogueMagicCurInfo_proto_rawDescData
}

var file_RogueMagicCurInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_RogueMagicCurInfo_proto_goTypes = []interface{}{
	(*RogueMagicCurInfo)(nil),            // 0: RogueMagicCurInfo
	(*RogueTournLineupInfo)(nil),         // 1: RogueTournLineupInfo
	(*CJOIECNKEGD)(nil),                  // 2: CJOIECNKEGD
	(*RogueMagicGameLevelInfo)(nil),      // 3: RogueMagicGameLevelInfo
	(*RogueGameItemValue)(nil),           // 4: RogueGameItemValue
	(*RogueTournCurAreaInfo)(nil),        // 5: RogueTournCurAreaInfo
	(*RogueMagicGameItemInfo)(nil),       // 6: RogueMagicGameItemInfo
	(*ChessRogueMiracleInfo)(nil),        // 7: ChessRogueMiracleInfo
	(*RogueMagicGameDifficultyInfo)(nil), // 8: RogueMagicGameDifficultyInfo
}
var file_RogueMagicCurInfo_proto_depIdxs = []int32{
	1, // 0: RogueMagicCurInfo.lineup:type_name -> RogueTournLineupInfo
	2, // 1: RogueMagicCurInfo.IGGNGJGPCLK:type_name -> CJOIECNKEGD
	3, // 2: RogueMagicCurInfo.level:type_name -> RogueMagicGameLevelInfo
	4, // 3: RogueMagicCurInfo.item_value:type_name -> RogueGameItemValue
	5, // 4: RogueMagicCurInfo.basic_info:type_name -> RogueTournCurAreaInfo
	6, // 5: RogueMagicCurInfo.magic_item:type_name -> RogueMagicGameItemInfo
	7, // 6: RogueMagicCurInfo.miracle_info:type_name -> ChessRogueMiracleInfo
	8, // 7: RogueMagicCurInfo.game_difficulty_info:type_name -> RogueMagicGameDifficultyInfo
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_RogueMagicCurInfo_proto_init() }
func file_RogueMagicCurInfo_proto_init() {
	if File_RogueMagicCurInfo_proto != nil {
		return
	}
	file_CJOIECNKEGD_proto_init()
	file_RogueTournCurAreaInfo_proto_init()
	file_RogueMagicGameLevelInfo_proto_init()
	file_ChessRogueMiracleInfo_proto_init()
	file_RogueMagicGameDifficultyInfo_proto_init()
	file_RogueMagicGameItemInfo_proto_init()
	file_RogueGameItemValue_proto_init()
	file_RogueTournLineupInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RogueMagicCurInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueMagicCurInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RogueMagicCurInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RogueMagicCurInfo_proto_goTypes,
		DependencyIndexes: file_RogueMagicCurInfo_proto_depIdxs,
		MessageInfos:      file_RogueMagicCurInfo_proto_msgTypes,
	}.Build()
	File_RogueMagicCurInfo_proto = out.File
	file_RogueMagicCurInfo_proto_rawDesc = nil
	file_RogueMagicCurInfo_proto_goTypes = nil
	file_RogueMagicCurInfo_proto_depIdxs = nil
}
