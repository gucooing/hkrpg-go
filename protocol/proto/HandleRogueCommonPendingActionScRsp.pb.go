// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: HandleRogueCommonPendingActionScRsp.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HandleRogueCommonPendingActionScRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuePosition uint32 `protobuf:"varint,1,opt,name=queue_position,json=queuePosition,proto3" json:"queue_position,omitempty"`
	Retcode       uint32 `protobuf:"varint,9,opt,name=retcode,proto3" json:"retcode,omitempty"`
	QueueLocation uint32 `protobuf:"varint,8,opt,name=queue_location,json=queueLocation,proto3" json:"queue_location,omitempty"`
	// Types that are assignable to Action:
	//
	//	*HandleRogueCommonPendingActionScRsp_BuffSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_JGKKEJLGJBD
	//	*HandleRogueCommonPendingActionScRsp_GFKJCFPMNCC
	//	*HandleRogueCommonPendingActionScRsp_BuffRerollCallback
	//	*HandleRogueCommonPendingActionScRsp_BuffReforgeSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_MiracleSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_NIKNCPLLBHI
	//	*HandleRogueCommonPendingActionScRsp_DCOGKIKLFGK
	//	*HandleRogueCommonPendingActionScRsp_CCLNILKGMCM
	//	*HandleRogueCommonPendingActionScRsp_AHLPPMKPFPC
	//	*HandleRogueCommonPendingActionScRsp_GNOOJJGJILB
	//	*HandleRogueCommonPendingActionScRsp_HexAvatarSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_BonusSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_RogueTournFormulaCallback
	//	*HandleRogueCommonPendingActionScRsp_OKKLDAJIJEK
	//	*HandleRogueCommonPendingActionScRsp_JEACKBJNBCO
	//	*HandleRogueCommonPendingActionScRsp_ReforgeMiracleSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_MagicUnitSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_ScepterSelectCallback
	//	*HandleRogueCommonPendingActionScRsp_HLNOCCAHFBI
	//	*HandleRogueCommonPendingActionScRsp_BHMBKBMJAPA
	//	*HandleRogueCommonPendingActionScRsp_HOLNEMMCPMD
	//	*HandleRogueCommonPendingActionScRsp_CGAPGEAPLEA
	//	*HandleRogueCommonPendingActionScRsp_KLNCDDFDGKL
	Action isHandleRogueCommonPendingActionScRsp_Action `protobuf_oneof:"action"`
}

func (x *HandleRogueCommonPendingActionScRsp) Reset() {
	*x = HandleRogueCommonPendingActionScRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HandleRogueCommonPendingActionScRsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleRogueCommonPendingActionScRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleRogueCommonPendingActionScRsp) ProtoMessage() {}

func (x *HandleRogueCommonPendingActionScRsp) ProtoReflect() protoreflect.Message {
	mi := &file_HandleRogueCommonPendingActionScRsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleRogueCommonPendingActionScRsp.ProtoReflect.Descriptor instead.
func (*HandleRogueCommonPendingActionScRsp) Descriptor() ([]byte, []int) {
	return file_HandleRogueCommonPendingActionScRsp_proto_rawDescGZIP(), []int{0}
}

func (x *HandleRogueCommonPendingActionScRsp) GetQueuePosition() uint32 {
	if x != nil {
		return x.QueuePosition
	}
	return 0
}

func (x *HandleRogueCommonPendingActionScRsp) GetRetcode() uint32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *HandleRogueCommonPendingActionScRsp) GetQueueLocation() uint32 {
	if x != nil {
		return x.QueueLocation
	}
	return 0
}

func (m *HandleRogueCommonPendingActionScRsp) GetAction() isHandleRogueCommonPendingActionScRsp_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetBuffSelectCallback() *RogueBuffSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_BuffSelectCallback); ok {
		return x.BuffSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetJGKKEJLGJBD() *DAHBDDCBIGE {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_JGKKEJLGJBD); ok {
		return x.JGKKEJLGJBD
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetGFKJCFPMNCC() *BJKCCCLKBCE {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_GFKJCFPMNCC); ok {
		return x.GFKJCFPMNCC
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetBuffRerollCallback() *RogueBuffRerollCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_BuffRerollCallback); ok {
		return x.BuffRerollCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetBuffReforgeSelectCallback() *RogueBuffReforgeSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_BuffReforgeSelectCallback); ok {
		return x.BuffReforgeSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetMiracleSelectCallback() *RogueMiracleSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_MiracleSelectCallback); ok {
		return x.MiracleSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetNIKNCPLLBHI() *AAGFBGAHGMC {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_NIKNCPLLBHI); ok {
		return x.NIKNCPLLBHI
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetDCOGKIKLFGK() *GKJHPELMHHM {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_DCOGKIKLFGK); ok {
		return x.DCOGKIKLFGK
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetCCLNILKGMCM() *EKMLFCPKGPD {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_CCLNILKGMCM); ok {
		return x.CCLNILKGMCM
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetAHLPPMKPFPC() *IMKIIDNMOGK {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_AHLPPMKPFPC); ok {
		return x.AHLPPMKPFPC
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetGNOOJJGJILB() *NPLHOAOOEDA {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_GNOOJJGJILB); ok {
		return x.GNOOJJGJILB
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetHexAvatarSelectCallback() *RogueHexAvatarSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_HexAvatarSelectCallback); ok {
		return x.HexAvatarSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetBonusSelectCallback() *RogueBonusSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_BonusSelectCallback); ok {
		return x.BonusSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetRogueTournFormulaCallback() *RogueTournFormulaCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_RogueTournFormulaCallback); ok {
		return x.RogueTournFormulaCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetOKKLDAJIJEK() *HMOAHJFNPIO {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_OKKLDAJIJEK); ok {
		return x.OKKLDAJIJEK
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetJEACKBJNBCO() *EIBJGPDMCNP {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_JEACKBJNBCO); ok {
		return x.JEACKBJNBCO
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetReforgeMiracleSelectCallback() *RogueReforgeFormulaSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_ReforgeMiracleSelectCallback); ok {
		return x.ReforgeMiracleSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetMagicUnitSelectCallback() *RogueMagicUnitSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_MagicUnitSelectCallback); ok {
		return x.MagicUnitSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetScepterSelectCallback() *RogueMagicScepterSelectCallback {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_ScepterSelectCallback); ok {
		return x.ScepterSelectCallback
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetHLNOCCAHFBI() *CFAMAFMKAPG {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_HLNOCCAHFBI); ok {
		return x.HLNOCCAHFBI
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetBHMBKBMJAPA() *DAFBNEPHGDM {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_BHMBKBMJAPA); ok {
		return x.BHMBKBMJAPA
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetHOLNEMMCPMD() *DKIEFDFIOMB {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_HOLNEMMCPMD); ok {
		return x.HOLNEMMCPMD
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetCGAPGEAPLEA() *KDBJBOEGOKB {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_CGAPGEAPLEA); ok {
		return x.CGAPGEAPLEA
	}
	return nil
}

func (x *HandleRogueCommonPendingActionScRsp) GetKLNCDDFDGKL() *CBOBHBENEOG {
	if x, ok := x.GetAction().(*HandleRogueCommonPendingActionScRsp_KLNCDDFDGKL); ok {
		return x.KLNCDDFDGKL
	}
	return nil
}

type isHandleRogueCommonPendingActionScRsp_Action interface {
	isHandleRogueCommonPendingActionScRsp_Action()
}

type HandleRogueCommonPendingActionScRsp_BuffSelectCallback struct {
	BuffSelectCallback *RogueBuffSelectCallback `protobuf:"bytes,1027,opt,name=buff_select_callback,json=buffSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_JGKKEJLGJBD struct {
	JGKKEJLGJBD *DAHBDDCBIGE `protobuf:"bytes,1942,opt,name=JGKKEJLGJBD,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_GFKJCFPMNCC struct {
	GFKJCFPMNCC *BJKCCCLKBCE `protobuf:"bytes,645,opt,name=GFKJCFPMNCC,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_BuffRerollCallback struct {
	BuffRerollCallback *RogueBuffRerollCallback `protobuf:"bytes,98,opt,name=buff_reroll_callback,json=buffRerollCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_BuffReforgeSelectCallback struct {
	BuffReforgeSelectCallback *RogueBuffReforgeSelectCallback `protobuf:"bytes,1911,opt,name=buff_reforge_select_callback,json=buffReforgeSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_MiracleSelectCallback struct {
	MiracleSelectCallback *RogueMiracleSelectCallback `protobuf:"bytes,1356,opt,name=miracle_select_callback,json=miracleSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_NIKNCPLLBHI struct {
	NIKNCPLLBHI *AAGFBGAHGMC `protobuf:"bytes,1309,opt,name=NIKNCPLLBHI,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_DCOGKIKLFGK struct {
	DCOGKIKLFGK *GKJHPELMHHM `protobuf:"bytes,2029,opt,name=DCOGKIKLFGK,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_CCLNILKGMCM struct {
	CCLNILKGMCM *EKMLFCPKGPD `protobuf:"bytes,1765,opt,name=CCLNILKGMCM,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_AHLPPMKPFPC struct {
	AHLPPMKPFPC *IMKIIDNMOGK `protobuf:"bytes,1391,opt,name=AHLPPMKPFPC,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_GNOOJJGJILB struct {
	GNOOJJGJILB *NPLHOAOOEDA `protobuf:"bytes,1898,opt,name=GNOOJJGJILB,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_HexAvatarSelectCallback struct {
	HexAvatarSelectCallback *RogueHexAvatarSelectCallback `protobuf:"bytes,353,opt,name=hex_avatar_select_callback,json=hexAvatarSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_BonusSelectCallback struct {
	BonusSelectCallback *RogueBonusSelectCallback `protobuf:"bytes,1448,opt,name=bonus_select_callback,json=bonusSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_RogueTournFormulaCallback struct {
	RogueTournFormulaCallback *RogueTournFormulaCallback `protobuf:"bytes,256,opt,name=rogue_tourn_formula_callback,json=rogueTournFormulaCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_OKKLDAJIJEK struct {
	OKKLDAJIJEK *HMOAHJFNPIO `protobuf:"bytes,1744,opt,name=OKKLDAJIJEK,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_JEACKBJNBCO struct {
	JEACKBJNBCO *EIBJGPDMCNP `protobuf:"bytes,1163,opt,name=JEACKBJNBCO,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_ReforgeMiracleSelectCallback struct {
	ReforgeMiracleSelectCallback *RogueReforgeFormulaSelectCallback `protobuf:"bytes,1227,opt,name=reforge_miracle_select_callback,json=reforgeMiracleSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_MagicUnitSelectCallback struct {
	MagicUnitSelectCallback *RogueMagicUnitSelectCallback `protobuf:"bytes,761,opt,name=magic_unit_select_callback,json=magicUnitSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_ScepterSelectCallback struct {
	ScepterSelectCallback *RogueMagicScepterSelectCallback `protobuf:"bytes,895,opt,name=scepter_select_callback,json=scepterSelectCallback,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_HLNOCCAHFBI struct {
	HLNOCCAHFBI *CFAMAFMKAPG `protobuf:"bytes,1922,opt,name=HLNOCCAHFBI,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_BHMBKBMJAPA struct {
	BHMBKBMJAPA *DAFBNEPHGDM `protobuf:"bytes,811,opt,name=BHMBKBMJAPA,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_HOLNEMMCPMD struct {
	HOLNEMMCPMD *DKIEFDFIOMB `protobuf:"bytes,1999,opt,name=HOLNEMMCPMD,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_CGAPGEAPLEA struct {
	CGAPGEAPLEA *KDBJBOEGOKB `protobuf:"bytes,1005,opt,name=CGAPGEAPLEA,proto3,oneof"`
}

type HandleRogueCommonPendingActionScRsp_KLNCDDFDGKL struct {
	KLNCDDFDGKL *CBOBHBENEOG `protobuf:"bytes,61,opt,name=KLNCDDFDGKL,proto3,oneof"`
}

func (*HandleRogueCommonPendingActionScRsp_BuffSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_JGKKEJLGJBD) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_GFKJCFPMNCC) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_BuffRerollCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_BuffReforgeSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_MiracleSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_NIKNCPLLBHI) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_DCOGKIKLFGK) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_CCLNILKGMCM) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_AHLPPMKPFPC) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_GNOOJJGJILB) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_HexAvatarSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_BonusSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_RogueTournFormulaCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_OKKLDAJIJEK) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_JEACKBJNBCO) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_ReforgeMiracleSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_MagicUnitSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_ScepterSelectCallback) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_HLNOCCAHFBI) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_BHMBKBMJAPA) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_HOLNEMMCPMD) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_CGAPGEAPLEA) isHandleRogueCommonPendingActionScRsp_Action() {
}

func (*HandleRogueCommonPendingActionScRsp_KLNCDDFDGKL) isHandleRogueCommonPendingActionScRsp_Action() {
}

var File_HandleRogueCommonPendingActionScRsp_proto protoreflect.FileDescriptor

var file_HandleRogueCommonPendingActionScRsp_proto_rawDesc = []byte{
	0x0a, 0x29, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x52, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x44, 0x4b, 0x49,
	0x45, 0x46, 0x44, 0x46, 0x49, 0x4f, 0x4d, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x4e, 0x50, 0x4c, 0x48, 0x4f, 0x41, 0x4f, 0x4f, 0x45, 0x44, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x45, 0x49, 0x42, 0x4a, 0x47, 0x50, 0x44, 0x4d, 0x43, 0x4e, 0x50, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65, 0x66, 0x6f, 0x72,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x45, 0x4b,
	0x4d, 0x4c, 0x46, 0x43, 0x50, 0x4b, 0x47, 0x50, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x41, 0x41, 0x47, 0x46, 0x42, 0x47, 0x41, 0x48, 0x47, 0x4d, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x44, 0x41, 0x46, 0x42, 0x4e, 0x45, 0x50, 0x48, 0x47, 0x44, 0x4d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x47, 0x4b,
	0x4a, 0x48, 0x50, 0x45, 0x4c, 0x4d, 0x48, 0x48, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43, 0x42, 0x4f, 0x42, 0x48, 0x42, 0x45, 0x4e, 0x45, 0x4f, 0x47,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x49, 0x4d, 0x4b, 0x49, 0x49, 0x44, 0x4e, 0x4d, 0x4f,
	0x47, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x44, 0x41, 0x48, 0x42, 0x44, 0x44, 0x43, 0x42, 0x49, 0x47, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x4b, 0x44, 0x42, 0x4a, 0x42, 0x4f, 0x45, 0x47, 0x4f, 0x4b, 0x42, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x42, 0x4a, 0x4b, 0x43, 0x43, 0x43,
	0x4c, 0x4b, 0x42, 0x43, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x48, 0x4d, 0x4f,
	0x41, 0x48, 0x4a, 0x46, 0x4e, 0x50, 0x49, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x43, 0x46, 0x41, 0x4d, 0x41, 0x46, 0x4d, 0x4b, 0x41, 0x50, 0x47, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x0d, 0x0a, 0x23, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x52, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x83, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x12, 0x62, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x4a, 0x47, 0x4b, 0x4b, 0x45, 0x4a, 0x4c, 0x47, 0x4a,
	0x42, 0x44, 0x18, 0x96, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x41, 0x48, 0x42,
	0x44, 0x44, 0x43, 0x42, 0x49, 0x47, 0x45, 0x48, 0x00, 0x52, 0x0b, 0x4a, 0x47, 0x4b, 0x4b, 0x45,
	0x4a, 0x4c, 0x47, 0x4a, 0x42, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x46, 0x4b, 0x4a, 0x43, 0x46,
	0x50, 0x4d, 0x4e, 0x43, 0x43, 0x18, 0x85, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x4a, 0x4b, 0x43, 0x43, 0x43, 0x4c, 0x4b, 0x42, 0x43, 0x45, 0x48, 0x00, 0x52, 0x0b, 0x47, 0x46,
	0x4b, 0x4a, 0x43, 0x46, 0x50, 0x4d, 0x4e, 0x43, 0x43, 0x12, 0x4c, 0x0a, 0x14, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x12, 0x62, 0x75, 0x66, 0x66, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x1c, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xf7, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x19, 0x62, 0x75, 0x66, 0x66, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x17,
	0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xcc, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x6d,
	0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x4e, 0x49, 0x4b, 0x4e, 0x43, 0x50, 0x4c, 0x4c,
	0x42, 0x48, 0x49, 0x18, 0x9d, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x41, 0x47,
	0x46, 0x42, 0x47, 0x41, 0x48, 0x47, 0x4d, 0x43, 0x48, 0x00, 0x52, 0x0b, 0x4e, 0x49, 0x4b, 0x4e,
	0x43, 0x50, 0x4c, 0x4c, 0x42, 0x48, 0x49, 0x12, 0x31, 0x0a, 0x0b, 0x44, 0x43, 0x4f, 0x47, 0x4b,
	0x49, 0x4b, 0x4c, 0x46, 0x47, 0x4b, 0x18, 0xed, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x47, 0x4b, 0x4a, 0x48, 0x50, 0x45, 0x4c, 0x4d, 0x48, 0x48, 0x4d, 0x48, 0x00, 0x52, 0x0b, 0x44,
	0x43, 0x4f, 0x47, 0x4b, 0x49, 0x4b, 0x4c, 0x46, 0x47, 0x4b, 0x12, 0x31, 0x0a, 0x0b, 0x43, 0x43,
	0x4c, 0x4e, 0x49, 0x4c, 0x4b, 0x47, 0x4d, 0x43, 0x4d, 0x18, 0xe5, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x45, 0x4b, 0x4d, 0x4c, 0x46, 0x43, 0x50, 0x4b, 0x47, 0x50, 0x44, 0x48, 0x00,
	0x52, 0x0b, 0x43, 0x43, 0x4c, 0x4e, 0x49, 0x4c, 0x4b, 0x47, 0x4d, 0x43, 0x4d, 0x12, 0x31, 0x0a,
	0x0b, 0x41, 0x48, 0x4c, 0x50, 0x50, 0x4d, 0x4b, 0x50, 0x46, 0x50, 0x43, 0x18, 0xef, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x4d, 0x4b, 0x49, 0x49, 0x44, 0x4e, 0x4d, 0x4f, 0x47,
	0x4b, 0x48, 0x00, 0x52, 0x0b, 0x41, 0x48, 0x4c, 0x50, 0x50, 0x4d, 0x4b, 0x50, 0x46, 0x50, 0x43,
	0x12, 0x31, 0x0a, 0x0b, 0x47, 0x4e, 0x4f, 0x4f, 0x4a, 0x4a, 0x47, 0x4a, 0x49, 0x4c, 0x42, 0x18,
	0xea, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x50, 0x4c, 0x48, 0x4f, 0x41, 0x4f,
	0x4f, 0x45, 0x44, 0x41, 0x48, 0x00, 0x52, 0x0b, 0x47, 0x4e, 0x4f, 0x4f, 0x4a, 0x4a, 0x47, 0x4a,
	0x49, 0x4c, 0x42, 0x12, 0x5d, 0x0a, 0x1a, 0x68, 0x65, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x17, 0x68, 0x65, 0x78, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x50, 0x0a, 0x15, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xa8, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x1c, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x19, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x4f, 0x4b, 0x4b, 0x4c, 0x44, 0x41, 0x4a, 0x49,
	0x4a, 0x45, 0x4b, 0x18, 0xd0, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x4d, 0x4f,
	0x41, 0x48, 0x4a, 0x46, 0x4e, 0x50, 0x49, 0x4f, 0x48, 0x00, 0x52, 0x0b, 0x4f, 0x4b, 0x4b, 0x4c,
	0x44, 0x41, 0x4a, 0x49, 0x4a, 0x45, 0x4b, 0x12, 0x31, 0x0a, 0x0b, 0x4a, 0x45, 0x41, 0x43, 0x4b,
	0x42, 0x4a, 0x4e, 0x42, 0x43, 0x4f, 0x18, 0x8b, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x45, 0x49, 0x42, 0x4a, 0x47, 0x50, 0x44, 0x4d, 0x43, 0x4e, 0x50, 0x48, 0x00, 0x52, 0x0b, 0x4a,
	0x45, 0x41, 0x43, 0x4b, 0x42, 0x4a, 0x4e, 0x42, 0x43, 0x4f, 0x12, 0x6c, 0x0a, 0x1f, 0x72, 0x65,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xcb, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x1a, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xf9, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x17,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0xff, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x48, 0x4c, 0x4e, 0x4f, 0x43, 0x43, 0x41, 0x48,
	0x46, 0x42, 0x49, 0x18, 0x82, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x46, 0x41,
	0x4d, 0x41, 0x46, 0x4d, 0x4b, 0x41, 0x50, 0x47, 0x48, 0x00, 0x52, 0x0b, 0x48, 0x4c, 0x4e, 0x4f,
	0x43, 0x43, 0x41, 0x48, 0x46, 0x42, 0x49, 0x12, 0x31, 0x0a, 0x0b, 0x42, 0x48, 0x4d, 0x42, 0x4b,
	0x42, 0x4d, 0x4a, 0x41, 0x50, 0x41, 0x18, 0xab, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x44, 0x41, 0x46, 0x42, 0x4e, 0x45, 0x50, 0x48, 0x47, 0x44, 0x4d, 0x48, 0x00, 0x52, 0x0b, 0x42,
	0x48, 0x4d, 0x42, 0x4b, 0x42, 0x4d, 0x4a, 0x41, 0x50, 0x41, 0x12, 0x31, 0x0a, 0x0b, 0x48, 0x4f,
	0x4c, 0x4e, 0x45, 0x4d, 0x4d, 0x43, 0x50, 0x4d, 0x44, 0x18, 0xcf, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x44, 0x4b, 0x49, 0x45, 0x46, 0x44, 0x46, 0x49, 0x4f, 0x4d, 0x42, 0x48, 0x00,
	0x52, 0x0b, 0x48, 0x4f, 0x4c, 0x4e, 0x45, 0x4d, 0x4d, 0x43, 0x50, 0x4d, 0x44, 0x12, 0x31, 0x0a,
	0x0b, 0x43, 0x47, 0x41, 0x50, 0x47, 0x45, 0x41, 0x50, 0x4c, 0x45, 0x41, 0x18, 0xed, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4b, 0x44, 0x42, 0x4a, 0x42, 0x4f, 0x45, 0x47, 0x4f, 0x4b,
	0x42, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x47, 0x41, 0x50, 0x47, 0x45, 0x41, 0x50, 0x4c, 0x45, 0x41,
	0x12, 0x30, 0x0a, 0x0b, 0x4b, 0x4c, 0x4e, 0x43, 0x44, 0x44, 0x46, 0x44, 0x47, 0x4b, 0x4c, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x42, 0x4f, 0x42, 0x48, 0x42, 0x45, 0x4e,
	0x45, 0x4f, 0x47, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x4c, 0x4e, 0x43, 0x44, 0x44, 0x46, 0x44, 0x47,
	0x4b, 0x4c, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2e, 0x5a, 0x0e,
	0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02,
	0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_HandleRogueCommonPendingActionScRsp_proto_rawDescOnce sync.Once
	file_HandleRogueCommonPendingActionScRsp_proto_rawDescData = file_HandleRogueCommonPendingActionScRsp_proto_rawDesc
)

func file_HandleRogueCommonPendingActionScRsp_proto_rawDescGZIP() []byte {
	file_HandleRogueCommonPendingActionScRsp_proto_rawDescOnce.Do(func() {
		file_HandleRogueCommonPendingActionScRsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_HandleRogueCommonPendingActionScRsp_proto_rawDescData)
	})
	return file_HandleRogueCommonPendingActionScRsp_proto_rawDescData
}

var file_HandleRogueCommonPendingActionScRsp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_HandleRogueCommonPendingActionScRsp_proto_goTypes = []interface{}{
	(*HandleRogueCommonPendingActionScRsp)(nil), // 0: HandleRogueCommonPendingActionScRsp
	(*RogueBuffSelectCallback)(nil),             // 1: RogueBuffSelectCallback
	(*DAHBDDCBIGE)(nil),                         // 2: DAHBDDCBIGE
	(*BJKCCCLKBCE)(nil),                         // 3: BJKCCCLKBCE
	(*RogueBuffRerollCallback)(nil),             // 4: RogueBuffRerollCallback
	(*RogueBuffReforgeSelectCallback)(nil),      // 5: RogueBuffReforgeSelectCallback
	(*RogueMiracleSelectCallback)(nil),          // 6: RogueMiracleSelectCallback
	(*AAGFBGAHGMC)(nil),                         // 7: AAGFBGAHGMC
	(*GKJHPELMHHM)(nil),                         // 8: GKJHPELMHHM
	(*EKMLFCPKGPD)(nil),                         // 9: EKMLFCPKGPD
	(*IMKIIDNMOGK)(nil),                         // 10: IMKIIDNMOGK
	(*NPLHOAOOEDA)(nil),                         // 11: NPLHOAOOEDA
	(*RogueHexAvatarSelectCallback)(nil),        // 12: RogueHexAvatarSelectCallback
	(*RogueBonusSelectCallback)(nil),            // 13: RogueBonusSelectCallback
	(*RogueTournFormulaCallback)(nil),           // 14: RogueTournFormulaCallback
	(*HMOAHJFNPIO)(nil),                         // 15: HMOAHJFNPIO
	(*EIBJGPDMCNP)(nil),                         // 16: EIBJGPDMCNP
	(*RogueReforgeFormulaSelectCallback)(nil),   // 17: RogueReforgeFormulaSelectCallback
	(*RogueMagicUnitSelectCallback)(nil),        // 18: RogueMagicUnitSelectCallback
	(*RogueMagicScepterSelectCallback)(nil),     // 19: RogueMagicScepterSelectCallback
	(*CFAMAFMKAPG)(nil),                         // 20: CFAMAFMKAPG
	(*DAFBNEPHGDM)(nil),                         // 21: DAFBNEPHGDM
	(*DKIEFDFIOMB)(nil),                         // 22: DKIEFDFIOMB
	(*KDBJBOEGOKB)(nil),                         // 23: KDBJBOEGOKB
	(*CBOBHBENEOG)(nil),                         // 24: CBOBHBENEOG
}
var file_HandleRogueCommonPendingActionScRsp_proto_depIdxs = []int32{
	1,  // 0: HandleRogueCommonPendingActionScRsp.buff_select_callback:type_name -> RogueBuffSelectCallback
	2,  // 1: HandleRogueCommonPendingActionScRsp.JGKKEJLGJBD:type_name -> DAHBDDCBIGE
	3,  // 2: HandleRogueCommonPendingActionScRsp.GFKJCFPMNCC:type_name -> BJKCCCLKBCE
	4,  // 3: HandleRogueCommonPendingActionScRsp.buff_reroll_callback:type_name -> RogueBuffRerollCallback
	5,  // 4: HandleRogueCommonPendingActionScRsp.buff_reforge_select_callback:type_name -> RogueBuffReforgeSelectCallback
	6,  // 5: HandleRogueCommonPendingActionScRsp.miracle_select_callback:type_name -> RogueMiracleSelectCallback
	7,  // 6: HandleRogueCommonPendingActionScRsp.NIKNCPLLBHI:type_name -> AAGFBGAHGMC
	8,  // 7: HandleRogueCommonPendingActionScRsp.DCOGKIKLFGK:type_name -> GKJHPELMHHM
	9,  // 8: HandleRogueCommonPendingActionScRsp.CCLNILKGMCM:type_name -> EKMLFCPKGPD
	10, // 9: HandleRogueCommonPendingActionScRsp.AHLPPMKPFPC:type_name -> IMKIIDNMOGK
	11, // 10: HandleRogueCommonPendingActionScRsp.GNOOJJGJILB:type_name -> NPLHOAOOEDA
	12, // 11: HandleRogueCommonPendingActionScRsp.hex_avatar_select_callback:type_name -> RogueHexAvatarSelectCallback
	13, // 12: HandleRogueCommonPendingActionScRsp.bonus_select_callback:type_name -> RogueBonusSelectCallback
	14, // 13: HandleRogueCommonPendingActionScRsp.rogue_tourn_formula_callback:type_name -> RogueTournFormulaCallback
	15, // 14: HandleRogueCommonPendingActionScRsp.OKKLDAJIJEK:type_name -> HMOAHJFNPIO
	16, // 15: HandleRogueCommonPendingActionScRsp.JEACKBJNBCO:type_name -> EIBJGPDMCNP
	17, // 16: HandleRogueCommonPendingActionScRsp.reforge_miracle_select_callback:type_name -> RogueReforgeFormulaSelectCallback
	18, // 17: HandleRogueCommonPendingActionScRsp.magic_unit_select_callback:type_name -> RogueMagicUnitSelectCallback
	19, // 18: HandleRogueCommonPendingActionScRsp.scepter_select_callback:type_name -> RogueMagicScepterSelectCallback
	20, // 19: HandleRogueCommonPendingActionScRsp.HLNOCCAHFBI:type_name -> CFAMAFMKAPG
	21, // 20: HandleRogueCommonPendingActionScRsp.BHMBKBMJAPA:type_name -> DAFBNEPHGDM
	22, // 21: HandleRogueCommonPendingActionScRsp.HOLNEMMCPMD:type_name -> DKIEFDFIOMB
	23, // 22: HandleRogueCommonPendingActionScRsp.CGAPGEAPLEA:type_name -> KDBJBOEGOKB
	24, // 23: HandleRogueCommonPendingActionScRsp.KLNCDDFDGKL:type_name -> CBOBHBENEOG
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_HandleRogueCommonPendingActionScRsp_proto_init() }
func file_HandleRogueCommonPendingActionScRsp_proto_init() {
	if File_HandleRogueCommonPendingActionScRsp_proto != nil {
		return
	}
	file_DKIEFDFIOMB_proto_init()
	file_NPLHOAOOEDA_proto_init()
	file_EIBJGPDMCNP_proto_init()
	file_RogueReforgeFormulaSelectCallback_proto_init()
	file_RogueBuffSelectCallback_proto_init()
	file_EKMLFCPKGPD_proto_init()
	file_AAGFBGAHGMC_proto_init()
	file_DAFBNEPHGDM_proto_init()
	file_RogueMagicScepterSelectCallback_proto_init()
	file_GKJHPELMHHM_proto_init()
	file_RogueHexAvatarSelectCallback_proto_init()
	file_CBOBHBENEOG_proto_init()
	file_RogueBuffRerollCallback_proto_init()
	file_IMKIIDNMOGK_proto_init()
	file_RogueBuffReforgeSelectCallback_proto_init()
	file_DAHBDDCBIGE_proto_init()
	file_KDBJBOEGOKB_proto_init()
	file_RogueMagicUnitSelectCallback_proto_init()
	file_BJKCCCLKBCE_proto_init()
	file_HMOAHJFNPIO_proto_init()
	file_RogueMiracleSelectCallback_proto_init()
	file_RogueBonusSelectCallback_proto_init()
	file_RogueTournFormulaCallback_proto_init()
	file_CFAMAFMKAPG_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_HandleRogueCommonPendingActionScRsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleRogueCommonPendingActionScRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_HandleRogueCommonPendingActionScRsp_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*HandleRogueCommonPendingActionScRsp_BuffSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_JGKKEJLGJBD)(nil),
		(*HandleRogueCommonPendingActionScRsp_GFKJCFPMNCC)(nil),
		(*HandleRogueCommonPendingActionScRsp_BuffRerollCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_BuffReforgeSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_MiracleSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_NIKNCPLLBHI)(nil),
		(*HandleRogueCommonPendingActionScRsp_DCOGKIKLFGK)(nil),
		(*HandleRogueCommonPendingActionScRsp_CCLNILKGMCM)(nil),
		(*HandleRogueCommonPendingActionScRsp_AHLPPMKPFPC)(nil),
		(*HandleRogueCommonPendingActionScRsp_GNOOJJGJILB)(nil),
		(*HandleRogueCommonPendingActionScRsp_HexAvatarSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_BonusSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_RogueTournFormulaCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_OKKLDAJIJEK)(nil),
		(*HandleRogueCommonPendingActionScRsp_JEACKBJNBCO)(nil),
		(*HandleRogueCommonPendingActionScRsp_ReforgeMiracleSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_MagicUnitSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_ScepterSelectCallback)(nil),
		(*HandleRogueCommonPendingActionScRsp_HLNOCCAHFBI)(nil),
		(*HandleRogueCommonPendingActionScRsp_BHMBKBMJAPA)(nil),
		(*HandleRogueCommonPendingActionScRsp_HOLNEMMCPMD)(nil),
		(*HandleRogueCommonPendingActionScRsp_CGAPGEAPLEA)(nil),
		(*HandleRogueCommonPendingActionScRsp_KLNCDDFDGKL)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HandleRogueCommonPendingActionScRsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_HandleRogueCommonPendingActionScRsp_proto_goTypes,
		DependencyIndexes: file_HandleRogueCommonPendingActionScRsp_proto_depIdxs,
		MessageInfos:      file_HandleRogueCommonPendingActionScRsp_proto_msgTypes,
	}.Build()
	File_HandleRogueCommonPendingActionScRsp_proto = out.File
	file_HandleRogueCommonPendingActionScRsp_proto_rawDesc = nil
	file_HandleRogueCommonPendingActionScRsp_proto_goTypes = nil
	file_HandleRogueCommonPendingActionScRsp_proto_depIdxs = nil
}
