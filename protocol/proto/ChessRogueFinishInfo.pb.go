// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueFinishInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueFinishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OKPENLLBMGI           uint32               `protobuf:"varint,1567,opt,name=OKPENLLBMGI,proto3" json:"OKPENLLBMGI,omitempty"`
	GameMiracleInfo       *ChessRogueMiracle   `protobuf:"bytes,9,opt,name=game_miracle_info,json=gameMiracleInfo,proto3" json:"game_miracle_info,omitempty"`
	KCHGJDIENJE           *ItemList            `protobuf:"bytes,5,opt,name=KCHGJDIENJE,proto3" json:"KCHGJDIENJE,omitempty"`
	KHCIDDJFPBF           uint32               `protobuf:"varint,533,opt,name=KHCIDDJFPBF,proto3" json:"KHCIDDJFPBF,omitempty"`
	RogueBuffInfo         *ChessRogueBuff      `protobuf:"bytes,15,opt,name=rogue_buff_info,json=rogueBuffInfo,proto3" json:"rogue_buff_info,omitempty"`
	RogueLineup           *LineupInfo          `protobuf:"bytes,14,opt,name=rogue_lineup,json=rogueLineup,proto3" json:"rogue_lineup,omitempty"`
	CCJNIBOLCMI           uint32               `protobuf:"varint,1,opt,name=CCJNIBOLCMI,proto3" json:"CCJNIBOLCMI,omitempty"`
	DifficultyLevel       uint32               `protobuf:"varint,11,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	RogueStoryInfo        *ChessRogueStoryInfo `protobuf:"bytes,161,opt,name=rogue_story_info,json=rogueStoryInfo,proto3" json:"rogue_story_info,omitempty"`
	RogueSubMode          uint32               `protobuf:"varint,1673,opt,name=rogue_sub_mode,json=rogueSubMode,proto3" json:"rogue_sub_mode,omitempty"`
	LHPDBAMHBKB           []uint32             `protobuf:"varint,10,rep,packed,name=LHPDBAMHBKB,proto3" json:"LHPDBAMHBKB,omitempty"`
	IsFinish              bool                 `protobuf:"varint,4,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	ChessRogueMainStoryId uint32               `protobuf:"varint,3,opt,name=chess_rogue_main_story_id,json=chessRogueMainStoryId,proto3" json:"chess_rogue_main_story_id,omitempty"`
	ScoreId               uint32               `protobuf:"varint,1332,opt,name=score_id,json=scoreId,proto3" json:"score_id,omitempty"`
	PNBKJELMABK           uint32               `protobuf:"varint,737,opt,name=PNBKJELMABK,proto3" json:"PNBKJELMABK,omitempty"`
	IEPDBJPFEGC           uint32               `protobuf:"varint,6,opt,name=IEPDBJPFEGC,proto3" json:"IEPDBJPFEGC,omitempty"`
	CCOCHCFKHNK           uint32               `protobuf:"varint,7,opt,name=CCOCHCFKHNK,proto3" json:"CCOCHCFKHNK,omitempty"`
	DLDCGKAOOLM           uint32               `protobuf:"varint,2,opt,name=DLDCGKAOOLM,proto3" json:"DLDCGKAOOLM,omitempty"`
	QuitReason            ChessRogueQuitReason `protobuf:"varint,13,opt,name=quit_reason,json=quitReason,proto3,enum=ChessRogueQuitReason" json:"quit_reason,omitempty"`
}

func (x *ChessRogueFinishInfo) Reset() {
	*x = ChessRogueFinishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueFinishInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueFinishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueFinishInfo) ProtoMessage() {}

func (x *ChessRogueFinishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueFinishInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueFinishInfo.ProtoReflect.Descriptor instead.
func (*ChessRogueFinishInfo) Descriptor() ([]byte, []int) {
	return file_ChessRogueFinishInfo_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueFinishInfo) GetOKPENLLBMGI() uint32 {
	if x != nil {
		return x.OKPENLLBMGI
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetGameMiracleInfo() *ChessRogueMiracle {
	if x != nil {
		return x.GameMiracleInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetKCHGJDIENJE() *ItemList {
	if x != nil {
		return x.KCHGJDIENJE
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetKHCIDDJFPBF() uint32 {
	if x != nil {
		return x.KHCIDDJFPBF
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetRogueBuffInfo() *ChessRogueBuff {
	if x != nil {
		return x.RogueBuffInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetRogueLineup() *LineupInfo {
	if x != nil {
		return x.RogueLineup
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetCCJNIBOLCMI() uint32 {
	if x != nil {
		return x.CCJNIBOLCMI
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetDifficultyLevel() uint32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetRogueStoryInfo() *ChessRogueStoryInfo {
	if x != nil {
		return x.RogueStoryInfo
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetRogueSubMode() uint32 {
	if x != nil {
		return x.RogueSubMode
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetLHPDBAMHBKB() []uint32 {
	if x != nil {
		return x.LHPDBAMHBKB
	}
	return nil
}

func (x *ChessRogueFinishInfo) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *ChessRogueFinishInfo) GetChessRogueMainStoryId() uint32 {
	if x != nil {
		return x.ChessRogueMainStoryId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetScoreId() uint32 {
	if x != nil {
		return x.ScoreId
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetPNBKJELMABK() uint32 {
	if x != nil {
		return x.PNBKJELMABK
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetIEPDBJPFEGC() uint32 {
	if x != nil {
		return x.IEPDBJPFEGC
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetCCOCHCFKHNK() uint32 {
	if x != nil {
		return x.CCOCHCFKHNK
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetDLDCGKAOOLM() uint32 {
	if x != nil {
		return x.DLDCGKAOOLM
	}
	return 0
}

func (x *ChessRogueFinishInfo) GetQuitReason() ChessRogueQuitReason {
	if x != nil {
		return x.QuitReason
	}
	return ChessRogueQuitReason_CHESS_ROGUE_ACCOUNT_BY_NONE
}

var File_ChessRogueFinishInfo_proto protoreflect.FileDescriptor

var file_ChessRogueFinishInfo_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x06, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0b, 0x4f, 0x4b, 0x50, 0x45, 0x4e, 0x4c, 0x4c, 0x42, 0x4d, 0x47, 0x49, 0x18, 0x9f, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x4b, 0x50, 0x45, 0x4e, 0x4c, 0x4c, 0x42, 0x4d, 0x47, 0x49,
	0x12, 0x3e, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x0b, 0x4b, 0x43, 0x48, 0x47, 0x4a, 0x44, 0x49, 0x45, 0x4e, 0x4a, 0x45, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x4b, 0x43, 0x48, 0x47, 0x4a, 0x44, 0x49, 0x45, 0x4e, 0x4a, 0x45, 0x12, 0x21, 0x0a,
	0x0b, 0x4b, 0x48, 0x43, 0x49, 0x44, 0x44, 0x4a, 0x46, 0x50, 0x42, 0x46, 0x18, 0x95, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4b, 0x48, 0x43, 0x49, 0x44, 0x44, 0x4a, 0x46, 0x50, 0x42, 0x46,
	0x12, 0x37, 0x0a, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0d, 0x72, 0x6f, 0x67, 0x75,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0c, 0x72, 0x6f, 0x67,
	0x75, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x6f,
	0x67, 0x75, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x43, 0x4a,
	0x4e, 0x49, 0x42, 0x4f, 0x4c, 0x43, 0x4d, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x43, 0x43, 0x4a, 0x4e, 0x49, 0x42, 0x4f, 0x4c, 0x43, 0x4d, 0x49, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x89, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x53, 0x75, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x48, 0x50, 0x44, 0x42, 0x41, 0x4d, 0x48, 0x42, 0x4b, 0x42, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4c, 0x48, 0x50, 0x44, 0x42, 0x41, 0x4d, 0x48, 0x42, 0x4b, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x38, 0x0a,
	0x19, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x63, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0xb4, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x4e, 0x42, 0x4b, 0x4a, 0x45, 0x4c, 0x4d, 0x41,
	0x42, 0x4b, 0x18, 0xe1, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x4e, 0x42, 0x4b, 0x4a,
	0x45, 0x4c, 0x4d, 0x41, 0x42, 0x4b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x45, 0x50, 0x44, 0x42, 0x4a,
	0x50, 0x46, 0x45, 0x47, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x49, 0x45, 0x50,
	0x44, 0x42, 0x4a, 0x50, 0x46, 0x45, 0x47, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x43, 0x4f, 0x43,
	0x48, 0x43, 0x46, 0x4b, 0x48, 0x4e, 0x4b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43,
	0x43, 0x4f, 0x43, 0x48, 0x43, 0x46, 0x4b, 0x48, 0x4e, 0x4b, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x4c,
	0x44, 0x43, 0x47, 0x4b, 0x41, 0x4f, 0x4f, 0x4c, 0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x44, 0x4c, 0x44, 0x43, 0x47, 0x4b, 0x41, 0x4f, 0x4f, 0x4c, 0x4d, 0x12, 0x36, 0x0a, 0x0b,
	0x71, 0x75, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueFinishInfo_proto_rawDescOnce sync.Once
	file_ChessRogueFinishInfo_proto_rawDescData = file_ChessRogueFinishInfo_proto_rawDesc
)

func file_ChessRogueFinishInfo_proto_rawDescGZIP() []byte {
	file_ChessRogueFinishInfo_proto_rawDescOnce.Do(func() {
		file_ChessRogueFinishInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueFinishInfo_proto_rawDescData)
	})
	return file_ChessRogueFinishInfo_proto_rawDescData
}

var file_ChessRogueFinishInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueFinishInfo_proto_goTypes = []interface{}{
	(*ChessRogueFinishInfo)(nil), // 0: ChessRogueFinishInfo
	(*ChessRogueMiracle)(nil),    // 1: ChessRogueMiracle
	(*ItemList)(nil),             // 2: ItemList
	(*ChessRogueBuff)(nil),       // 3: ChessRogueBuff
	(*LineupInfo)(nil),           // 4: LineupInfo
	(*ChessRogueStoryInfo)(nil),  // 5: ChessRogueStoryInfo
	(ChessRogueQuitReason)(0),    // 6: ChessRogueQuitReason
}
var file_ChessRogueFinishInfo_proto_depIdxs = []int32{
	1, // 0: ChessRogueFinishInfo.game_miracle_info:type_name -> ChessRogueMiracle
	2, // 1: ChessRogueFinishInfo.KCHGJDIENJE:type_name -> ItemList
	3, // 2: ChessRogueFinishInfo.rogue_buff_info:type_name -> ChessRogueBuff
	4, // 3: ChessRogueFinishInfo.rogue_lineup:type_name -> LineupInfo
	5, // 4: ChessRogueFinishInfo.rogue_story_info:type_name -> ChessRogueStoryInfo
	6, // 5: ChessRogueFinishInfo.quit_reason:type_name -> ChessRogueQuitReason
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ChessRogueFinishInfo_proto_init() }
func file_ChessRogueFinishInfo_proto_init() {
	if File_ChessRogueFinishInfo_proto != nil {
		return
	}
	file_ChessRogueQuitReason_proto_init()
	file_ChessRogueBuff_proto_init()
	file_ItemList_proto_init()
	file_ChessRogueMiracle_proto_init()
	file_LineupInfo_proto_init()
	file_ChessRogueStoryInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueFinishInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueFinishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueFinishInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueFinishInfo_proto_goTypes,
		DependencyIndexes: file_ChessRogueFinishInfo_proto_depIdxs,
		MessageInfos:      file_ChessRogueFinishInfo_proto_msgTypes,
	}.Build()
	File_ChessRogueFinishInfo_proto = out.File
	file_ChessRogueFinishInfo_proto_rawDesc = nil
	file_ChessRogueFinishInfo_proto_goTypes = nil
	file_ChessRogueFinishInfo_proto_depIdxs = nil
}
