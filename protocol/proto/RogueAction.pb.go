// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: RogueAction.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RogueAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PendingAction:
	//
	//	*RogueAction_BuffSelectInfo
	//	*RogueAction_NEBOIHLFOEO
	//	*RogueAction_EMMOBOGHEAP
	//	*RogueAction_BuffReforgeSelectInfo
	//	*RogueAction_MiracleSelectInfo
	//	*RogueAction_OHCDPJCHLHD
	//	*RogueAction_LEDMPEPKFFK
	//	*RogueAction_HFPCIFLENKL
	//	*RogueAction_LONLJJALNJC
	//	*RogueAction_LFFIPIJGHPI
	//	*RogueAction_ComposeMiracleSelectInfo
	//	*RogueAction_HexAvatarSelectInfo
	//	*RogueAction_BonusSelectInfo
	//	*RogueAction_RogueFormulaSelectInfo
	//	*RogueAction_AAJCJFAHPEH
	//	*RogueAction_ReforgeFormulaSelectInfo
	//	*RogueAction_MagicUnitSelectInfo
	//	*RogueAction_ScepterSelectInfo
	//	*RogueAction_PNEMAFHKFII
	//	*RogueAction_FCBEKOPHFMG
	//	*RogueAction_PBAHDAICIIH
	//	*RogueAction_DCHLCCBGIFD
	//	*RogueAction_FNJLPFBCMGJ
	//	*RogueAction_HELFGEKGKKP
	//	*RogueAction_ODAHCCBIPNH
	//	*RogueAction_OMIEOKKFCKC
	PendingAction isRogueAction_PendingAction `protobuf_oneof:"pending_action"`
}

func (x *RogueAction) Reset() {
	*x = RogueAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RogueAction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueAction) ProtoMessage() {}

func (x *RogueAction) ProtoReflect() protoreflect.Message {
	mi := &file_RogueAction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueAction.ProtoReflect.Descriptor instead.
func (*RogueAction) Descriptor() ([]byte, []int) {
	return file_RogueAction_proto_rawDescGZIP(), []int{0}
}

func (m *RogueAction) GetPendingAction() isRogueAction_PendingAction {
	if m != nil {
		return m.PendingAction
	}
	return nil
}

func (x *RogueAction) GetBuffSelectInfo() *RogueCommonBuffSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_BuffSelectInfo); ok {
		return x.BuffSelectInfo
	}
	return nil
}

func (x *RogueAction) GetNEBOIHLFOEO() *MCFLKFLHMMF {
	if x, ok := x.GetPendingAction().(*RogueAction_NEBOIHLFOEO); ok {
		return x.NEBOIHLFOEO
	}
	return nil
}

func (x *RogueAction) GetEMMOBOGHEAP() *MCLBEAJCELD {
	if x, ok := x.GetPendingAction().(*RogueAction_EMMOBOGHEAP); ok {
		return x.EMMOBOGHEAP
	}
	return nil
}

func (x *RogueAction) GetBuffReforgeSelectInfo() *RogueCommonBuffReforgeSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_BuffReforgeSelectInfo); ok {
		return x.BuffReforgeSelectInfo
	}
	return nil
}

func (x *RogueAction) GetMiracleSelectInfo() *RogueMiracleSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_MiracleSelectInfo); ok {
		return x.MiracleSelectInfo
	}
	return nil
}

func (x *RogueAction) GetOHCDPJCHLHD() *NHMMJIHCOGF {
	if x, ok := x.GetPendingAction().(*RogueAction_OHCDPJCHLHD); ok {
		return x.OHCDPJCHLHD
	}
	return nil
}

func (x *RogueAction) GetLEDMPEPKFFK() *HGNEEFCADKJ {
	if x, ok := x.GetPendingAction().(*RogueAction_LEDMPEPKFFK); ok {
		return x.LEDMPEPKFFK
	}
	return nil
}

func (x *RogueAction) GetHFPCIFLENKL() *IFLAKOOGJJL {
	if x, ok := x.GetPendingAction().(*RogueAction_HFPCIFLENKL); ok {
		return x.HFPCIFLENKL
	}
	return nil
}

func (x *RogueAction) GetLONLJJALNJC() *NIDBFAKBKMF {
	if x, ok := x.GetPendingAction().(*RogueAction_LONLJJALNJC); ok {
		return x.LONLJJALNJC
	}
	return nil
}

func (x *RogueAction) GetLFFIPIJGHPI() *OMJPKPNNMJM {
	if x, ok := x.GetPendingAction().(*RogueAction_LFFIPIJGHPI); ok {
		return x.LFFIPIJGHPI
	}
	return nil
}

func (x *RogueAction) GetComposeMiracleSelectInfo() *RogueComposeMiracleSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_ComposeMiracleSelectInfo); ok {
		return x.ComposeMiracleSelectInfo
	}
	return nil
}

func (x *RogueAction) GetHexAvatarSelectInfo() *RogueHexAvatarSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_HexAvatarSelectInfo); ok {
		return x.HexAvatarSelectInfo
	}
	return nil
}

func (x *RogueAction) GetBonusSelectInfo() *RogueBonusSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_BonusSelectInfo); ok {
		return x.BonusSelectInfo
	}
	return nil
}

func (x *RogueAction) GetRogueFormulaSelectInfo() *RogueFormulaSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_RogueFormulaSelectInfo); ok {
		return x.RogueFormulaSelectInfo
	}
	return nil
}

func (x *RogueAction) GetAAJCJFAHPEH() *MHOEBCLBNNE {
	if x, ok := x.GetPendingAction().(*RogueAction_AAJCJFAHPEH); ok {
		return x.AAJCJFAHPEH
	}
	return nil
}

func (x *RogueAction) GetReforgeFormulaSelectInfo() *RogueReforgeFormulaSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_ReforgeFormulaSelectInfo); ok {
		return x.ReforgeFormulaSelectInfo
	}
	return nil
}

func (x *RogueAction) GetMagicUnitSelectInfo() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_MagicUnitSelectInfo); ok {
		return x.MagicUnitSelectInfo
	}
	return nil
}

func (x *RogueAction) GetScepterSelectInfo() *RogueMagicScepterSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_ScepterSelectInfo); ok {
		return x.ScepterSelectInfo
	}
	return nil
}

func (x *RogueAction) GetPNEMAFHKFII() *MNKGMOHKAAP {
	if x, ok := x.GetPendingAction().(*RogueAction_PNEMAFHKFII); ok {
		return x.PNEMAFHKFII
	}
	return nil
}

func (x *RogueAction) GetFCBEKOPHFMG() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_FCBEKOPHFMG); ok {
		return x.FCBEKOPHFMG
	}
	return nil
}

func (x *RogueAction) GetPBAHDAICIIH() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_PBAHDAICIIH); ok {
		return x.PBAHDAICIIH
	}
	return nil
}

func (x *RogueAction) GetDCHLCCBGIFD() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetPendingAction().(*RogueAction_DCHLCCBGIFD); ok {
		return x.DCHLCCBGIFD
	}
	return nil
}

func (x *RogueAction) GetFNJLPFBCMGJ() *IDAMGIHKEOP {
	if x, ok := x.GetPendingAction().(*RogueAction_FNJLPFBCMGJ); ok {
		return x.FNJLPFBCMGJ
	}
	return nil
}

func (x *RogueAction) GetHELFGEKGKKP() *IDAMGIHKEOP {
	if x, ok := x.GetPendingAction().(*RogueAction_HELFGEKGKKP); ok {
		return x.HELFGEKGKKP
	}
	return nil
}

func (x *RogueAction) GetODAHCCBIPNH() *IDAMGIHKEOP {
	if x, ok := x.GetPendingAction().(*RogueAction_ODAHCCBIPNH); ok {
		return x.ODAHCCBIPNH
	}
	return nil
}

func (x *RogueAction) GetOMIEOKKFCKC() *IOKINLMLPHH {
	if x, ok := x.GetPendingAction().(*RogueAction_OMIEOKKFCKC); ok {
		return x.OMIEOKKFCKC
	}
	return nil
}

type isRogueAction_PendingAction interface {
	isRogueAction_PendingAction()
}

type RogueAction_BuffSelectInfo struct {
	BuffSelectInfo *RogueCommonBuffSelectInfo `protobuf:"bytes,1719,opt,name=buff_select_info,json=buffSelectInfo,proto3,oneof"`
}

type RogueAction_NEBOIHLFOEO struct {
	NEBOIHLFOEO *MCFLKFLHMMF `protobuf:"bytes,507,opt,name=NEBOIHLFOEO,proto3,oneof"`
}

type RogueAction_EMMOBOGHEAP struct {
	EMMOBOGHEAP *MCLBEAJCELD `protobuf:"bytes,1597,opt,name=EMMOBOGHEAP,proto3,oneof"`
}

type RogueAction_BuffReforgeSelectInfo struct {
	BuffReforgeSelectInfo *RogueCommonBuffReforgeSelectInfo `protobuf:"bytes,1322,opt,name=buff_reforge_select_info,json=buffReforgeSelectInfo,proto3,oneof"`
}

type RogueAction_MiracleSelectInfo struct {
	MiracleSelectInfo *RogueMiracleSelectInfo `protobuf:"bytes,1776,opt,name=miracle_select_info,json=miracleSelectInfo,proto3,oneof"`
}

type RogueAction_OHCDPJCHLHD struct {
	OHCDPJCHLHD *NHMMJIHCOGF `protobuf:"bytes,845,opt,name=OHCDPJCHLHD,proto3,oneof"`
}

type RogueAction_LEDMPEPKFFK struct {
	LEDMPEPKFFK *HGNEEFCADKJ `protobuf:"bytes,1506,opt,name=LEDMPEPKFFK,proto3,oneof"`
}

type RogueAction_HFPCIFLENKL struct {
	HFPCIFLENKL *IFLAKOOGJJL `protobuf:"bytes,362,opt,name=HFPCIFLENKL,proto3,oneof"`
}

type RogueAction_LONLJJALNJC struct {
	LONLJJALNJC *NIDBFAKBKMF `protobuf:"bytes,1942,opt,name=LONLJJALNJC,proto3,oneof"`
}

type RogueAction_LFFIPIJGHPI struct {
	LFFIPIJGHPI *OMJPKPNNMJM `protobuf:"bytes,420,opt,name=LFFIPIJGHPI,proto3,oneof"`
}

type RogueAction_ComposeMiracleSelectInfo struct {
	ComposeMiracleSelectInfo *RogueComposeMiracleSelectInfo `protobuf:"bytes,366,opt,name=compose_miracle_select_info,json=composeMiracleSelectInfo,proto3,oneof"`
}

type RogueAction_HexAvatarSelectInfo struct {
	HexAvatarSelectInfo *RogueHexAvatarSelectInfo `protobuf:"bytes,1677,opt,name=hex_avatar_select_info,json=hexAvatarSelectInfo,proto3,oneof"`
}

type RogueAction_BonusSelectInfo struct {
	BonusSelectInfo *RogueBonusSelectInfo `protobuf:"bytes,1232,opt,name=bonus_select_info,json=bonusSelectInfo,proto3,oneof"`
}

type RogueAction_RogueFormulaSelectInfo struct {
	RogueFormulaSelectInfo *RogueFormulaSelectInfo `protobuf:"bytes,176,opt,name=rogue_formula_select_info,json=rogueFormulaSelectInfo,proto3,oneof"`
}

type RogueAction_AAJCJFAHPEH struct {
	AAJCJFAHPEH *MHOEBCLBNNE `protobuf:"bytes,892,opt,name=AAJCJFAHPEH,proto3,oneof"`
}

type RogueAction_ReforgeFormulaSelectInfo struct {
	ReforgeFormulaSelectInfo *RogueReforgeFormulaSelectInfo `protobuf:"bytes,275,opt,name=reforge_formula_select_info,json=reforgeFormulaSelectInfo,proto3,oneof"`
}

type RogueAction_MagicUnitSelectInfo struct {
	MagicUnitSelectInfo *RogueMagicUnitSelectInfo `protobuf:"bytes,1129,opt,name=magic_unit_select_info,json=magicUnitSelectInfo,proto3,oneof"`
}

type RogueAction_ScepterSelectInfo struct {
	ScepterSelectInfo *RogueMagicScepterSelectInfo `protobuf:"bytes,1388,opt,name=scepter_select_info,json=scepterSelectInfo,proto3,oneof"`
}

type RogueAction_PNEMAFHKFII struct {
	PNEMAFHKFII *MNKGMOHKAAP `protobuf:"bytes,18,opt,name=PNEMAFHKFII,proto3,oneof"`
}

type RogueAction_FCBEKOPHFMG struct {
	FCBEKOPHFMG *RogueMagicUnitSelectInfo `protobuf:"bytes,585,opt,name=FCBEKOPHFMG,proto3,oneof"`
}

type RogueAction_PBAHDAICIIH struct {
	PBAHDAICIIH *RogueMagicUnitSelectInfo `protobuf:"bytes,1644,opt,name=PBAHDAICIIH,proto3,oneof"`
}

type RogueAction_DCHLCCBGIFD struct {
	DCHLCCBGIFD *RogueMagicUnitSelectInfo `protobuf:"bytes,1331,opt,name=DCHLCCBGIFD,proto3,oneof"`
}

type RogueAction_FNJLPFBCMGJ struct {
	FNJLPFBCMGJ *IDAMGIHKEOP `protobuf:"bytes,353,opt,name=FNJLPFBCMGJ,proto3,oneof"`
}

type RogueAction_HELFGEKGKKP struct {
	HELFGEKGKKP *IDAMGIHKEOP `protobuf:"bytes,1455,opt,name=HELFGEKGKKP,proto3,oneof"`
}

type RogueAction_ODAHCCBIPNH struct {
	ODAHCCBIPNH *IDAMGIHKEOP `protobuf:"bytes,1910,opt,name=ODAHCCBIPNH,proto3,oneof"`
}

type RogueAction_OMIEOKKFCKC struct {
	OMIEOKKFCKC *IOKINLMLPHH `protobuf:"bytes,49,opt,name=OMIEOKKFCKC,proto3,oneof"`
}

func (*RogueAction_BuffSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_NEBOIHLFOEO) isRogueAction_PendingAction() {}

func (*RogueAction_EMMOBOGHEAP) isRogueAction_PendingAction() {}

func (*RogueAction_BuffReforgeSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_MiracleSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_OHCDPJCHLHD) isRogueAction_PendingAction() {}

func (*RogueAction_LEDMPEPKFFK) isRogueAction_PendingAction() {}

func (*RogueAction_HFPCIFLENKL) isRogueAction_PendingAction() {}

func (*RogueAction_LONLJJALNJC) isRogueAction_PendingAction() {}

func (*RogueAction_LFFIPIJGHPI) isRogueAction_PendingAction() {}

func (*RogueAction_ComposeMiracleSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_HexAvatarSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_BonusSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_RogueFormulaSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_AAJCJFAHPEH) isRogueAction_PendingAction() {}

func (*RogueAction_ReforgeFormulaSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_MagicUnitSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_ScepterSelectInfo) isRogueAction_PendingAction() {}

func (*RogueAction_PNEMAFHKFII) isRogueAction_PendingAction() {}

func (*RogueAction_FCBEKOPHFMG) isRogueAction_PendingAction() {}

func (*RogueAction_PBAHDAICIIH) isRogueAction_PendingAction() {}

func (*RogueAction_DCHLCCBGIFD) isRogueAction_PendingAction() {}

func (*RogueAction_FNJLPFBCMGJ) isRogueAction_PendingAction() {}

func (*RogueAction_HELFGEKGKKP) isRogueAction_PendingAction() {}

func (*RogueAction_ODAHCCBIPNH) isRogueAction_PendingAction() {}

func (*RogueAction_OMIEOKKFCKC) isRogueAction_PendingAction() {}

var File_RogueAction_proto protoreflect.FileDescriptor

var file_RogueAction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x49, 0x46, 0x4c, 0x41, 0x4b, 0x4f, 0x4f, 0x47, 0x4a, 0x4a, 0x4c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x4d, 0x43, 0x4c, 0x42, 0x45, 0x41, 0x4a, 0x43, 0x45, 0x4c, 0x44, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x49, 0x44, 0x41, 0x4d, 0x47, 0x49, 0x48, 0x4b, 0x45,
	0x4f, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4e, 0x49, 0x44, 0x42, 0x46, 0x41,
	0x4b, 0x42, 0x4b, 0x4d, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x49, 0x4f, 0x4b,
	0x49, 0x4e, 0x4c, 0x4d, 0x4c, 0x50, 0x48, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x52,
	0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4e, 0x48, 0x4d, 0x4d, 0x4a, 0x49, 0x48, 0x43,
	0x4f, 0x47, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4d, 0x43, 0x46, 0x4c, 0x4b,
	0x46, 0x4c, 0x48, 0x4d, 0x4d, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x4d, 0x48, 0x4f, 0x45, 0x42, 0x43, 0x4c, 0x42, 0x4e, 0x4e, 0x45, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4f, 0x4d, 0x4a, 0x50, 0x4b, 0x50, 0x4e, 0x4e, 0x4d, 0x4a,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x48, 0x47, 0x4e,
	0x45, 0x45, 0x46, 0x43, 0x41, 0x44, 0x4b, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4d, 0x4e,
	0x4b, 0x47, 0x4d, 0x4f, 0x48, 0x4b, 0x41, 0x41, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc0, 0x0d, 0x0a, 0x0b, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb7, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x75, 0x66,
	0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x4e,
	0x45, 0x42, 0x4f, 0x49, 0x48, 0x4c, 0x46, 0x4f, 0x45, 0x4f, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x43, 0x46, 0x4c, 0x4b, 0x46, 0x4c, 0x48, 0x4d, 0x4d, 0x46, 0x48,
	0x00, 0x52, 0x0b, 0x4e, 0x45, 0x42, 0x4f, 0x49, 0x48, 0x4c, 0x46, 0x4f, 0x45, 0x4f, 0x12, 0x31,
	0x0a, 0x0b, 0x45, 0x4d, 0x4d, 0x4f, 0x42, 0x4f, 0x47, 0x48, 0x45, 0x41, 0x50, 0x18, 0xbd, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x43, 0x4c, 0x42, 0x45, 0x41, 0x4a, 0x43, 0x45,
	0x4c, 0x44, 0x48, 0x00, 0x52, 0x0b, 0x45, 0x4d, 0x4d, 0x4f, 0x42, 0x4f, 0x47, 0x48, 0x45, 0x41,
	0x50, 0x12, 0x5d, 0x0a, 0x18, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xaa, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x62, 0x75, 0x66, 0x66, 0x52,
	0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf0, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x69, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b,
	0x4f, 0x48, 0x43, 0x44, 0x50, 0x4a, 0x43, 0x48, 0x4c, 0x48, 0x44, 0x18, 0xcd, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x48, 0x4d, 0x4d, 0x4a, 0x49, 0x48, 0x43, 0x4f, 0x47, 0x46,
	0x48, 0x00, 0x52, 0x0b, 0x4f, 0x48, 0x43, 0x44, 0x50, 0x4a, 0x43, 0x48, 0x4c, 0x48, 0x44, 0x12,
	0x31, 0x0a, 0x0b, 0x4c, 0x45, 0x44, 0x4d, 0x50, 0x45, 0x50, 0x4b, 0x46, 0x46, 0x4b, 0x18, 0xe2,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x47, 0x4e, 0x45, 0x45, 0x46, 0x43, 0x41,
	0x44, 0x4b, 0x4a, 0x48, 0x00, 0x52, 0x0b, 0x4c, 0x45, 0x44, 0x4d, 0x50, 0x45, 0x50, 0x4b, 0x46,
	0x46, 0x4b, 0x12, 0x31, 0x0a, 0x0b, 0x48, 0x46, 0x50, 0x43, 0x49, 0x46, 0x4c, 0x45, 0x4e, 0x4b,
	0x4c, 0x18, 0xea, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x46, 0x4c, 0x41, 0x4b,
	0x4f, 0x4f, 0x47, 0x4a, 0x4a, 0x4c, 0x48, 0x00, 0x52, 0x0b, 0x48, 0x46, 0x50, 0x43, 0x49, 0x46,
	0x4c, 0x45, 0x4e, 0x4b, 0x4c, 0x12, 0x31, 0x0a, 0x0b, 0x4c, 0x4f, 0x4e, 0x4c, 0x4a, 0x4a, 0x41,
	0x4c, 0x4e, 0x4a, 0x43, 0x18, 0x96, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x49,
	0x44, 0x42, 0x46, 0x41, 0x4b, 0x42, 0x4b, 0x4d, 0x46, 0x48, 0x00, 0x52, 0x0b, 0x4c, 0x4f, 0x4e,
	0x4c, 0x4a, 0x4a, 0x41, 0x4c, 0x4e, 0x4a, 0x43, 0x12, 0x31, 0x0a, 0x0b, 0x4c, 0x46, 0x46, 0x49,
	0x50, 0x49, 0x4a, 0x47, 0x48, 0x50, 0x49, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x4f, 0x4d, 0x4a, 0x50, 0x4b, 0x50, 0x4e, 0x4e, 0x4d, 0x4a, 0x4d, 0x48, 0x00, 0x52, 0x0b,
	0x4c, 0x46, 0x46, 0x49, 0x50, 0x49, 0x4a, 0x47, 0x48, 0x50, 0x49, 0x12, 0x60, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xee, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x16, 0x68, 0x65, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8d, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x78,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x44, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x19, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x0b, 0x41, 0x41, 0x4a, 0x43, 0x4a, 0x46, 0x41, 0x48, 0x50, 0x45, 0x48, 0x18, 0xfc, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x48, 0x4f, 0x45, 0x42, 0x43, 0x4c, 0x42, 0x4e, 0x4e,
	0x45, 0x48, 0x00, 0x52, 0x0b, 0x41, 0x41, 0x4a, 0x43, 0x4a, 0x46, 0x41, 0x48, 0x50, 0x45, 0x48,
	0x12, 0x60, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x93, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe9, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xec, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63,
	0x53, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x50, 0x4e, 0x45, 0x4d, 0x41, 0x46,
	0x48, 0x4b, 0x46, 0x49, 0x49, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x4e,
	0x4b, 0x47, 0x4d, 0x4f, 0x48, 0x4b, 0x41, 0x41, 0x50, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x4e, 0x45,
	0x4d, 0x41, 0x46, 0x48, 0x4b, 0x46, 0x49, 0x49, 0x12, 0x3e, 0x0a, 0x0b, 0x46, 0x43, 0x42, 0x45,
	0x4b, 0x4f, 0x50, 0x48, 0x46, 0x4d, 0x47, 0x18, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x46, 0x43, 0x42,
	0x45, 0x4b, 0x4f, 0x50, 0x48, 0x46, 0x4d, 0x47, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x42, 0x41, 0x48,
	0x44, 0x41, 0x49, 0x43, 0x49, 0x49, 0x48, 0x18, 0xec, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x42, 0x41,
	0x48, 0x44, 0x41, 0x49, 0x43, 0x49, 0x49, 0x48, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x43, 0x48, 0x4c,
	0x43, 0x43, 0x42, 0x47, 0x49, 0x46, 0x44, 0x18, 0xb3, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x43, 0x48,
	0x4c, 0x43, 0x43, 0x42, 0x47, 0x49, 0x46, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x46, 0x4e, 0x4a, 0x4c,
	0x50, 0x46, 0x42, 0x43, 0x4d, 0x47, 0x4a, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x49, 0x44, 0x41, 0x4d, 0x47, 0x49, 0x48, 0x4b, 0x45, 0x4f, 0x50, 0x48, 0x00, 0x52, 0x0b,
	0x46, 0x4e, 0x4a, 0x4c, 0x50, 0x46, 0x42, 0x43, 0x4d, 0x47, 0x4a, 0x12, 0x31, 0x0a, 0x0b, 0x48,
	0x45, 0x4c, 0x46, 0x47, 0x45, 0x4b, 0x47, 0x4b, 0x4b, 0x50, 0x18, 0xaf, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x44, 0x41, 0x4d, 0x47, 0x49, 0x48, 0x4b, 0x45, 0x4f, 0x50, 0x48,
	0x00, 0x52, 0x0b, 0x48, 0x45, 0x4c, 0x46, 0x47, 0x45, 0x4b, 0x47, 0x4b, 0x4b, 0x50, 0x12, 0x31,
	0x0a, 0x0b, 0x4f, 0x44, 0x41, 0x48, 0x43, 0x43, 0x42, 0x49, 0x50, 0x4e, 0x48, 0x18, 0xf6, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x44, 0x41, 0x4d, 0x47, 0x49, 0x48, 0x4b, 0x45,
	0x4f, 0x50, 0x48, 0x00, 0x52, 0x0b, 0x4f, 0x44, 0x41, 0x48, 0x43, 0x43, 0x42, 0x49, 0x50, 0x4e,
	0x48, 0x12, 0x30, 0x0a, 0x0b, 0x4f, 0x4d, 0x49, 0x45, 0x4f, 0x4b, 0x4b, 0x46, 0x43, 0x4b, 0x43,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x4f, 0x4b, 0x49, 0x4e, 0x4c, 0x4d,
	0x4c, 0x50, 0x48, 0x48, 0x48, 0x00, 0x52, 0x0b, 0x4f, 0x4d, 0x49, 0x45, 0x4f, 0x4b, 0x4b, 0x46,
	0x43, 0x4b, 0x43, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e,
	0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RogueAction_proto_rawDescOnce sync.Once
	file_RogueAction_proto_rawDescData = file_RogueAction_proto_rawDesc
)

func file_RogueAction_proto_rawDescGZIP() []byte {
	file_RogueAction_proto_rawDescOnce.Do(func() {
		file_RogueAction_proto_rawDescData = protoimpl.X.CompressGZIP(file_RogueAction_proto_rawDescData)
	})
	return file_RogueAction_proto_rawDescData
}

var file_RogueAction_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_RogueAction_proto_goTypes = []interface{}{
	(*RogueAction)(nil),                      // 0: RogueAction
	(*RogueCommonBuffSelectInfo)(nil),        // 1: RogueCommonBuffSelectInfo
	(*MCFLKFLHMMF)(nil),                      // 2: MCFLKFLHMMF
	(*MCLBEAJCELD)(nil),                      // 3: MCLBEAJCELD
	(*RogueCommonBuffReforgeSelectInfo)(nil), // 4: RogueCommonBuffReforgeSelectInfo
	(*RogueMiracleSelectInfo)(nil),           // 5: RogueMiracleSelectInfo
	(*NHMMJIHCOGF)(nil),                      // 6: NHMMJIHCOGF
	(*HGNEEFCADKJ)(nil),                      // 7: HGNEEFCADKJ
	(*IFLAKOOGJJL)(nil),                      // 8: IFLAKOOGJJL
	(*NIDBFAKBKMF)(nil),                      // 9: NIDBFAKBKMF
	(*OMJPKPNNMJM)(nil),                      // 10: OMJPKPNNMJM
	(*RogueComposeMiracleSelectInfo)(nil),    // 11: RogueComposeMiracleSelectInfo
	(*RogueHexAvatarSelectInfo)(nil),         // 12: RogueHexAvatarSelectInfo
	(*RogueBonusSelectInfo)(nil),             // 13: RogueBonusSelectInfo
	(*RogueFormulaSelectInfo)(nil),           // 14: RogueFormulaSelectInfo
	(*MHOEBCLBNNE)(nil),                      // 15: MHOEBCLBNNE
	(*RogueReforgeFormulaSelectInfo)(nil),    // 16: RogueReforgeFormulaSelectInfo
	(*RogueMagicUnitSelectInfo)(nil),         // 17: RogueMagicUnitSelectInfo
	(*RogueMagicScepterSelectInfo)(nil),      // 18: RogueMagicScepterSelectInfo
	(*MNKGMOHKAAP)(nil),                      // 19: MNKGMOHKAAP
	(*IDAMGIHKEOP)(nil),                      // 20: IDAMGIHKEOP
	(*IOKINLMLPHH)(nil),                      // 21: IOKINLMLPHH
}
var file_RogueAction_proto_depIdxs = []int32{
	1,  // 0: RogueAction.buff_select_info:type_name -> RogueCommonBuffSelectInfo
	2,  // 1: RogueAction.NEBOIHLFOEO:type_name -> MCFLKFLHMMF
	3,  // 2: RogueAction.EMMOBOGHEAP:type_name -> MCLBEAJCELD
	4,  // 3: RogueAction.buff_reforge_select_info:type_name -> RogueCommonBuffReforgeSelectInfo
	5,  // 4: RogueAction.miracle_select_info:type_name -> RogueMiracleSelectInfo
	6,  // 5: RogueAction.OHCDPJCHLHD:type_name -> NHMMJIHCOGF
	7,  // 6: RogueAction.LEDMPEPKFFK:type_name -> HGNEEFCADKJ
	8,  // 7: RogueAction.HFPCIFLENKL:type_name -> IFLAKOOGJJL
	9,  // 8: RogueAction.LONLJJALNJC:type_name -> NIDBFAKBKMF
	10, // 9: RogueAction.LFFIPIJGHPI:type_name -> OMJPKPNNMJM
	11, // 10: RogueAction.compose_miracle_select_info:type_name -> RogueComposeMiracleSelectInfo
	12, // 11: RogueAction.hex_avatar_select_info:type_name -> RogueHexAvatarSelectInfo
	13, // 12: RogueAction.bonus_select_info:type_name -> RogueBonusSelectInfo
	14, // 13: RogueAction.rogue_formula_select_info:type_name -> RogueFormulaSelectInfo
	15, // 14: RogueAction.AAJCJFAHPEH:type_name -> MHOEBCLBNNE
	16, // 15: RogueAction.reforge_formula_select_info:type_name -> RogueReforgeFormulaSelectInfo
	17, // 16: RogueAction.magic_unit_select_info:type_name -> RogueMagicUnitSelectInfo
	18, // 17: RogueAction.scepter_select_info:type_name -> RogueMagicScepterSelectInfo
	19, // 18: RogueAction.PNEMAFHKFII:type_name -> MNKGMOHKAAP
	17, // 19: RogueAction.FCBEKOPHFMG:type_name -> RogueMagicUnitSelectInfo
	17, // 20: RogueAction.PBAHDAICIIH:type_name -> RogueMagicUnitSelectInfo
	17, // 21: RogueAction.DCHLCCBGIFD:type_name -> RogueMagicUnitSelectInfo
	20, // 22: RogueAction.FNJLPFBCMGJ:type_name -> IDAMGIHKEOP
	20, // 23: RogueAction.HELFGEKGKKP:type_name -> IDAMGIHKEOP
	20, // 24: RogueAction.ODAHCCBIPNH:type_name -> IDAMGIHKEOP
	21, // 25: RogueAction.OMIEOKKFCKC:type_name -> IOKINLMLPHH
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_RogueAction_proto_init() }
func file_RogueAction_proto_init() {
	if File_RogueAction_proto != nil {
		return
	}
	file_IFLAKOOGJJL_proto_init()
	file_RogueBonusSelectInfo_proto_init()
	file_MCLBEAJCELD_proto_init()
	file_IDAMGIHKEOP_proto_init()
	file_NIDBFAKBKMF_proto_init()
	file_IOKINLMLPHH_proto_init()
	file_RogueCommonBuffReforgeSelectInfo_proto_init()
	file_NHMMJIHCOGF_proto_init()
	file_RogueMagicUnitSelectInfo_proto_init()
	file_RogueHexAvatarSelectInfo_proto_init()
	file_MCFLKFLHMMF_proto_init()
	file_RogueReforgeFormulaSelectInfo_proto_init()
	file_MHOEBCLBNNE_proto_init()
	file_OMJPKPNNMJM_proto_init()
	file_RogueMiracleSelectInfo_proto_init()
	file_RogueCommonBuffSelectInfo_proto_init()
	file_RogueComposeMiracleSelectInfo_proto_init()
	file_HGNEEFCADKJ_proto_init()
	file_RogueFormulaSelectInfo_proto_init()
	file_MNKGMOHKAAP_proto_init()
	file_RogueMagicScepterSelectInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RogueAction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_RogueAction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RogueAction_BuffSelectInfo)(nil),
		(*RogueAction_NEBOIHLFOEO)(nil),
		(*RogueAction_EMMOBOGHEAP)(nil),
		(*RogueAction_BuffReforgeSelectInfo)(nil),
		(*RogueAction_MiracleSelectInfo)(nil),
		(*RogueAction_OHCDPJCHLHD)(nil),
		(*RogueAction_LEDMPEPKFFK)(nil),
		(*RogueAction_HFPCIFLENKL)(nil),
		(*RogueAction_LONLJJALNJC)(nil),
		(*RogueAction_LFFIPIJGHPI)(nil),
		(*RogueAction_ComposeMiracleSelectInfo)(nil),
		(*RogueAction_HexAvatarSelectInfo)(nil),
		(*RogueAction_BonusSelectInfo)(nil),
		(*RogueAction_RogueFormulaSelectInfo)(nil),
		(*RogueAction_AAJCJFAHPEH)(nil),
		(*RogueAction_ReforgeFormulaSelectInfo)(nil),
		(*RogueAction_MagicUnitSelectInfo)(nil),
		(*RogueAction_ScepterSelectInfo)(nil),
		(*RogueAction_PNEMAFHKFII)(nil),
		(*RogueAction_FCBEKOPHFMG)(nil),
		(*RogueAction_PBAHDAICIIH)(nil),
		(*RogueAction_DCHLCCBGIFD)(nil),
		(*RogueAction_FNJLPFBCMGJ)(nil),
		(*RogueAction_HELFGEKGKKP)(nil),
		(*RogueAction_ODAHCCBIPNH)(nil),
		(*RogueAction_OMIEOKKFCKC)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RogueAction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RogueAction_proto_goTypes,
		DependencyIndexes: file_RogueAction_proto_depIdxs,
		MessageInfos:      file_RogueAction_proto_msgTypes,
	}.Build()
	File_RogueAction_proto = out.File
	file_RogueAction_proto_rawDesc = nil
	file_RogueAction_proto_goTypes = nil
	file_RogueAction_proto_depIdxs = nil
}
