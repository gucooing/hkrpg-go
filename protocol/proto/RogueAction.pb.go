// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: RogueAction.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RogueAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*RogueAction_BuffSelectInfo
	//	*RogueAction_DFKFJAOMNLP
	//	*RogueAction_EMCJEPOJPAI
	//	*RogueAction_BuffReforgeSelectInfo
	//	*RogueAction_MiracleSelectInfo
	//	*RogueAction_BCHBIBOMEPE
	//	*RogueAction_IALFJGKDPAK
	//	*RogueAction_IEODNFDGPOH
	//	*RogueAction_KFMEODPLFIK
	//	*RogueAction_MJGMJDLLEJP
	//	*RogueAction_ComposeMiracleSelectInfo
	//	*RogueAction_HexAvatarSelectInfo
	//	*RogueAction_BonusSelectInfo
	//	*RogueAction_RogueFormulaSelectInfo
	//	*RogueAction_PNGAAMIAKAD
	//	*RogueAction_ReforgeFormulaSelectInfo
	//	*RogueAction_MagicUnitSelectInfo
	//	*RogueAction_ScepterSelectInfo
	//	*RogueAction_KHCBEFJJMPI
	//	*RogueAction_KGFLENGNFNP
	//	*RogueAction_KGICGMLDGHD
	//	*RogueAction_EHIHHECNPGN
	//	*RogueAction_MPPOOKADLFL
	//	*RogueAction_EDDHKBBHCEN
	//	*RogueAction_KLNIIJKJEKF
	//	*RogueAction_KEBOMHDMCEA
	Action isRogueAction_Action `protobuf_oneof:"action"`
}

func (x *RogueAction) Reset() {
	*x = RogueAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RogueAction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RogueAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RogueAction) ProtoMessage() {}

func (x *RogueAction) ProtoReflect() protoreflect.Message {
	mi := &file_RogueAction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RogueAction.ProtoReflect.Descriptor instead.
func (*RogueAction) Descriptor() ([]byte, []int) {
	return file_RogueAction_proto_rawDescGZIP(), []int{0}
}

func (m *RogueAction) GetAction() isRogueAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *RogueAction) GetBuffSelectInfo() *RogueCommonBuffSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_BuffSelectInfo); ok {
		return x.BuffSelectInfo
	}
	return nil
}

func (x *RogueAction) GetDFKFJAOMNLP() *IMBNANICJLH {
	if x, ok := x.GetAction().(*RogueAction_DFKFJAOMNLP); ok {
		return x.DFKFJAOMNLP
	}
	return nil
}

func (x *RogueAction) GetEMCJEPOJPAI() *EDIOJBCALHB {
	if x, ok := x.GetAction().(*RogueAction_EMCJEPOJPAI); ok {
		return x.EMCJEPOJPAI
	}
	return nil
}

func (x *RogueAction) GetBuffReforgeSelectInfo() *RogueCommonBuffReforgeSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_BuffReforgeSelectInfo); ok {
		return x.BuffReforgeSelectInfo
	}
	return nil
}

func (x *RogueAction) GetMiracleSelectInfo() *RogueMiracleSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_MiracleSelectInfo); ok {
		return x.MiracleSelectInfo
	}
	return nil
}

func (x *RogueAction) GetBCHBIBOMEPE() *BOEHIOPOPAF {
	if x, ok := x.GetAction().(*RogueAction_BCHBIBOMEPE); ok {
		return x.BCHBIBOMEPE
	}
	return nil
}

func (x *RogueAction) GetIALFJGKDPAK() *PBBBGAMJGID {
	if x, ok := x.GetAction().(*RogueAction_IALFJGKDPAK); ok {
		return x.IALFJGKDPAK
	}
	return nil
}

func (x *RogueAction) GetIEODNFDGPOH() *FBGCMFJANMH {
	if x, ok := x.GetAction().(*RogueAction_IEODNFDGPOH); ok {
		return x.IEODNFDGPOH
	}
	return nil
}

func (x *RogueAction) GetKFMEODPLFIK() *PIMBOBLCAJF {
	if x, ok := x.GetAction().(*RogueAction_KFMEODPLFIK); ok {
		return x.KFMEODPLFIK
	}
	return nil
}

func (x *RogueAction) GetMJGMJDLLEJP() *EEDHHFNHLBH {
	if x, ok := x.GetAction().(*RogueAction_MJGMJDLLEJP); ok {
		return x.MJGMJDLLEJP
	}
	return nil
}

func (x *RogueAction) GetComposeMiracleSelectInfo() *RogueComposeMiracleSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_ComposeMiracleSelectInfo); ok {
		return x.ComposeMiracleSelectInfo
	}
	return nil
}

func (x *RogueAction) GetHexAvatarSelectInfo() *RogueHexAvatarSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_HexAvatarSelectInfo); ok {
		return x.HexAvatarSelectInfo
	}
	return nil
}

func (x *RogueAction) GetBonusSelectInfo() *RogueBonusSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_BonusSelectInfo); ok {
		return x.BonusSelectInfo
	}
	return nil
}

func (x *RogueAction) GetRogueFormulaSelectInfo() *RogueFormulaSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_RogueFormulaSelectInfo); ok {
		return x.RogueFormulaSelectInfo
	}
	return nil
}

func (x *RogueAction) GetPNGAAMIAKAD() *BGCNBANPDDM {
	if x, ok := x.GetAction().(*RogueAction_PNGAAMIAKAD); ok {
		return x.PNGAAMIAKAD
	}
	return nil
}

func (x *RogueAction) GetReforgeFormulaSelectInfo() *RogueReforgeFormulaSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_ReforgeFormulaSelectInfo); ok {
		return x.ReforgeFormulaSelectInfo
	}
	return nil
}

func (x *RogueAction) GetMagicUnitSelectInfo() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_MagicUnitSelectInfo); ok {
		return x.MagicUnitSelectInfo
	}
	return nil
}

func (x *RogueAction) GetScepterSelectInfo() *RogueMagicScepterSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_ScepterSelectInfo); ok {
		return x.ScepterSelectInfo
	}
	return nil
}

func (x *RogueAction) GetKHCBEFJJMPI() *JDGBFNHLADP {
	if x, ok := x.GetAction().(*RogueAction_KHCBEFJJMPI); ok {
		return x.KHCBEFJJMPI
	}
	return nil
}

func (x *RogueAction) GetKGFLENGNFNP() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_KGFLENGNFNP); ok {
		return x.KGFLENGNFNP
	}
	return nil
}

func (x *RogueAction) GetKGICGMLDGHD() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_KGICGMLDGHD); ok {
		return x.KGICGMLDGHD
	}
	return nil
}

func (x *RogueAction) GetEHIHHECNPGN() *RogueMagicUnitSelectInfo {
	if x, ok := x.GetAction().(*RogueAction_EHIHHECNPGN); ok {
		return x.EHIHHECNPGN
	}
	return nil
}

func (x *RogueAction) GetMPPOOKADLFL() *CBDOEBJHECH {
	if x, ok := x.GetAction().(*RogueAction_MPPOOKADLFL); ok {
		return x.MPPOOKADLFL
	}
	return nil
}

func (x *RogueAction) GetEDDHKBBHCEN() *CBDOEBJHECH {
	if x, ok := x.GetAction().(*RogueAction_EDDHKBBHCEN); ok {
		return x.EDDHKBBHCEN
	}
	return nil
}

func (x *RogueAction) GetKLNIIJKJEKF() *CBDOEBJHECH {
	if x, ok := x.GetAction().(*RogueAction_KLNIIJKJEKF); ok {
		return x.KLNIIJKJEKF
	}
	return nil
}

func (x *RogueAction) GetKEBOMHDMCEA() *PIKBKJJKHBP {
	if x, ok := x.GetAction().(*RogueAction_KEBOMHDMCEA); ok {
		return x.KEBOMHDMCEA
	}
	return nil
}

type isRogueAction_Action interface {
	isRogueAction_Action()
}

type RogueAction_BuffSelectInfo struct {
	BuffSelectInfo *RogueCommonBuffSelectInfo `protobuf:"bytes,112,opt,name=buff_select_info,json=buffSelectInfo,proto3,oneof"`
}

type RogueAction_DFKFJAOMNLP struct {
	DFKFJAOMNLP *IMBNANICJLH `protobuf:"bytes,1827,opt,name=DFKFJAOMNLP,proto3,oneof"`
}

type RogueAction_EMCJEPOJPAI struct {
	EMCJEPOJPAI *EDIOJBCALHB `protobuf:"bytes,654,opt,name=EMCJEPOJPAI,proto3,oneof"`
}

type RogueAction_BuffReforgeSelectInfo struct {
	BuffReforgeSelectInfo *RogueCommonBuffReforgeSelectInfo `protobuf:"bytes,1578,opt,name=buff_reforge_select_info,json=buffReforgeSelectInfo,proto3,oneof"`
}

type RogueAction_MiracleSelectInfo struct {
	MiracleSelectInfo *RogueMiracleSelectInfo `protobuf:"bytes,1714,opt,name=miracle_select_info,json=miracleSelectInfo,proto3,oneof"`
}

type RogueAction_BCHBIBOMEPE struct {
	BCHBIBOMEPE *BOEHIOPOPAF `protobuf:"bytes,571,opt,name=BCHBIBOMEPE,proto3,oneof"`
}

type RogueAction_IALFJGKDPAK struct {
	IALFJGKDPAK *PBBBGAMJGID `protobuf:"bytes,868,opt,name=IALFJGKDPAK,proto3,oneof"`
}

type RogueAction_IEODNFDGPOH struct {
	IEODNFDGPOH *FBGCMFJANMH `protobuf:"bytes,1036,opt,name=IEODNFDGPOH,proto3,oneof"`
}

type RogueAction_KFMEODPLFIK struct {
	KFMEODPLFIK *PIMBOBLCAJF `protobuf:"bytes,557,opt,name=KFMEODPLFIK,proto3,oneof"`
}

type RogueAction_MJGMJDLLEJP struct {
	MJGMJDLLEJP *EEDHHFNHLBH `protobuf:"bytes,1150,opt,name=MJGMJDLLEJP,proto3,oneof"`
}

type RogueAction_ComposeMiracleSelectInfo struct {
	ComposeMiracleSelectInfo *RogueComposeMiracleSelectInfo `protobuf:"bytes,57,opt,name=compose_miracle_select_info,json=composeMiracleSelectInfo,proto3,oneof"`
}

type RogueAction_HexAvatarSelectInfo struct {
	HexAvatarSelectInfo *RogueHexAvatarSelectInfo `protobuf:"bytes,1260,opt,name=hex_avatar_select_info,json=hexAvatarSelectInfo,proto3,oneof"`
}

type RogueAction_BonusSelectInfo struct {
	BonusSelectInfo *RogueBonusSelectInfo `protobuf:"bytes,850,opt,name=bonus_select_info,json=bonusSelectInfo,proto3,oneof"`
}

type RogueAction_RogueFormulaSelectInfo struct {
	RogueFormulaSelectInfo *RogueFormulaSelectInfo `protobuf:"bytes,894,opt,name=rogue_formula_select_info,json=rogueFormulaSelectInfo,proto3,oneof"`
}

type RogueAction_PNGAAMIAKAD struct {
	PNGAAMIAKAD *BGCNBANPDDM `protobuf:"bytes,1713,opt,name=PNGAAMIAKAD,proto3,oneof"`
}

type RogueAction_ReforgeFormulaSelectInfo struct {
	ReforgeFormulaSelectInfo *RogueReforgeFormulaSelectInfo `protobuf:"bytes,2041,opt,name=reforge_formula_select_info,json=reforgeFormulaSelectInfo,proto3,oneof"`
}

type RogueAction_MagicUnitSelectInfo struct {
	MagicUnitSelectInfo *RogueMagicUnitSelectInfo `protobuf:"bytes,50,opt,name=magic_unit_select_info,json=magicUnitSelectInfo,proto3,oneof"`
}

type RogueAction_ScepterSelectInfo struct {
	ScepterSelectInfo *RogueMagicScepterSelectInfo `protobuf:"bytes,268,opt,name=scepter_select_info,json=scepterSelectInfo,proto3,oneof"`
}

type RogueAction_KHCBEFJJMPI struct {
	KHCBEFJJMPI *JDGBFNHLADP `protobuf:"bytes,1404,opt,name=KHCBEFJJMPI,proto3,oneof"`
}

type RogueAction_KGFLENGNFNP struct {
	KGFLENGNFNP *RogueMagicUnitSelectInfo `protobuf:"bytes,424,opt,name=KGFLENGNFNP,proto3,oneof"`
}

type RogueAction_KGICGMLDGHD struct {
	KGICGMLDGHD *RogueMagicUnitSelectInfo `protobuf:"bytes,1121,opt,name=KGICGMLDGHD,proto3,oneof"`
}

type RogueAction_EHIHHECNPGN struct {
	EHIHHECNPGN *RogueMagicUnitSelectInfo `protobuf:"bytes,431,opt,name=EHIHHECNPGN,proto3,oneof"`
}

type RogueAction_MPPOOKADLFL struct {
	MPPOOKADLFL *CBDOEBJHECH `protobuf:"bytes,1590,opt,name=MPPOOKADLFL,proto3,oneof"`
}

type RogueAction_EDDHKBBHCEN struct {
	EDDHKBBHCEN *CBDOEBJHECH `protobuf:"bytes,921,opt,name=EDDHKBBHCEN,proto3,oneof"`
}

type RogueAction_KLNIIJKJEKF struct {
	KLNIIJKJEKF *CBDOEBJHECH `protobuf:"bytes,1290,opt,name=KLNIIJKJEKF,proto3,oneof"`
}

type RogueAction_KEBOMHDMCEA struct {
	KEBOMHDMCEA *PIKBKJJKHBP `protobuf:"bytes,463,opt,name=KEBOMHDMCEA,proto3,oneof"`
}

func (*RogueAction_BuffSelectInfo) isRogueAction_Action() {}

func (*RogueAction_DFKFJAOMNLP) isRogueAction_Action() {}

func (*RogueAction_EMCJEPOJPAI) isRogueAction_Action() {}

func (*RogueAction_BuffReforgeSelectInfo) isRogueAction_Action() {}

func (*RogueAction_MiracleSelectInfo) isRogueAction_Action() {}

func (*RogueAction_BCHBIBOMEPE) isRogueAction_Action() {}

func (*RogueAction_IALFJGKDPAK) isRogueAction_Action() {}

func (*RogueAction_IEODNFDGPOH) isRogueAction_Action() {}

func (*RogueAction_KFMEODPLFIK) isRogueAction_Action() {}

func (*RogueAction_MJGMJDLLEJP) isRogueAction_Action() {}

func (*RogueAction_ComposeMiracleSelectInfo) isRogueAction_Action() {}

func (*RogueAction_HexAvatarSelectInfo) isRogueAction_Action() {}

func (*RogueAction_BonusSelectInfo) isRogueAction_Action() {}

func (*RogueAction_RogueFormulaSelectInfo) isRogueAction_Action() {}

func (*RogueAction_PNGAAMIAKAD) isRogueAction_Action() {}

func (*RogueAction_ReforgeFormulaSelectInfo) isRogueAction_Action() {}

func (*RogueAction_MagicUnitSelectInfo) isRogueAction_Action() {}

func (*RogueAction_ScepterSelectInfo) isRogueAction_Action() {}

func (*RogueAction_KHCBEFJJMPI) isRogueAction_Action() {}

func (*RogueAction_KGFLENGNFNP) isRogueAction_Action() {}

func (*RogueAction_KGICGMLDGHD) isRogueAction_Action() {}

func (*RogueAction_EHIHHECNPGN) isRogueAction_Action() {}

func (*RogueAction_MPPOOKADLFL) isRogueAction_Action() {}

func (*RogueAction_EDDHKBBHCEN) isRogueAction_Action() {}

func (*RogueAction_KLNIIJKJEKF) isRogueAction_Action() {}

func (*RogueAction_KEBOMHDMCEA) isRogueAction_Action() {}

var File_RogueAction_proto protoreflect.FileDescriptor

var file_RogueAction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x49, 0x4d, 0x42, 0x4f, 0x42, 0x4c, 0x43, 0x41, 0x4a, 0x46,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x43, 0x42, 0x44, 0x4f, 0x45, 0x42, 0x4a,
	0x48, 0x45, 0x43, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x42, 0x42, 0x42,
	0x47, 0x41, 0x4d, 0x4a, 0x47, 0x49, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50,
	0x49, 0x4b, 0x42, 0x4b, 0x4a, 0x4a, 0x4b, 0x48, 0x42, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x42, 0x4f, 0x45, 0x48, 0x49, 0x4f, 0x50, 0x4f, 0x50, 0x41, 0x46, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4a, 0x44, 0x47, 0x42, 0x46, 0x4e, 0x48, 0x4c, 0x41, 0x44,
	0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x52, 0x6f,
	0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x46, 0x42, 0x47, 0x43, 0x4d, 0x46, 0x4a, 0x41, 0x4e, 0x4d,
	0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x45, 0x45, 0x44, 0x48, 0x48, 0x46, 0x4e,
	0x48, 0x4c, 0x42, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x49, 0x4d, 0x42, 0x4e,
	0x41, 0x4e, 0x49, 0x43, 0x4a, 0x4c, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x42,
	0x47, 0x43, 0x4e, 0x42, 0x41, 0x4e, 0x50, 0x44, 0x44, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x45, 0x44, 0x49, 0x4f, 0x4a, 0x42, 0x43, 0x41, 0x4c, 0x48, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb7, 0x0d, 0x0a, 0x0b, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x44, 0x46,
	0x4b, 0x46, 0x4a, 0x41, 0x4f, 0x4d, 0x4e, 0x4c, 0x50, 0x18, 0xa3, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x49, 0x4d, 0x42, 0x4e, 0x41, 0x4e, 0x49, 0x43, 0x4a, 0x4c, 0x48, 0x48, 0x00,
	0x52, 0x0b, 0x44, 0x46, 0x4b, 0x46, 0x4a, 0x41, 0x4f, 0x4d, 0x4e, 0x4c, 0x50, 0x12, 0x31, 0x0a,
	0x0b, 0x45, 0x4d, 0x43, 0x4a, 0x45, 0x50, 0x4f, 0x4a, 0x50, 0x41, 0x49, 0x18, 0x8e, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x44, 0x49, 0x4f, 0x4a, 0x42, 0x43, 0x41, 0x4c, 0x48,
	0x42, 0x48, 0x00, 0x52, 0x0b, 0x45, 0x4d, 0x43, 0x4a, 0x45, 0x50, 0x4f, 0x4a, 0x50, 0x41, 0x49,
	0x12, 0x5d, 0x0a, 0x18, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xaa, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x62, 0x75, 0x66, 0x66, 0x52, 0x65,
	0x66, 0x6f, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xb2, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x42,
	0x43, 0x48, 0x42, 0x49, 0x42, 0x4f, 0x4d, 0x45, 0x50, 0x45, 0x18, 0xbb, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x4f, 0x45, 0x48, 0x49, 0x4f, 0x50, 0x4f, 0x50, 0x41, 0x46, 0x48,
	0x00, 0x52, 0x0b, 0x42, 0x43, 0x48, 0x42, 0x49, 0x42, 0x4f, 0x4d, 0x45, 0x50, 0x45, 0x12, 0x31,
	0x0a, 0x0b, 0x49, 0x41, 0x4c, 0x46, 0x4a, 0x47, 0x4b, 0x44, 0x50, 0x41, 0x4b, 0x18, 0xe4, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x42, 0x42, 0x42, 0x47, 0x41, 0x4d, 0x4a, 0x47,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x0b, 0x49, 0x41, 0x4c, 0x46, 0x4a, 0x47, 0x4b, 0x44, 0x50, 0x41,
	0x4b, 0x12, 0x31, 0x0a, 0x0b, 0x49, 0x45, 0x4f, 0x44, 0x4e, 0x46, 0x44, 0x47, 0x50, 0x4f, 0x48,
	0x18, 0x8c, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x42, 0x47, 0x43, 0x4d, 0x46,
	0x4a, 0x41, 0x4e, 0x4d, 0x48, 0x48, 0x00, 0x52, 0x0b, 0x49, 0x45, 0x4f, 0x44, 0x4e, 0x46, 0x44,
	0x47, 0x50, 0x4f, 0x48, 0x12, 0x31, 0x0a, 0x0b, 0x4b, 0x46, 0x4d, 0x45, 0x4f, 0x44, 0x50, 0x4c,
	0x46, 0x49, 0x4b, 0x18, 0xad, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x49, 0x4d,
	0x42, 0x4f, 0x42, 0x4c, 0x43, 0x41, 0x4a, 0x46, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x46, 0x4d, 0x45,
	0x4f, 0x44, 0x50, 0x4c, 0x46, 0x49, 0x4b, 0x12, 0x31, 0x0a, 0x0b, 0x4d, 0x4a, 0x47, 0x4d, 0x4a,
	0x44, 0x4c, 0x4c, 0x45, 0x4a, 0x50, 0x18, 0xfe, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x45, 0x45, 0x44, 0x48, 0x48, 0x46, 0x4e, 0x48, 0x4c, 0x42, 0x48, 0x48, 0x00, 0x52, 0x0b, 0x4d,
	0x4a, 0x47, 0x4d, 0x4a, 0x44, 0x4c, 0x4c, 0x45, 0x4a, 0x50, 0x12, 0x5f, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x69,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x16, 0x68,
	0x65, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xec, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x48, 0x65, 0x78, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x78, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44,
	0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xd2, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x6f, 0x67,
	0x75, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x19, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xfe, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x16, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x50,
	0x4e, 0x47, 0x41, 0x41, 0x4d, 0x49, 0x41, 0x4b, 0x41, 0x44, 0x18, 0xb1, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x47, 0x43, 0x4e, 0x42, 0x41, 0x4e, 0x50, 0x44, 0x44, 0x4d, 0x48,
	0x00, 0x52, 0x0b, 0x50, 0x4e, 0x47, 0x41, 0x41, 0x4d, 0x49, 0x41, 0x4b, 0x41, 0x44, 0x12, 0x60,
	0x0a, 0x1b, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xf9, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x52, 0x65, 0x66, 0x6f,
	0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x50, 0x0a, 0x16, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8c, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0b, 0x4b, 0x48, 0x43, 0x42, 0x45, 0x46, 0x4a, 0x4a, 0x4d,
	0x50, 0x49, 0x18, 0xfc, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4a, 0x44, 0x47, 0x42,
	0x46, 0x4e, 0x48, 0x4c, 0x41, 0x44, 0x50, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x48, 0x43, 0x42, 0x45,
	0x46, 0x4a, 0x4a, 0x4d, 0x50, 0x49, 0x12, 0x3e, 0x0a, 0x0b, 0x4b, 0x47, 0x46, 0x4c, 0x45, 0x4e,
	0x47, 0x4e, 0x46, 0x4e, 0x50, 0x18, 0xa8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x47, 0x46, 0x4c, 0x45,
	0x4e, 0x47, 0x4e, 0x46, 0x4e, 0x50, 0x12, 0x3e, 0x0a, 0x0b, 0x4b, 0x47, 0x49, 0x43, 0x47, 0x4d,
	0x4c, 0x44, 0x47, 0x48, 0x44, 0x18, 0xe1, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x47, 0x49, 0x43, 0x47,
	0x4d, 0x4c, 0x44, 0x47, 0x48, 0x44, 0x12, 0x3e, 0x0a, 0x0b, 0x45, 0x48, 0x49, 0x48, 0x48, 0x45,
	0x43, 0x4e, 0x50, 0x47, 0x4e, 0x18, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x6f, 0x67, 0x75, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x45, 0x48, 0x49, 0x48, 0x48,
	0x45, 0x43, 0x4e, 0x50, 0x47, 0x4e, 0x12, 0x31, 0x0a, 0x0b, 0x4d, 0x50, 0x50, 0x4f, 0x4f, 0x4b,
	0x41, 0x44, 0x4c, 0x46, 0x4c, 0x18, 0xb6, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x42, 0x44, 0x4f, 0x45, 0x42, 0x4a, 0x48, 0x45, 0x43, 0x48, 0x48, 0x00, 0x52, 0x0b, 0x4d, 0x50,
	0x50, 0x4f, 0x4f, 0x4b, 0x41, 0x44, 0x4c, 0x46, 0x4c, 0x12, 0x31, 0x0a, 0x0b, 0x45, 0x44, 0x44,
	0x48, 0x4b, 0x42, 0x42, 0x48, 0x43, 0x45, 0x4e, 0x18, 0x99, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x43, 0x42, 0x44, 0x4f, 0x45, 0x42, 0x4a, 0x48, 0x45, 0x43, 0x48, 0x48, 0x00, 0x52,
	0x0b, 0x45, 0x44, 0x44, 0x48, 0x4b, 0x42, 0x42, 0x48, 0x43, 0x45, 0x4e, 0x12, 0x31, 0x0a, 0x0b,
	0x4b, 0x4c, 0x4e, 0x49, 0x49, 0x4a, 0x4b, 0x4a, 0x45, 0x4b, 0x46, 0x18, 0x8a, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x42, 0x44, 0x4f, 0x45, 0x42, 0x4a, 0x48, 0x45, 0x43, 0x48,
	0x48, 0x00, 0x52, 0x0b, 0x4b, 0x4c, 0x4e, 0x49, 0x49, 0x4a, 0x4b, 0x4a, 0x45, 0x4b, 0x46, 0x12,
	0x31, 0x0a, 0x0b, 0x4b, 0x45, 0x42, 0x4f, 0x4d, 0x48, 0x44, 0x4d, 0x43, 0x45, 0x41, 0x18, 0xcf,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x49, 0x4b, 0x42, 0x4b, 0x4a, 0x4a, 0x4b,
	0x48, 0x42, 0x50, 0x48, 0x00, 0x52, 0x0b, 0x4b, 0x45, 0x42, 0x4f, 0x4d, 0x48, 0x44, 0x4d, 0x43,
	0x45, 0x41, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2e, 0x5a, 0x0e,
	0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02,
	0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RogueAction_proto_rawDescOnce sync.Once
	file_RogueAction_proto_rawDescData = file_RogueAction_proto_rawDesc
)

func file_RogueAction_proto_rawDescGZIP() []byte {
	file_RogueAction_proto_rawDescOnce.Do(func() {
		file_RogueAction_proto_rawDescData = protoimpl.X.CompressGZIP(file_RogueAction_proto_rawDescData)
	})
	return file_RogueAction_proto_rawDescData
}

var file_RogueAction_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_RogueAction_proto_goTypes = []interface{}{
	(*RogueAction)(nil),                      // 0: RogueAction
	(*RogueCommonBuffSelectInfo)(nil),        // 1: RogueCommonBuffSelectInfo
	(*IMBNANICJLH)(nil),                      // 2: IMBNANICJLH
	(*EDIOJBCALHB)(nil),                      // 3: EDIOJBCALHB
	(*RogueCommonBuffReforgeSelectInfo)(nil), // 4: RogueCommonBuffReforgeSelectInfo
	(*RogueMiracleSelectInfo)(nil),           // 5: RogueMiracleSelectInfo
	(*BOEHIOPOPAF)(nil),                      // 6: BOEHIOPOPAF
	(*PBBBGAMJGID)(nil),                      // 7: PBBBGAMJGID
	(*FBGCMFJANMH)(nil),                      // 8: FBGCMFJANMH
	(*PIMBOBLCAJF)(nil),                      // 9: PIMBOBLCAJF
	(*EEDHHFNHLBH)(nil),                      // 10: EEDHHFNHLBH
	(*RogueComposeMiracleSelectInfo)(nil),    // 11: RogueComposeMiracleSelectInfo
	(*RogueHexAvatarSelectInfo)(nil),         // 12: RogueHexAvatarSelectInfo
	(*RogueBonusSelectInfo)(nil),             // 13: RogueBonusSelectInfo
	(*RogueFormulaSelectInfo)(nil),           // 14: RogueFormulaSelectInfo
	(*BGCNBANPDDM)(nil),                      // 15: BGCNBANPDDM
	(*RogueReforgeFormulaSelectInfo)(nil),    // 16: RogueReforgeFormulaSelectInfo
	(*RogueMagicUnitSelectInfo)(nil),         // 17: RogueMagicUnitSelectInfo
	(*RogueMagicScepterSelectInfo)(nil),      // 18: RogueMagicScepterSelectInfo
	(*JDGBFNHLADP)(nil),                      // 19: JDGBFNHLADP
	(*CBDOEBJHECH)(nil),                      // 20: CBDOEBJHECH
	(*PIKBKJJKHBP)(nil),                      // 21: PIKBKJJKHBP
}
var file_RogueAction_proto_depIdxs = []int32{
	1,  // 0: RogueAction.buff_select_info:type_name -> RogueCommonBuffSelectInfo
	2,  // 1: RogueAction.DFKFJAOMNLP:type_name -> IMBNANICJLH
	3,  // 2: RogueAction.EMCJEPOJPAI:type_name -> EDIOJBCALHB
	4,  // 3: RogueAction.buff_reforge_select_info:type_name -> RogueCommonBuffReforgeSelectInfo
	5,  // 4: RogueAction.miracle_select_info:type_name -> RogueMiracleSelectInfo
	6,  // 5: RogueAction.BCHBIBOMEPE:type_name -> BOEHIOPOPAF
	7,  // 6: RogueAction.IALFJGKDPAK:type_name -> PBBBGAMJGID
	8,  // 7: RogueAction.IEODNFDGPOH:type_name -> FBGCMFJANMH
	9,  // 8: RogueAction.KFMEODPLFIK:type_name -> PIMBOBLCAJF
	10, // 9: RogueAction.MJGMJDLLEJP:type_name -> EEDHHFNHLBH
	11, // 10: RogueAction.compose_miracle_select_info:type_name -> RogueComposeMiracleSelectInfo
	12, // 11: RogueAction.hex_avatar_select_info:type_name -> RogueHexAvatarSelectInfo
	13, // 12: RogueAction.bonus_select_info:type_name -> RogueBonusSelectInfo
	14, // 13: RogueAction.rogue_formula_select_info:type_name -> RogueFormulaSelectInfo
	15, // 14: RogueAction.PNGAAMIAKAD:type_name -> BGCNBANPDDM
	16, // 15: RogueAction.reforge_formula_select_info:type_name -> RogueReforgeFormulaSelectInfo
	17, // 16: RogueAction.magic_unit_select_info:type_name -> RogueMagicUnitSelectInfo
	18, // 17: RogueAction.scepter_select_info:type_name -> RogueMagicScepterSelectInfo
	19, // 18: RogueAction.KHCBEFJJMPI:type_name -> JDGBFNHLADP
	17, // 19: RogueAction.KGFLENGNFNP:type_name -> RogueMagicUnitSelectInfo
	17, // 20: RogueAction.KGICGMLDGHD:type_name -> RogueMagicUnitSelectInfo
	17, // 21: RogueAction.EHIHHECNPGN:type_name -> RogueMagicUnitSelectInfo
	20, // 22: RogueAction.MPPOOKADLFL:type_name -> CBDOEBJHECH
	20, // 23: RogueAction.EDDHKBBHCEN:type_name -> CBDOEBJHECH
	20, // 24: RogueAction.KLNIIJKJEKF:type_name -> CBDOEBJHECH
	21, // 25: RogueAction.KEBOMHDMCEA:type_name -> PIKBKJJKHBP
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_RogueAction_proto_init() }
func file_RogueAction_proto_init() {
	if File_RogueAction_proto != nil {
		return
	}
	file_PIMBOBLCAJF_proto_init()
	file_RogueBonusSelectInfo_proto_init()
	file_RogueComposeMiracleSelectInfo_proto_init()
	file_CBDOEBJHECH_proto_init()
	file_PBBBGAMJGID_proto_init()
	file_PIKBKJJKHBP_proto_init()
	file_BOEHIOPOPAF_proto_init()
	file_RogueMagicUnitSelectInfo_proto_init()
	file_RogueFormulaSelectInfo_proto_init()
	file_RogueMagicScepterSelectInfo_proto_init()
	file_JDGBFNHLADP_proto_init()
	file_RogueReforgeFormulaSelectInfo_proto_init()
	file_RogueCommonBuffReforgeSelectInfo_proto_init()
	file_FBGCMFJANMH_proto_init()
	file_EEDHHFNHLBH_proto_init()
	file_IMBNANICJLH_proto_init()
	file_RogueHexAvatarSelectInfo_proto_init()
	file_BGCNBANPDDM_proto_init()
	file_RogueMiracleSelectInfo_proto_init()
	file_EDIOJBCALHB_proto_init()
	file_RogueCommonBuffSelectInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RogueAction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RogueAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_RogueAction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RogueAction_BuffSelectInfo)(nil),
		(*RogueAction_DFKFJAOMNLP)(nil),
		(*RogueAction_EMCJEPOJPAI)(nil),
		(*RogueAction_BuffReforgeSelectInfo)(nil),
		(*RogueAction_MiracleSelectInfo)(nil),
		(*RogueAction_BCHBIBOMEPE)(nil),
		(*RogueAction_IALFJGKDPAK)(nil),
		(*RogueAction_IEODNFDGPOH)(nil),
		(*RogueAction_KFMEODPLFIK)(nil),
		(*RogueAction_MJGMJDLLEJP)(nil),
		(*RogueAction_ComposeMiracleSelectInfo)(nil),
		(*RogueAction_HexAvatarSelectInfo)(nil),
		(*RogueAction_BonusSelectInfo)(nil),
		(*RogueAction_RogueFormulaSelectInfo)(nil),
		(*RogueAction_PNGAAMIAKAD)(nil),
		(*RogueAction_ReforgeFormulaSelectInfo)(nil),
		(*RogueAction_MagicUnitSelectInfo)(nil),
		(*RogueAction_ScepterSelectInfo)(nil),
		(*RogueAction_KHCBEFJJMPI)(nil),
		(*RogueAction_KGFLENGNFNP)(nil),
		(*RogueAction_KGICGMLDGHD)(nil),
		(*RogueAction_EHIHHECNPGN)(nil),
		(*RogueAction_MPPOOKADLFL)(nil),
		(*RogueAction_EDDHKBBHCEN)(nil),
		(*RogueAction_KLNIIJKJEKF)(nil),
		(*RogueAction_KEBOMHDMCEA)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RogueAction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RogueAction_proto_goTypes,
		DependencyIndexes: file_RogueAction_proto_depIdxs,
		MessageInfos:      file_RogueAction_proto_msgTypes,
	}.Build()
	File_RogueAction_proto = out.File
	file_RogueAction_proto_rawDesc = nil
	file_RogueAction_proto_goTypes = nil
	file_RogueAction_proto_depIdxs = nil
}
