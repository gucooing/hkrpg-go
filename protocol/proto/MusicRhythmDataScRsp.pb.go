// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: MusicRhythmDataScRsp.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MusicRhythmDataScRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retcode         uint32              `protobuf:"varint,13,opt,name=retcode,proto3" json:"retcode,omitempty"`
	MusicLevel      []*MusicRhythmLevel `protobuf:"bytes,10,rep,name=music_level,json=musicLevel,proto3" json:"music_level,omitempty"`
	UnlockPhaseList []uint32            `protobuf:"varint,2,rep,packed,name=unlock_phase_list,json=unlockPhaseList,proto3" json:"unlock_phase_list,omitempty"` // 12 14
	CurLevelId      uint32              `protobuf:"varint,5,opt,name=cur_level_id,json=curLevelId,proto3" json:"cur_level_id,omitempty"`
	CurSongId       uint32              `protobuf:"varint,7,opt,name=cur_song_id,json=curSongId,proto3" json:"cur_song_id,omitempty"`
	MusicGroup      []*MusicRhythmGroup `protobuf:"bytes,3,rep,name=music_group,json=musicGroup,proto3" json:"music_group,omitempty"`
	ShowHint        bool                `protobuf:"varint,4,opt,name=show_hint,json=showHint,proto3" json:"show_hint,omitempty"`
	UnlockSongList  []uint32            `protobuf:"varint,12,rep,packed,name=unlock_song_list,json=unlockSongList,proto3" json:"unlock_song_list,omitempty"`    // 2 14
	UnlockTrackList []uint32            `protobuf:"varint,14,rep,packed,name=unlock_track_list,json=unlockTrackList,proto3" json:"unlock_track_list,omitempty"` // 2 12
}

func (x *MusicRhythmDataScRsp) Reset() {
	*x = MusicRhythmDataScRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MusicRhythmDataScRsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicRhythmDataScRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicRhythmDataScRsp) ProtoMessage() {}

func (x *MusicRhythmDataScRsp) ProtoReflect() protoreflect.Message {
	mi := &file_MusicRhythmDataScRsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicRhythmDataScRsp.ProtoReflect.Descriptor instead.
func (*MusicRhythmDataScRsp) Descriptor() ([]byte, []int) {
	return file_MusicRhythmDataScRsp_proto_rawDescGZIP(), []int{0}
}

func (x *MusicRhythmDataScRsp) GetRetcode() uint32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *MusicRhythmDataScRsp) GetMusicLevel() []*MusicRhythmLevel {
	if x != nil {
		return x.MusicLevel
	}
	return nil
}

func (x *MusicRhythmDataScRsp) GetUnlockPhaseList() []uint32 {
	if x != nil {
		return x.UnlockPhaseList
	}
	return nil
}

func (x *MusicRhythmDataScRsp) GetCurLevelId() uint32 {
	if x != nil {
		return x.CurLevelId
	}
	return 0
}

func (x *MusicRhythmDataScRsp) GetCurSongId() uint32 {
	if x != nil {
		return x.CurSongId
	}
	return 0
}

func (x *MusicRhythmDataScRsp) GetMusicGroup() []*MusicRhythmGroup {
	if x != nil {
		return x.MusicGroup
	}
	return nil
}

func (x *MusicRhythmDataScRsp) GetShowHint() bool {
	if x != nil {
		return x.ShowHint
	}
	return false
}

func (x *MusicRhythmDataScRsp) GetUnlockSongList() []uint32 {
	if x != nil {
		return x.UnlockSongList
	}
	return nil
}

func (x *MusicRhythmDataScRsp) GetUnlockTrackList() []uint32 {
	if x != nil {
		return x.UnlockTrackList
	}
	return nil
}

var File_MusicRhythmDataScRsp_proto protoreflect.FileDescriptor

var file_MusicRhythmDataScRsp_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x63, 0x52, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x02, 0x0a,
	0x14, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74, 0x68, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x63, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x68, 0x79, 0x74,
	0x68, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x53, 0x6f, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x68,
	0x79, 0x74, 0x68, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_MusicRhythmDataScRsp_proto_rawDescOnce sync.Once
	file_MusicRhythmDataScRsp_proto_rawDescData = file_MusicRhythmDataScRsp_proto_rawDesc
)

func file_MusicRhythmDataScRsp_proto_rawDescGZIP() []byte {
	file_MusicRhythmDataScRsp_proto_rawDescOnce.Do(func() {
		file_MusicRhythmDataScRsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_MusicRhythmDataScRsp_proto_rawDescData)
	})
	return file_MusicRhythmDataScRsp_proto_rawDescData
}

var file_MusicRhythmDataScRsp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_MusicRhythmDataScRsp_proto_goTypes = []interface{}{
	(*MusicRhythmDataScRsp)(nil), // 0: MusicRhythmDataScRsp
	(*MusicRhythmLevel)(nil),     // 1: MusicRhythmLevel
	(*MusicRhythmGroup)(nil),     // 2: MusicRhythmGroup
}
var file_MusicRhythmDataScRsp_proto_depIdxs = []int32{
	1, // 0: MusicRhythmDataScRsp.music_level:type_name -> MusicRhythmLevel
	2, // 1: MusicRhythmDataScRsp.music_group:type_name -> MusicRhythmGroup
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_MusicRhythmDataScRsp_proto_init() }
func file_MusicRhythmDataScRsp_proto_init() {
	if File_MusicRhythmDataScRsp_proto != nil {
		return
	}
	file_MusicRhythmGroup_proto_init()
	file_MusicRhythmLevel_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MusicRhythmDataScRsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicRhythmDataScRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MusicRhythmDataScRsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MusicRhythmDataScRsp_proto_goTypes,
		DependencyIndexes: file_MusicRhythmDataScRsp_proto_depIdxs,
		MessageInfos:      file_MusicRhythmDataScRsp_proto_msgTypes,
	}.Build()
	File_MusicRhythmDataScRsp_proto = out.File
	file_MusicRhythmDataScRsp_proto_rawDesc = nil
	file_MusicRhythmDataScRsp_proto_goTypes = nil
	file_MusicRhythmDataScRsp_proto_depIdxs = nil
}
