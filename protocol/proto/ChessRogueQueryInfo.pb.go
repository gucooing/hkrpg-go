// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: ChessRogueQueryInfo.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChessRogueQueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryDiceInfo        *ChessRogueQueryDiceInfo      `protobuf:"bytes,15,opt,name=query_dice_info,json=queryDiceInfo,proto3" json:"query_dice_info,omitempty"`
	RogueVirtualItemInfo *GIIPEENECMB                  `protobuf:"bytes,8,opt,name=rogue_virtual_item_info,json=rogueVirtualItemInfo,proto3" json:"rogue_virtual_item_info,omitempty"`
	RogueDifficultyInfo  *ChessRogueQueryDiffcultyInfo `protobuf:"bytes,7,opt,name=rogue_difficulty_info,json=rogueDifficultyInfo,proto3" json:"rogue_difficulty_info,omitempty"`
	AreaIdList           []uint32                      `protobuf:"varint,6,rep,packed,name=area_id_list,json=areaIdList,proto3" json:"area_id_list,omitempty"`
	ChessAeonInfo        *ChessRogueQueryAeonInfo      `protobuf:"bytes,4,opt,name=chess_aeon_info,json=chessAeonInfo,proto3" json:"chess_aeon_info,omitempty"`
	ExploredAreaIdList   []uint32                      `protobuf:"varint,2,rep,packed,name=explored_area_id_list,json=exploredAreaIdList,proto3" json:"explored_area_id_list,omitempty"`
	TalentInfoList       *ChessRogueTalentInfo         `protobuf:"bytes,12,opt,name=talent_info_list,json=talentInfoList,proto3" json:"talent_info_list,omitempty"`
}

func (x *ChessRogueQueryInfo) Reset() {
	*x = ChessRogueQueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChessRogueQueryInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChessRogueQueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChessRogueQueryInfo) ProtoMessage() {}

func (x *ChessRogueQueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChessRogueQueryInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChessRogueQueryInfo.ProtoReflect.Descriptor instead.
func (*ChessRogueQueryInfo) Descriptor() ([]byte, []int) {
	return file_ChessRogueQueryInfo_proto_rawDescGZIP(), []int{0}
}

func (x *ChessRogueQueryInfo) GetQueryDiceInfo() *ChessRogueQueryDiceInfo {
	if x != nil {
		return x.QueryDiceInfo
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetRogueVirtualItemInfo() *GIIPEENECMB {
	if x != nil {
		return x.RogueVirtualItemInfo
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetRogueDifficultyInfo() *ChessRogueQueryDiffcultyInfo {
	if x != nil {
		return x.RogueDifficultyInfo
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetAreaIdList() []uint32 {
	if x != nil {
		return x.AreaIdList
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetChessAeonInfo() *ChessRogueQueryAeonInfo {
	if x != nil {
		return x.ChessAeonInfo
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetExploredAreaIdList() []uint32 {
	if x != nil {
		return x.ExploredAreaIdList
	}
	return nil
}

func (x *ChessRogueQueryInfo) GetTalentInfoList() *ChessRogueTalentInfo {
	if x != nil {
		return x.TalentInfoList
	}
	return nil
}

var File_ChessRogueQueryInfo_proto protoreflect.FileDescriptor

var file_ChessRogueQueryInfo_proto_rawDesc = []byte{
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x65, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x43, 0x68, 0x65, 0x73, 0x73,
	0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x47, 0x49, 0x49, 0x50, 0x45,
	0x45, 0x4e, 0x45, 0x43, 0x4d, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x03, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x17, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x49, 0x49, 0x50, 0x45, 0x45,
	0x4e, 0x45, 0x43, 0x4d, 0x42, 0x52, 0x14, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x15, 0x72,
	0x6f, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x66, 0x66,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x6f, 0x67, 0x75, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x65, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x65, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x73, 0x73, 0x41, 0x65, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x54, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ChessRogueQueryInfo_proto_rawDescOnce sync.Once
	file_ChessRogueQueryInfo_proto_rawDescData = file_ChessRogueQueryInfo_proto_rawDesc
)

func file_ChessRogueQueryInfo_proto_rawDescGZIP() []byte {
	file_ChessRogueQueryInfo_proto_rawDescOnce.Do(func() {
		file_ChessRogueQueryInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChessRogueQueryInfo_proto_rawDescData)
	})
	return file_ChessRogueQueryInfo_proto_rawDescData
}

var file_ChessRogueQueryInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ChessRogueQueryInfo_proto_goTypes = []interface{}{
	(*ChessRogueQueryInfo)(nil),          // 0: ChessRogueQueryInfo
	(*ChessRogueQueryDiceInfo)(nil),      // 1: ChessRogueQueryDiceInfo
	(*GIIPEENECMB)(nil),                  // 2: GIIPEENECMB
	(*ChessRogueQueryDiffcultyInfo)(nil), // 3: ChessRogueQueryDiffcultyInfo
	(*ChessRogueQueryAeonInfo)(nil),      // 4: ChessRogueQueryAeonInfo
	(*ChessRogueTalentInfo)(nil),         // 5: ChessRogueTalentInfo
}
var file_ChessRogueQueryInfo_proto_depIdxs = []int32{
	1, // 0: ChessRogueQueryInfo.query_dice_info:type_name -> ChessRogueQueryDiceInfo
	2, // 1: ChessRogueQueryInfo.rogue_virtual_item_info:type_name -> GIIPEENECMB
	3, // 2: ChessRogueQueryInfo.rogue_difficulty_info:type_name -> ChessRogueQueryDiffcultyInfo
	4, // 3: ChessRogueQueryInfo.chess_aeon_info:type_name -> ChessRogueQueryAeonInfo
	5, // 4: ChessRogueQueryInfo.talent_info_list:type_name -> ChessRogueTalentInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ChessRogueQueryInfo_proto_init() }
func file_ChessRogueQueryInfo_proto_init() {
	if File_ChessRogueQueryInfo_proto != nil {
		return
	}
	file_ChessRogueQueryAeonInfo_proto_init()
	file_ChessRogueQueryDiceInfo_proto_init()
	file_ChessRogueTalentInfo_proto_init()
	file_ChessRogueQueryDiffcultyInfo_proto_init()
	file_GIIPEENECMB_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChessRogueQueryInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChessRogueQueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChessRogueQueryInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChessRogueQueryInfo_proto_goTypes,
		DependencyIndexes: file_ChessRogueQueryInfo_proto_depIdxs,
		MessageInfos:      file_ChessRogueQueryInfo_proto_msgTypes,
	}.Build()
	File_ChessRogueQueryInfo_proto = out.File
	file_ChessRogueQueryInfo_proto_rawDesc = nil
	file_ChessRogueQueryInfo_proto_goTypes = nil
	file_ChessRogueQueryInfo_proto_depIdxs = nil
}
