// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.0
// source: GateServer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GateServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LKDFCHNEFBB                   string   `protobuf:"bytes,614,opt,name=LKDFCHNEFBB,proto3" json:"LKDFCHNEFBB,omitempty"`
	LHGKDGDJIHC                   string   `protobuf:"bytes,784,opt,name=LHGKDGDJIHC,proto3" json:"LHGKDGDJIHC,omitempty"`
	EnableVersionUpdate           bool     `protobuf:"varint,10,opt,name=enable_version_update,json=enableVersionUpdate,proto3" json:"enable_version_update,omitempty"`
	EnableCdnIpv6                 uint32   `protobuf:"varint,1243,opt,name=enable_cdn_ipv6,json=enableCdnIpv6,proto3" json:"enable_cdn_ipv6,omitempty"`
	EnableWatermark               bool     `protobuf:"varint,326,opt,name=enable_watermark,json=enableWatermark,proto3" json:"enable_watermark,omitempty"`
	Msg                           string   `protobuf:"bytes,8,opt,name=msg,proto3" json:"msg,omitempty"`
	IfixUrl                       string   `protobuf:"bytes,370,opt,name=ifix_url,json=ifixUrl,proto3" json:"ifix_url,omitempty"`
	MtpSwitch                     bool     `protobuf:"varint,2018,opt,name=mtp_switch,json=mtpSwitch,proto3" json:"mtp_switch,omitempty"`
	IALOEKGOJOC                   bool     `protobuf:"varint,6,opt,name=IALOEKGOJOC,proto3" json:"IALOEKGOJOC,omitempty"`
	BJOCANIBBKI                   string   `protobuf:"bytes,1332,opt,name=BJOCANIBBKI,proto3" json:"BJOCANIBBKI,omitempty"`
	EnableAndroidMiddlePackage    bool     `protobuf:"varint,1574,opt,name=enable_android_middle_package,json=enableAndroidMiddlePackage,proto3" json:"enable_android_middle_package,omitempty"`
	IfixVersion                   string   `protobuf:"bytes,569,opt,name=ifix_version,json=ifixVersion,proto3" json:"ifix_version,omitempty"`
	IIJLFILFMDF                   string   `protobuf:"bytes,138,opt,name=IIJLFILFMDF,proto3" json:"IIJLFILFMDF,omitempty"`
	FIOHEKDJNCG                   bool     `protobuf:"varint,837,opt,name=FIOHEKDJNCG,proto3" json:"FIOHEKDJNCG,omitempty"`
	LoginWhiteMsg                 string   `protobuf:"bytes,659,opt,name=login_white_msg,json=loginWhiteMsg,proto3" json:"login_white_msg,omitempty"`
	APJECJMGAKC                   bool     `protobuf:"varint,577,opt,name=APJECJMGAKC,proto3" json:"APJECJMGAKC,omitempty"`
	DesignDataReloginDesc         string   `protobuf:"bytes,1035,opt,name=design_data_relogin_desc,json=designDataReloginDesc,proto3" json:"design_data_relogin_desc,omitempty"`
	MdkResVersion                 string   `protobuf:"bytes,1359,opt,name=mdk_res_version,json=mdkResVersion,proto3" json:"mdk_res_version,omitempty"`
	ClientSecretKey               string   `protobuf:"bytes,452,opt,name=client_secret_key,json=clientSecretKey,proto3" json:"client_secret_key,omitempty"`
	Ipv6Address                   string   `protobuf:"bytes,1952,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	PMABNNEDCCG                   string   `protobuf:"bytes,1012,opt,name=PMABNNEDCCG,proto3" json:"PMABNNEDCCG,omitempty"`
	KLIAGHGOFML                   string   `protobuf:"bytes,1245,opt,name=KLIAGHGOFML,proto3" json:"KLIAGHGOFML,omitempty"`
	EventTrackingOpen             bool     `protobuf:"varint,1866,opt,name=event_tracking_open,json=eventTrackingOpen,proto3" json:"event_tracking_open,omitempty"`
	ODOCFCJMBCL                   string   `protobuf:"bytes,337,opt,name=ODOCFCJMBCL,proto3" json:"ODOCFCJMBCL,omitempty"`
	NPIGPBEKEKO                   string   `protobuf:"bytes,464,opt,name=NPIGPBEKEKO,proto3" json:"NPIGPBEKEKO,omitempty"`
	Ip                            string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	RegionName                    string   `protobuf:"bytes,12,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	KDBAGALHEDC                   string   `protobuf:"bytes,1122,opt,name=KDBAGALHEDC,proto3" json:"KDBAGALHEDC,omitempty"`
	CloseRedeemCode               bool     `protobuf:"varint,62,opt,name=close_redeem_code,json=closeRedeemCode,proto3" json:"close_redeem_code,omitempty"`
	RegionStopStart               int64    `protobuf:"varint,4,opt,name=region_stop_start,json=regionStopStart,proto3" json:"region_stop_start,omitempty"`
	UseTcp                        bool     `protobuf:"varint,673,opt,name=use_tcp,json=useTcp,proto3" json:"use_tcp,omitempty"`
	FDGFFCMALPI                   string   `protobuf:"bytes,1134,opt,name=FDGFFCMALPI,proto3" json:"FDGFFCMALPI,omitempty"`
	ExResourceUrl                 string   `protobuf:"bytes,1,opt,name=ex_resource_url,json=exResourceUrl,proto3" json:"ex_resource_url,omitempty"`
	FHALNCIHMGA                   string   `protobuf:"bytes,592,opt,name=FHALNCIHMGA,proto3" json:"FHALNCIHMGA,omitempty"`
	PlayerReturnQuestionnaireAUrl string   `protobuf:"bytes,1893,opt,name=player_return_questionnaire_a_url,json=playerReturnQuestionnaireAUrl,proto3" json:"player_return_questionnaire_a_url,omitempty"`
	Retcode                       uint32   `protobuf:"varint,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	IPKLAMMKNNG                   string   `protobuf:"bytes,117,opt,name=IPKLAMMKNNG,proto3" json:"IPKLAMMKNNG,omitempty"`
	PlayerReturnInviteH5Url       string   `protobuf:"bytes,1556,opt,name=player_return_invite_h5_url,json=playerReturnInviteH5Url,proto3" json:"player_return_invite_h5_url,omitempty"`
	AsbReloginType                uint32   `protobuf:"varint,13,opt,name=asb_relogin_type,json=asbReloginType,proto3" json:"asb_relogin_type,omitempty"`
	CNAKLGMDLPE                   bool     `protobuf:"varint,422,opt,name=CNAKLGMDLPE,proto3" json:"CNAKLGMDLPE,omitempty"`
	LuaUrl                        string   `protobuf:"bytes,3,opt,name=lua_url,json=luaUrl,proto3" json:"lua_url,omitempty"`
	PreDownloadUrl                string   `protobuf:"bytes,365,opt,name=pre_download_url,json=preDownloadUrl,proto3" json:"pre_download_url,omitempty"`
	ForbidRecharge                bool     `protobuf:"varint,1703,opt,name=forbid_recharge,json=forbidRecharge,proto3" json:"forbid_recharge,omitempty"`
	EnableUploadBattleLog         bool     `protobuf:"varint,340,opt,name=enable_upload_battle_log,json=enableUploadBattleLog,proto3" json:"enable_upload_battle_log,omitempty"`
	OnlineReplayDownloadUrl       string   `protobuf:"bytes,962,opt,name=online_replay_download_url,json=onlineReplayDownloadUrl,proto3" json:"online_replay_download_url,omitempty"`
	NetworkDiagnostic             bool     `protobuf:"varint,1782,opt,name=network_diagnostic,json=networkDiagnostic,proto3" json:"network_diagnostic,omitempty"`
	AssetBundleUrl                string   `protobuf:"bytes,9,opt,name=asset_bundle_url,json=assetBundleUrl,proto3" json:"asset_bundle_url,omitempty"`
	BBFOAJGLLBC                   string   `protobuf:"bytes,355,opt,name=BBFOAJGLLBC,proto3" json:"BBFOAJGLLBC,omitempty"`
	OnlineReplayUploadUrl         string   `protobuf:"bytes,1307,opt,name=online_replay_upload_url,json=onlineReplayUploadUrl,proto3" json:"online_replay_upload_url,omitempty"`
	GBONLDEMBEN                   []string `protobuf:"bytes,1588,rep,name=GBONLDEMBEN,proto3" json:"GBONLDEMBEN,omitempty"`
	PlayerReturnQuestionnaireBUrl string   `protobuf:"bytes,1334,opt,name=player_return_questionnaire_b_url,json=playerReturnQuestionnaireBUrl,proto3" json:"player_return_questionnaire_b_url,omitempty"`
	AsbReloginDesc                string   `protobuf:"bytes,14,opt,name=asb_relogin_desc,json=asbReloginDesc,proto3" json:"asb_relogin_desc,omitempty"`
	IosExam                       bool     `protobuf:"varint,1575,opt,name=ios_exam,json=iosExam,proto3" json:"ios_exam,omitempty"`
	KKHFKMIKFIB                   string   `protobuf:"bytes,362,opt,name=KKHFKMIKFIB,proto3" json:"KKHFKMIKFIB,omitempty"`
	MDKDJLNHGKN                   string   `protobuf:"bytes,1624,opt,name=MDKDJLNHGKN,proto3" json:"MDKDJLNHGKN,omitempty"`
	ELJIMGJLHBC                   string   `protobuf:"bytes,1779,opt,name=ELJIMGJLHBC,proto3" json:"ELJIMGJLHBC,omitempty"`
	RegionStopEnd                 int64    `protobuf:"varint,15,opt,name=region_stop_end,json=regionStopEnd,proto3" json:"region_stop_end,omitempty"`
	ServerDescription             string   `protobuf:"bytes,20,opt,name=server_description,json=serverDescription,proto3" json:"server_description,omitempty"`
	DesignDataReloginType         uint32   `protobuf:"varint,7,opt,name=design_data_relogin_type,json=designDataReloginType,proto3" json:"design_data_relogin_type,omitempty"`
	Port                          uint32   `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GateServer) Reset() {
	*x = GateServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GateServer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateServer) ProtoMessage() {}

func (x *GateServer) ProtoReflect() protoreflect.Message {
	mi := &file_GateServer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateServer.ProtoReflect.Descriptor instead.
func (*GateServer) Descriptor() ([]byte, []int) {
	return file_GateServer_proto_rawDescGZIP(), []int{0}
}

func (x *GateServer) GetLKDFCHNEFBB() string {
	if x != nil {
		return x.LKDFCHNEFBB
	}
	return ""
}

func (x *GateServer) GetLHGKDGDJIHC() string {
	if x != nil {
		return x.LHGKDGDJIHC
	}
	return ""
}

func (x *GateServer) GetEnableVersionUpdate() bool {
	if x != nil {
		return x.EnableVersionUpdate
	}
	return false
}

func (x *GateServer) GetEnableCdnIpv6() uint32 {
	if x != nil {
		return x.EnableCdnIpv6
	}
	return 0
}

func (x *GateServer) GetEnableWatermark() bool {
	if x != nil {
		return x.EnableWatermark
	}
	return false
}

func (x *GateServer) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GateServer) GetIfixUrl() string {
	if x != nil {
		return x.IfixUrl
	}
	return ""
}

func (x *GateServer) GetMtpSwitch() bool {
	if x != nil {
		return x.MtpSwitch
	}
	return false
}

func (x *GateServer) GetIALOEKGOJOC() bool {
	if x != nil {
		return x.IALOEKGOJOC
	}
	return false
}

func (x *GateServer) GetBJOCANIBBKI() string {
	if x != nil {
		return x.BJOCANIBBKI
	}
	return ""
}

func (x *GateServer) GetEnableAndroidMiddlePackage() bool {
	if x != nil {
		return x.EnableAndroidMiddlePackage
	}
	return false
}

func (x *GateServer) GetIfixVersion() string {
	if x != nil {
		return x.IfixVersion
	}
	return ""
}

func (x *GateServer) GetIIJLFILFMDF() string {
	if x != nil {
		return x.IIJLFILFMDF
	}
	return ""
}

func (x *GateServer) GetFIOHEKDJNCG() bool {
	if x != nil {
		return x.FIOHEKDJNCG
	}
	return false
}

func (x *GateServer) GetLoginWhiteMsg() string {
	if x != nil {
		return x.LoginWhiteMsg
	}
	return ""
}

func (x *GateServer) GetAPJECJMGAKC() bool {
	if x != nil {
		return x.APJECJMGAKC
	}
	return false
}

func (x *GateServer) GetDesignDataReloginDesc() string {
	if x != nil {
		return x.DesignDataReloginDesc
	}
	return ""
}

func (x *GateServer) GetMdkResVersion() string {
	if x != nil {
		return x.MdkResVersion
	}
	return ""
}

func (x *GateServer) GetClientSecretKey() string {
	if x != nil {
		return x.ClientSecretKey
	}
	return ""
}

func (x *GateServer) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *GateServer) GetPMABNNEDCCG() string {
	if x != nil {
		return x.PMABNNEDCCG
	}
	return ""
}

func (x *GateServer) GetKLIAGHGOFML() string {
	if x != nil {
		return x.KLIAGHGOFML
	}
	return ""
}

func (x *GateServer) GetEventTrackingOpen() bool {
	if x != nil {
		return x.EventTrackingOpen
	}
	return false
}

func (x *GateServer) GetODOCFCJMBCL() string {
	if x != nil {
		return x.ODOCFCJMBCL
	}
	return ""
}

func (x *GateServer) GetNPIGPBEKEKO() string {
	if x != nil {
		return x.NPIGPBEKEKO
	}
	return ""
}

func (x *GateServer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GateServer) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *GateServer) GetKDBAGALHEDC() string {
	if x != nil {
		return x.KDBAGALHEDC
	}
	return ""
}

func (x *GateServer) GetCloseRedeemCode() bool {
	if x != nil {
		return x.CloseRedeemCode
	}
	return false
}

func (x *GateServer) GetRegionStopStart() int64 {
	if x != nil {
		return x.RegionStopStart
	}
	return 0
}

func (x *GateServer) GetUseTcp() bool {
	if x != nil {
		return x.UseTcp
	}
	return false
}

func (x *GateServer) GetFDGFFCMALPI() string {
	if x != nil {
		return x.FDGFFCMALPI
	}
	return ""
}

func (x *GateServer) GetExResourceUrl() string {
	if x != nil {
		return x.ExResourceUrl
	}
	return ""
}

func (x *GateServer) GetFHALNCIHMGA() string {
	if x != nil {
		return x.FHALNCIHMGA
	}
	return ""
}

func (x *GateServer) GetPlayerReturnQuestionnaireAUrl() string {
	if x != nil {
		return x.PlayerReturnQuestionnaireAUrl
	}
	return ""
}

func (x *GateServer) GetRetcode() uint32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *GateServer) GetIPKLAMMKNNG() string {
	if x != nil {
		return x.IPKLAMMKNNG
	}
	return ""
}

func (x *GateServer) GetPlayerReturnInviteH5Url() string {
	if x != nil {
		return x.PlayerReturnInviteH5Url
	}
	return ""
}

func (x *GateServer) GetAsbReloginType() uint32 {
	if x != nil {
		return x.AsbReloginType
	}
	return 0
}

func (x *GateServer) GetCNAKLGMDLPE() bool {
	if x != nil {
		return x.CNAKLGMDLPE
	}
	return false
}

func (x *GateServer) GetLuaUrl() string {
	if x != nil {
		return x.LuaUrl
	}
	return ""
}

func (x *GateServer) GetPreDownloadUrl() string {
	if x != nil {
		return x.PreDownloadUrl
	}
	return ""
}

func (x *GateServer) GetForbidRecharge() bool {
	if x != nil {
		return x.ForbidRecharge
	}
	return false
}

func (x *GateServer) GetEnableUploadBattleLog() bool {
	if x != nil {
		return x.EnableUploadBattleLog
	}
	return false
}

func (x *GateServer) GetOnlineReplayDownloadUrl() string {
	if x != nil {
		return x.OnlineReplayDownloadUrl
	}
	return ""
}

func (x *GateServer) GetNetworkDiagnostic() bool {
	if x != nil {
		return x.NetworkDiagnostic
	}
	return false
}

func (x *GateServer) GetAssetBundleUrl() string {
	if x != nil {
		return x.AssetBundleUrl
	}
	return ""
}

func (x *GateServer) GetBBFOAJGLLBC() string {
	if x != nil {
		return x.BBFOAJGLLBC
	}
	return ""
}

func (x *GateServer) GetOnlineReplayUploadUrl() string {
	if x != nil {
		return x.OnlineReplayUploadUrl
	}
	return ""
}

func (x *GateServer) GetGBONLDEMBEN() []string {
	if x != nil {
		return x.GBONLDEMBEN
	}
	return nil
}

func (x *GateServer) GetPlayerReturnQuestionnaireBUrl() string {
	if x != nil {
		return x.PlayerReturnQuestionnaireBUrl
	}
	return ""
}

func (x *GateServer) GetAsbReloginDesc() string {
	if x != nil {
		return x.AsbReloginDesc
	}
	return ""
}

func (x *GateServer) GetIosExam() bool {
	if x != nil {
		return x.IosExam
	}
	return false
}

func (x *GateServer) GetKKHFKMIKFIB() string {
	if x != nil {
		return x.KKHFKMIKFIB
	}
	return ""
}

func (x *GateServer) GetMDKDJLNHGKN() string {
	if x != nil {
		return x.MDKDJLNHGKN
	}
	return ""
}

func (x *GateServer) GetELJIMGJLHBC() string {
	if x != nil {
		return x.ELJIMGJLHBC
	}
	return ""
}

func (x *GateServer) GetRegionStopEnd() int64 {
	if x != nil {
		return x.RegionStopEnd
	}
	return 0
}

func (x *GateServer) GetServerDescription() string {
	if x != nil {
		return x.ServerDescription
	}
	return ""
}

func (x *GateServer) GetDesignDataReloginType() uint32 {
	if x != nil {
		return x.DesignDataReloginType
	}
	return 0
}

func (x *GateServer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_GateServer_proto protoreflect.FileDescriptor

var file_GateServer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfe, 0x12, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0b, 0x4c, 0x4b, 0x44, 0x46, 0x43, 0x48, 0x4e, 0x45, 0x46, 0x42, 0x42,
	0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x4b, 0x44, 0x46, 0x43, 0x48, 0x4e,
	0x45, 0x46, 0x42, 0x42, 0x12, 0x21, 0x0a, 0x0b, 0x4c, 0x48, 0x47, 0x4b, 0x44, 0x47, 0x44, 0x4a,
	0x49, 0x48, 0x43, 0x18, 0x90, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x48, 0x47, 0x4b,
	0x44, 0x47, 0x44, 0x4a, 0x49, 0x48, 0x43, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x64, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0xdb,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x64, 0x6e,
	0x49, 0x70, 0x76, 0x36, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xf2,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x69, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x74, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xe2, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x74, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x41, 0x4c, 0x4f, 0x45, 0x4b, 0x47, 0x4f, 0x4a, 0x4f, 0x43, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x41, 0x4c, 0x4f, 0x45, 0x4b, 0x47, 0x4f, 0x4a, 0x4f, 0x43,
	0x12, 0x21, 0x0a, 0x0b, 0x42, 0x4a, 0x4f, 0x43, 0x41, 0x4e, 0x49, 0x42, 0x42, 0x4b, 0x49, 0x18,
	0xb4, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x4a, 0x4f, 0x43, 0x41, 0x4e, 0x49, 0x42,
	0x42, 0x4b, 0x49, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0xa6, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x66, 0x69, 0x78, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb9, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x66, 0x69, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x49,
	0x49, 0x4a, 0x4c, 0x46, 0x49, 0x4c, 0x46, 0x4d, 0x44, 0x46, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x49, 0x49, 0x4a, 0x4c, 0x46, 0x49, 0x4c, 0x46, 0x4d, 0x44, 0x46, 0x12, 0x21,
	0x0a, 0x0b, 0x46, 0x49, 0x4f, 0x48, 0x45, 0x4b, 0x44, 0x4a, 0x4e, 0x43, 0x47, 0x18, 0xc5, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x49, 0x4f, 0x48, 0x45, 0x4b, 0x44, 0x4a, 0x4e, 0x43,
	0x47, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x93, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x50,
	0x4a, 0x45, 0x43, 0x4a, 0x4d, 0x47, 0x41, 0x4b, 0x43, 0x18, 0xc1, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x41, 0x50, 0x4a, 0x45, 0x43, 0x4a, 0x4d, 0x47, 0x41, 0x4b, 0x43, 0x12, 0x38, 0x0a,
	0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x8b, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x64, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xcf, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xc4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa0, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x4d, 0x41, 0x42, 0x4e, 0x4e, 0x45, 0x44, 0x43, 0x43, 0x47,
	0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x4d, 0x41, 0x42, 0x4e, 0x4e, 0x45,
	0x44, 0x43, 0x43, 0x47, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x4c, 0x49, 0x41, 0x47, 0x48, 0x47, 0x4f,
	0x46, 0x4d, 0x4c, 0x18, 0xdd, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x4c, 0x49, 0x41,
	0x47, 0x48, 0x47, 0x4f, 0x46, 0x4d, 0x4c, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0xca,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x4f, 0x44, 0x4f, 0x43,
	0x46, 0x43, 0x4a, 0x4d, 0x42, 0x43, 0x4c, 0x18, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x44, 0x4f, 0x43, 0x46, 0x43, 0x4a, 0x4d, 0x42, 0x43, 0x4c, 0x12, 0x21, 0x0a, 0x0b, 0x4e,
	0x50, 0x49, 0x47, 0x50, 0x42, 0x45, 0x4b, 0x45, 0x4b, 0x4f, 0x18, 0xd0, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4e, 0x50, 0x49, 0x47, 0x50, 0x42, 0x45, 0x4b, 0x45, 0x4b, 0x4f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x4b, 0x44, 0x42, 0x41, 0x47, 0x41, 0x4c, 0x48, 0x45, 0x44, 0x43, 0x18, 0xe2,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x44, 0x42, 0x41, 0x47, 0x41, 0x4c, 0x48, 0x45,
	0x44, 0x43, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x63, 0x70, 0x18, 0xa1, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x54, 0x63, 0x70, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x44, 0x47, 0x46, 0x46, 0x43, 0x4d, 0x41,
	0x4c, 0x50, 0x49, 0x18, 0xee, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x44, 0x47, 0x46,
	0x46, 0x43, 0x4d, 0x41, 0x4c, 0x50, 0x49, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0b, 0x46, 0x48, 0x41, 0x4c, 0x4e, 0x43, 0x49, 0x48, 0x4d, 0x47, 0x41, 0x18, 0xd0,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x48, 0x41, 0x4c, 0x4e, 0x43, 0x49, 0x48, 0x4d,
	0x47, 0x41, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x5f, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xe5, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x41, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x4b, 0x4c, 0x41,
	0x4d, 0x4d, 0x4b, 0x4e, 0x4e, 0x47, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50,
	0x4b, 0x4c, 0x41, 0x4d, 0x4d, 0x4b, 0x4e, 0x4e, 0x47, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x68, 0x35, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x94, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x48, 0x35, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x62, 0x5f,
	0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x62, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4e, 0x41, 0x4b, 0x4c, 0x47, 0x4d, 0x44, 0x4c, 0x50,
	0x45, 0x18, 0xa6, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x4e, 0x41, 0x4b, 0x4c, 0x47,
	0x4d, 0x44, 0x4c, 0x50, 0x45, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x75, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x75, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0xa7, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0xd4, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x3c, 0x0a,
	0x1a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xc2, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x18, 0xf6, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x42, 0x46, 0x4f, 0x41, 0x4a, 0x47,
	0x4c, 0x4c, 0x42, 0x43, 0x18, 0xe3, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x42, 0x46,
	0x4f, 0x41, 0x4a, 0x47, 0x4c, 0x4c, 0x42, 0x43, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x9b, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x42, 0x4f, 0x4e, 0x4c, 0x44, 0x45, 0x4d, 0x42, 0x45,
	0x4e, 0x18, 0xb4, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x42, 0x4f, 0x4e, 0x4c, 0x44,
	0x45, 0x4d, 0x42, 0x45, 0x4e, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x5f, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xb6, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x42, 0x55, 0x72, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x62, 0x52,
	0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6f,
	0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0xa7, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x6f, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x4b, 0x4b, 0x48, 0x46, 0x4b, 0x4d,
	0x49, 0x4b, 0x46, 0x49, 0x42, 0x18, 0xea, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x4b,
	0x48, 0x46, 0x4b, 0x4d, 0x49, 0x4b, 0x46, 0x49, 0x42, 0x12, 0x21, 0x0a, 0x0b, 0x4d, 0x44, 0x4b,
	0x44, 0x4a, 0x4c, 0x4e, 0x48, 0x47, 0x4b, 0x4e, 0x18, 0xd8, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4d, 0x44, 0x4b, 0x44, 0x4a, 0x4c, 0x4e, 0x48, 0x47, 0x4b, 0x4e, 0x12, 0x21, 0x0a, 0x0b,
	0x45, 0x4c, 0x4a, 0x49, 0x4d, 0x47, 0x4a, 0x4c, 0x48, 0x42, 0x43, 0x18, 0xf3, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x45, 0x4c, 0x4a, 0x49, 0x4d, 0x47, 0x4a, 0x4c, 0x48, 0x42, 0x43, 0x12,
	0x26, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x2e, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x1b, 0x45, 0x67, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x2e,
	0x44, 0x61, 0x6e, 0x68, 0x65, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GateServer_proto_rawDescOnce sync.Once
	file_GateServer_proto_rawDescData = file_GateServer_proto_rawDesc
)

func file_GateServer_proto_rawDescGZIP() []byte {
	file_GateServer_proto_rawDescOnce.Do(func() {
		file_GateServer_proto_rawDescData = protoimpl.X.CompressGZIP(file_GateServer_proto_rawDescData)
	})
	return file_GateServer_proto_rawDescData
}

var file_GateServer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_GateServer_proto_goTypes = []interface{}{
	(*GateServer)(nil), // 0: GateServer
}
var file_GateServer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_GateServer_proto_init() }
func file_GateServer_proto_init() {
	if File_GateServer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GateServer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GateServer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GateServer_proto_goTypes,
		DependencyIndexes: file_GateServer_proto_depIdxs,
		MessageInfos:      file_GateServer_proto_msgTypes,
	}.Build()
	File_GateServer_proto = out.File
	file_GateServer_proto_rawDesc = nil
	file_GateServer_proto_goTypes = nil
	file_GateServer_proto_depIdxs = nil
}
